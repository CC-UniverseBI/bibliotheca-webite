{
  "address": "0x27cdDC287bAc8Ca946157E265F80A091CCB16A87",
  "abi": [
    {
      "inputs": [],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x69ac7632482192d7228a41c772aba90dc1e55ccc68727bff8b02c48abb0eeefd",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0x27cdDC287bAc8Ca946157E265F80A091CCB16A87",
    "transactionIndex": 0,
    "gasUsed": "114967780",
    "logsBloom": "0x
    "blockHash": "0xba630aee5fb8c69af2b4b788b4bcf2ef3770e1fe792f0c74f058b233b7dce897",
    "transactionHash": "0x69ac7632482192d7228a41c772aba90dc1e55ccc68727bff8b02c48abb0eeefd",
    "logs": [],
    "blockNumber": 5983001,
    "cumulativeGasUsed": "89739540",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d8b2bb63233aed491a06ed5388fa0df5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/DataSetterFacet.sol\":\"DataSetterFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/settling/facets/DataSetterFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DataSetterFacet {\\n    AppStorage internal s;\\n\\n    function setData() public {\\n        LibDiamond.enforceIsContractOwner();\\n        _initBuilding();\\n        _initResourceValues();\\n        _initArmy();\\n    }\\n\\n    function _initBuilding() internal {\\n        // output levels\\n        s.buildingCosts[0].name = \\\"markets\\\";\\n        s.buildingCosts[0].resourceIds = [1, 2];\\n        s.buildingCosts[0].resourceValues = [500, 500];\\n        s.buildingCosts[0].requirements = [1];\\n        s.buildingCosts[0].population = 2;\\n\\n        s.buildingCosts[1].name = \\\"aqueducts\\\";\\n        s.buildingCosts[1].resourceIds = [1, 2];\\n        s.buildingCosts[1].resourceValues = [200, 200];\\n        s.buildingCosts[1].requirements = [3];\\n        s.buildingCosts[1].food = 1;\\n\\n        s.buildingCosts[2].name = \\\"castles\\\";\\n        s.buildingCosts[2].resourceIds = [1, 2, 7];\\n        s.buildingCosts[2].resourceValues = [3000, 5000, 500];\\n        s.buildingCosts[2].requirements = [0];\\n        s.buildingCosts[2].defence = 5;\\n        s.buildingCosts[2].offence = 5;\\n        s.buildingCosts[2].food = -4;\\n\\n        s.buildingCosts[3].name = \\\"ports\\\";\\n        s.buildingCosts[3].resourceIds = [1, 2, 3];\\n        s.buildingCosts[3].resourceValues = [200, 200, 200];\\n        s.buildingCosts[3].requirements = [2];\\n        s.buildingCosts[3].population = 1;\\n        s.buildingCosts[3].food = 2;\\n\\n        s.buildingCosts[4].name = \\\"barracks\\\";\\n        s.buildingCosts[4].resourceIds = [1, 5, 8];\\n        s.buildingCosts[4].resourceValues = [500, 1000, 400];\\n        s.buildingCosts[4].requirements = [1];\\n        s.buildingCosts[4].defence = 1;\\n        s.buildingCosts[4].offence = 2;\\n        s.buildingCosts[4].food = -2;\\n\\n        s.buildingCosts[5].name = \\\"farms\\\";\\n        s.buildingCosts[5].resourceIds = [1, 2];\\n        s.buildingCosts[5].resourceValues = [200, 200];\\n        s.buildingCosts[5].requirements = [1];\\n        s.buildingCosts[5].food = 2;\\n\\n        s.buildingCosts[6].name = \\\"temples\\\";\\n        s.buildingCosts[6].resourceIds = [10, 12, 13, 14, 16];\\n        s.buildingCosts[6].resourceValues = [200, 100, 100, 100, 100];\\n        s.buildingCosts[6].requirements = [0];\\n        s.buildingCosts[6].defence = 2;\\n        s.buildingCosts[6].magic = 5;\\n        s.buildingCosts[6].population = 1;\\n\\n        s.buildingCosts[7].name = \\\"shipyard\\\";\\n        s.buildingCosts[7].resourceIds = [1, 2];\\n        s.buildingCosts[7].resourceValues = [2000, 2000];\\n        s.buildingCosts[7].requirements = [2];\\n        s.buildingCosts[7].offence = 1;\\n        s.buildingCosts[7].food = -2;\\n\\n        s.buildingCosts[8].name = \\\"fishing village\\\";\\n        s.buildingCosts[8].resourceIds = [2];\\n        s.buildingCosts[8].resourceValues = [1000];\\n        s.buildingCosts[8].requirements = [3];\\n        s.buildingCosts[8].population = 1;\\n    }\\n\\n    function _initResourceValues() internal {\\n        // output levels\\n        s.levelProduction[1].output = 100;\\n        s.levelProduction[2].output = 130;\\n        s.levelProduction[3].output = 150;\\n        s.levelProduction[4].output = 170;\\n        s.levelProduction[5].output = 180;\\n\\n        // resource ids\\n        s.upgradeCosts[1].resourceIds = [2, 3, 4];\\n        s.upgradeCosts[2].resourceIds = [3, 7, 8];\\n        s.upgradeCosts[3].resourceIds = [1, 2];\\n        s.upgradeCosts[4].resourceIds = [15, 1, 3, 2];\\n        s.upgradeCosts[5].resourceIds = [2, 11, 1];\\n        s.upgradeCosts[6].resourceIds = [3, 2];\\n        s.upgradeCosts[7].resourceIds = [2, 4, 1];\\n        s.upgradeCosts[8].resourceIds = [3, 7, 1];\\n        s.upgradeCosts[9].resourceIds = [3, 1, 11, 15];\\n        s.upgradeCosts[10].resourceIds = [4, 2, 7];\\n        s.upgradeCosts[11].resourceIds = [5, 1, 2];\\n        s.upgradeCosts[12].resourceIds = [1, 3, 6, 5];\\n        s.upgradeCosts[13].resourceIds = [16, 1, 2];\\n        s.upgradeCosts[14].resourceIds = [1, 2, 12, 3];\\n        s.upgradeCosts[15].resourceIds = [1, 2, 13];\\n        s.upgradeCosts[16].resourceIds = [9, 14, 10, 19];\\n        s.upgradeCosts[17].resourceIds = [13, 15, 18];\\n        s.upgradeCosts[18].resourceIds = [1, 10, 14];\\n        s.upgradeCosts[19].resourceIds = [9, 16, 3, 17];\\n        s.upgradeCosts[20].resourceIds = [22, 1, 11, 4];\\n        s.upgradeCosts[21].resourceIds = [22, 6, 4, 18];\\n        s.upgradeCosts[22].resourceIds = [21, 14, 16, 20];\\n\\n        s.upgradeCosts[1].upgradeCostLevels[1].value = [140, 130, 100];\\n        s.upgradeCosts[2].upgradeCostLevels[1].value = [160, 60, 50];\\n        s.upgradeCosts[3].upgradeCostLevels[1].value = [310, 260];\\n        s.upgradeCosts[4].upgradeCostLevels[1].value = [10, 210, 170, 180];\\n        s.upgradeCosts[5].upgradeCostLevels[1].value = [280, 20, 330];\\n        s.upgradeCosts[6].upgradeCostLevels[1].value = [500, 520];\\n        s.upgradeCosts[7].upgradeCostLevels[1].value = [500, 350, 600];\\n        s.upgradeCosts[8].upgradeCostLevels[1].value = [590, 200, 730];\\n        s.upgradeCosts[9].upgradeCostLevels[1].value = [460, 570, 40, 20];\\n        s.upgradeCosts[10].upgradeCostLevels[1].value = [680, 960, 320];\\n        s.upgradeCosts[11].upgradeCostLevels[1].value = [1140, 2260, 1870];\\n        s.upgradeCosts[12].upgradeCostLevels[1].value = [2050, 1660, 830, 1030];\\n        s.upgradeCosts[13].upgradeCostLevels[1].value = [110, 2830, 2340];\\n        s.upgradeCosts[14].upgradeCostLevels[1].value = [2120, 1750, 130, 1710];\\n        s.upgradeCosts[15].upgradeCostLevels[1].value = [3910, 3240, 230];\\n        s.upgradeCosts[16].upgradeCostLevels[1].value = [680, 180, 450, 70];\\n        s.upgradeCosts[17].upgradeCostLevels[1].value = [290, 210, 130];\\n        s.upgradeCosts[18].upgradeCostLevels[1].value = [6040, 870, 360];\\n        s.upgradeCosts[19].upgradeCostLevels[1].value = [1190, 220, 4380, 190];\\n        s.upgradeCosts[20].upgradeCostLevels[1].value = [50, 9120, 680, 5380];\\n        s.upgradeCosts[21].upgradeCostLevels[1].value = [80, 5480, 7990, 370];\\n        s.upgradeCosts[22].upgradeCostLevels[1].value = [200, 1290, 880, 300];\\n\\n        for (uint256 i = 1; i <= 22; i++) {\\n            uint256[] memory baseValue = s\\n                .upgradeCosts[i]\\n                .upgradeCostLevels[1]\\n                .value;\\n\\n            for (uint256 x = 2; x <= 5; x++) {\\n                uint256[] memory newValue = new uint256[](baseValue.length);\\n                for (uint256 y = 0; y < baseValue.length; y++) {\\n                    uint256[] memory levelBaseValue = s\\n                        .upgradeCosts[i]\\n                        .upgradeCostLevels[x - 1]\\n                        .value;\\n\\n                    newValue[y] = ((levelBaseValue[y] * 140) / 100);\\n                }\\n                s.upgradeCosts[i].upgradeCostLevels[x].value = newValue;\\n            }\\n        }\\n    }\\n\\n    function _initArmy() internal {\\n        s.armyUnit[0].name = \\\"Knight\\\";\\n        s.armyUnit[0].timeToTrain = 1 days;\\n        s.armyUnit[0].offence = 2;\\n        s.armyUnit[0].defence = 2;\\n        s.armyUnit[0].timeToTrain = 1 days;\\n        s.armyUnit[0].resourceIds = [2, 3, 4];\\n        s.armyUnit[0].resourceValues = [20, 20, 20];\\n\\n        s.armyUnit[1].name = \\\"Footsoldier\\\";\\n        s.armyUnit[1].timeToTrain = 1 days;\\n        s.armyUnit[1].offence = 1;\\n        s.armyUnit[1].defence = 1;\\n        s.armyUnit[1].timeToTrain = 1 days;\\n        s.armyUnit[1].resourceIds = [2, 3, 4];\\n        s.armyUnit[1].resourceValues = [20, 20, 20];\\n\\n        s.armyUnit[2].name = \\\"Trebuchet\\\";\\n        s.armyUnit[2].timeToTrain = 1 days;\\n        s.armyUnit[2].offence = 1;\\n        s.armyUnit[2].defence = 4;\\n        s.armyUnit[2].timeToTrain = 1 days;\\n        s.armyUnit[2].resourceIds = [2, 3, 4];\\n        s.armyUnit[2].resourceValues = [20, 20, 20];\\n\\n        s.armyUnit[3].name = \\\"Scorpion\\\";\\n        s.armyUnit[3].timeToTrain = 1 days;\\n        s.armyUnit[3].offence = 1;\\n        s.armyUnit[3].defence = 4;\\n        s.armyUnit[3].timeToTrain = 1 days;\\n        s.armyUnit[3].resourceIds = [2, 3, 4];\\n        s.armyUnit[3].resourceValues = [20, 20, 20];\\n    }\\n}\\n\",\"keccak256\":\"0x2b953f76aa05c2b695bb519f651442408fa8d354e4984a1aaa57460fac38a1dc\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    address sRealms;\\n    address realms;\\n    address realmsStorage;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n    mapping(uint256 => Raiding) raiding;\\n    mapping(uint256 => RaidingArmy) raidingArmy;\\n    mapping(uint256 => DefendingArmy) defendingArmy;\\n    mapping(uint256 => ArmyUnit) armyUnit;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\nstruct Raiding {\\n    uint256 coolDownTime;\\n    uint256 totalRaids;\\n    uint256 successfulRaids;\\n}\\n\\nstruct RaidingArmy {\\n    uint32 knightsTrained;\\n    uint32 knightsSlayed;\\n    uint32 footSoldiersTrained;\\n    uint32 footSoldiersSlayed;\\n    mapping(uint256 => TrainedArmyUnit) knights;\\n    mapping(uint256 => TrainedArmyUnit) footSoldiers;\\n}\\n\\nstruct DefendingArmy {\\n    uint32 trebuchetsTrained;\\n    uint32 trebuchetsSlayed;\\n    uint32 scorpionsTrained;\\n    uint32 scorpionsSlayed;\\n    mapping(uint256 => TrainedArmyUnit) trebuchets;\\n    mapping(uint256 => TrainedArmyUnit) scorpions;\\n}\\n\\nstruct TrainedArmyUnit {\\n    bool destroyed;\\n    uint256 unitFinished;\\n}\\n\\nstruct ArmyUnit {\\n    string name;\\n    uint256 timeToTrain;\\n    uint32 offence;\\n    uint32 defence;\\n    uint256[] resourceIds;\\n    uint256[] resourceValues;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xdf4eaff003a64be8c2fe375e99c6b5464c22c235404aaa429c2917a21babbac4\"},\"contracts/settling/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport {IDiamondCut} from \\\"../../shared/interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress)\\n        internal\\n    {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\n            .facetAddresses\\n            .length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x381be6bf44ad825d476842de372d56bc20f4c6b6c2c9a7b176b2a204020e7f39\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xbf17f994eca1e6da64c2cec17318b5701ce0a424fb77db7a64a08c17a547b091\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137bc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f31604c714610030575b600080fd5b61003861003a565b005b61004261005c565b61004a6100f7565b610052611064565b61005a6124ba565b565b610064612ba5565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ec90613535565b60405180910390fd5b565b6040518060400160405280600781526020017f6d61726b657473000000000000000000000000000000000000000000000000008152506000600b0160008081526020019081526020016000206000019080519060200190610159929190612bd2565b506040518060400160405280600160ff168152602001600260ff168152506000600b01600080815260200190815260200160002060010190600261019e929190612c58565b5060405180604001604052806101f461ffff1681526020016101f461ffff168152506000600b0160008081526020019081526020016000206002019060026101e7929190612d05565b506040518060200160405280600160ff168152506000600b016000808152602001908152602001600020600301906001610222929190612db3565b5060026000600b016000808152602001908152602001600020600401600c6101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600981526020017f61717565647563747300000000000000000000000000000000000000000000008152506000600b0160006001815260200190815260200160002060000190805190602001906102c2929190612bd2565b506040518060400160405280600160ff168152602001600260ff168152506000600b01600060018152602001908152602001600020600101906002610308929190612c58565b50604051806040016040528060c860ff16815260200160c860ff168152506000600b0160006001815260200190815260200160002060020190600261034e929190612c58565b506040518060200160405280600360ff168152506000600b0160006001815260200190815260200160002060030190600161038a929190612db3565b5060016000600b0160006001815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600781526020017f636173746c6573000000000000000000000000000000000000000000000000008152506000600b01600060028152602001908152602001600020600001908051906020019061042b929190612bd2565b506040518060600160405280600160ff168152602001600260ff168152602001600760ff168152506000600b0160006002815260200190815260200160002060010190600361047b929190612e60565b506040518060600160405280610bb861ffff16815260200161138861ffff1681526020016101f461ffff168152506000600b016000600281526020019081526020016000206002019060036104d1929190612f0d565b506040518060200160405280600060ff168152506000600b0160006002815260200190815260200160002060030190600161050d929190612db3565b5060056000600b0160006002815260200190815260200160002060040160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060056000600b0160006002815260200190815260200160002060040160046101000a81548163ffffffff021916908360030b63ffffffff1602179055507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6000600b0160006002815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600581526020017f706f7274730000000000000000000000000000000000000000000000000000008152506000600b016000600381526020019081526020016000206000019080519060200190610647929190612bd2565b506040518060600160405280600160ff168152602001600260ff168152602001600360ff168152506000600b01600060038152602001908152602001600020600101906003610697929190612e60565b50604051806060016040528060c860ff16815260200160c860ff16815260200160c860ff168152506000600b016000600381526020019081526020016000206002019060036106e7929190612e60565b506040518060200160405280600260ff168152506000600b01600060038152602001908152602001600020600301906001610723929190612db3565b5060016000600b01600060038152602001908152602001600020600401600c6101000a81548163ffffffff021916908360030b63ffffffff16021790555060026000600b0160006003815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600881526020017f6261727261636b730000000000000000000000000000000000000000000000008152506000600b016000600481526020019081526020016000206000019080519060200190610801929190612bd2565b506040518060600160405280600160ff168152602001600560ff168152602001600860ff168152506000600b01600060048152602001908152602001600020600101906003610851929190612e60565b5060405180606001604052806101f461ffff1681526020016103e861ffff16815260200161019061ffff168152506000600b016000600481526020019081526020016000206002019060036108a7929190612f0d565b506040518060200160405280600160ff168152506000600b016000600481526020019081526020016000206003019060016108e3929190612db3565b5060016000600b0160006004815260200190815260200160002060040160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060026000600b0160006004815260200190815260200160002060040160046101000a81548163ffffffff021916908360030b63ffffffff1602179055507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6000600b0160006004815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600581526020017f6661726d730000000000000000000000000000000000000000000000000000008152506000600b016000600581526020019081526020016000206000019080519060200190610a1d929190612bd2565b506040518060400160405280600160ff168152602001600260ff168152506000600b01600060058152602001908152602001600020600101906002610a63929190612c58565b50604051806040016040528060c860ff16815260200160c860ff168152506000600b01600060058152602001908152602001600020600201906002610aa9929190612c58565b506040518060200160405280600160ff168152506000600b01600060058152602001908152602001600020600301906001610ae5929190612db3565b5060026000600b0160006005815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600781526020017f74656d706c6573000000000000000000000000000000000000000000000000008152506000600b016000600681526020019081526020016000206000019080519060200190610b86929190612bd2565b506040518060a00160405280600a60ff168152602001600c60ff168152602001600d60ff168152602001600e60ff168152602001601060ff168152506000600b01600060068152602001908152602001600020600101906005610bea929190612fbb565b506040518060a0016040528060c860ff168152602001606460ff168152602001606460ff168152602001606460ff168152602001606460ff168152506000600b01600060068152602001908152602001600020600201906005610c4e929190612fbb565b506040518060200160405280600060ff168152506000600b01600060068152602001908152602001600020600301906001610c8a929190612db3565b5060026000600b0160006006815260200190815260200160002060040160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060056000600b0160006006815260200190815260200160002060040160086101000a81548163ffffffff021916908360030b63ffffffff16021790555060016000600b01600060068152602001908152602001600020600401600c6101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600881526020017f73686970796172640000000000000000000000000000000000000000000000008152506000600b016000600781526020019081526020016000206000019080519060200190610da5929190612bd2565b506040518060400160405280600160ff168152602001600260ff168152506000600b01600060078152602001908152602001600020600101906002610deb929190612c58565b5060405180604001604052806107d061ffff1681526020016107d061ffff168152506000600b01600060078152602001908152602001600020600201906002610e35929190612d05565b506040518060200160405280600260ff168152506000600b01600060078152602001908152602001600020600301906001610e71929190612db3565b5060016000600b0160006007815260200190815260200160002060040160046101000a81548163ffffffff021916908360030b63ffffffff1602179055507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6000600b0160006007815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600f81526020017f66697368696e672076696c6c61676500000000000000000000000000000000008152506000600b016000600881526020019081526020016000206000019080519060200190610f6e929190612bd2565b506040518060200160405280600260ff168152506000600b01600060088152602001908152602001600020600101906001610faa929190612db3565b5060405180602001604052806103e861ffff168152506000600b01600060088152602001908152602001600020600201906001610fe8929190613068565b506040518060200160405280600360ff168152506000600b01600060088152602001908152602001600020600301906001611024929190612db3565b5060016000600b01600060088152602001908152602001600020600401600c6101000a81548163ffffffff021916908360030b63ffffffff160217905550565b6064600060080160006001815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506082600060080160006002815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506096600060080160006003815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060aa600060080160006004815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060b4600060080160006005815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506040518060600160405280600260ff168152602001600360ff168152602001600460ff1681525060006009016000600181526020019081526020016000206000019060036111b7929190613116565b506040518060600160405280600360ff168152602001600760ff168152602001600860ff168152506000600901600060028152602001908152602001600020600001906003611207929190613116565b506040518060400160405280600160ff168152602001600260ff16815250600060090160006003815260200190815260200160002060000190600261124d9291906131bd565b506040518060800160405280600f60ff168152602001600160ff168152602001600360ff168152602001600260ff1681525060006009016000600481526020019081526020016000206000019060046112a7929190613264565b506040518060600160405280600260ff168152602001600b60ff168152602001600160ff1681525060006009016000600581526020019081526020016000206000019060036112f7929190613116565b506040518060400160405280600360ff168152602001600260ff16815250600060090160006006815260200190815260200160002060000190600261133d9291906131bd565b506040518060600160405280600260ff168152602001600460ff168152602001600160ff16815250600060090160006007815260200190815260200160002060000190600361138d929190613116565b506040518060600160405280600360ff168152602001600760ff168152602001600160ff1681525060006009016000600881526020019081526020016000206000019060036113dd929190613116565b506040518060800160405280600360ff168152602001600160ff168152602001600b60ff168152602001600f60ff168152506000600901600060098152602001908152602001600020600001906004611437929190613264565b506040518060600160405280600460ff168152602001600260ff168152602001600760ff1681525060006009016000600a8152602001908152602001600020600001906003611487929190613116565b506040518060600160405280600560ff168152602001600160ff168152602001600260ff1681525060006009016000600b81526020019081526020016000206000019060036114d7929190613116565b506040518060800160405280600160ff168152602001600360ff168152602001600660ff168152602001600560ff1681525060006009016000600c8152602001908152602001600020600001906004611531929190613264565b506040518060600160405280601060ff168152602001600160ff168152602001600260ff1681525060006009016000600d8152602001908152602001600020600001906003611581929190613116565b506040518060800160405280600160ff168152602001600260ff168152602001600c60ff168152602001600360ff1681525060006009016000600e81526020019081526020016000206000019060046115db929190613264565b506040518060600160405280600160ff168152602001600260ff168152602001600d60ff1681525060006009016000600f815260200190815260200160002060000190600361162b929190613116565b506040518060800160405280600960ff168152602001600e60ff168152602001600a60ff168152602001601360ff168152506000600901600060108152602001908152602001600020600001906004611685929190613264565b506040518060600160405280600d60ff168152602001600f60ff168152602001601260ff1681525060006009016000601181526020019081526020016000206000019060036116d5929190613116565b506040518060600160405280600160ff168152602001600a60ff168152602001600e60ff168152506000600901600060128152602001908152602001600020600001906003611725929190613116565b506040518060800160405280600960ff168152602001601060ff168152602001600360ff168152602001601160ff16815250600060090160006013815260200190815260200160002060000190600461177f929190613264565b506040518060800160405280601660ff168152602001600160ff168152602001600b60ff168152602001600460ff1681525060006009016000601481526020019081526020016000206000019060046117d9929190613264565b506040518060800160405280601660ff168152602001600660ff168152602001600460ff168152602001601260ff168152506000600901600060158152602001908152602001600020600001906004611833929190613264565b506040518060800160405280601560ff168152602001600e60ff168152602001601060ff168152602001601460ff16815250600060090160006016815260200190815260200160002060000190600461188d929190613264565b506040518060600160405280608c60ff168152602001608260ff168152602001606460ff1681525060006009016000600181526020019081526020016000206001016000600181526020019081526020016000206000019060036118f292919061330b565b50604051806060016040528060a060ff168152602001603c60ff168152602001603260ff16815250600060090160006002815260200190815260200160002060010160006001815260200190815260200160002060000190600361195792919061330b565b50604051806040016040528061013661ffff16815260200161010461ffff1681525060006009016000600381526020019081526020016000206001016000600181526020019081526020016000206000019060026119b692919061335d565b506040518060800160405280600a60ff16815260200160d260ff16815260200160aa60ff16815260200160b460ff168152506000600901600060048152602001908152602001600020600101600060018152602001908152602001600020600001906004611a259291906133b0565b50604051806060016040528061011861ffff168152602001601461ffff16815260200161014a61ffff168152506000600901600060058152602001908152602001600020600101600060018152602001908152602001600020600001906003611a8f929190613402565b5060405180604001604052806101f461ffff16815260200161020861ffff168152506000600901600060068152602001908152602001600020600101600060018152602001908152602001600020600001906002611aee92919061335d565b5060405180606001604052806101f461ffff16815260200161015e61ffff16815260200161025861ffff168152506000600901600060078152602001908152602001600020600101600060018152602001908152602001600020600001906003611b59929190613402565b50604051806060016040528061024e61ffff16815260200160c861ffff1681526020016102da61ffff168152506000600901600060088152602001908152602001600020600101600060018152602001908152602001600020600001906003611bc3929190613402565b5060405180608001604052806101cc61ffff16815260200161023a61ffff168152602001602861ffff168152602001601461ffff168152506000600901600060098152602001908152602001600020600101600060018152602001908152602001600020600001906004611c38929190613455565b5060405180606001604052806102a861ffff1681526020016103c061ffff16815260200161014061ffff1681525060006009016000600a8152602001908152602001600020600101600060018152602001908152602001600020600001906003611ca3929190613402565b50604051806060016040528061047461ffff1681526020016108d461ffff16815260200161074e61ffff1681525060006009016000600b8152602001908152602001600020600101600060018152602001908152602001600020600001906003611d0e929190613402565b50604051806080016040528061080261ffff16815260200161067c61ffff16815260200161033e61ffff16815260200161040661ffff1681525060006009016000600c8152602001908152602001600020600101600060018152602001908152602001600020600001906004611d85929190613455565b506040518060600160405280606e61ffff168152602001610b0e61ffff16815260200161092461ffff1681525060006009016000600d8152602001908152602001600020600101600060018152602001908152602001600020600001906003611def929190613402565b50604051806080016040528061084861ffff1681526020016106d661ffff168152602001608261ffff1681526020016106ae61ffff1681525060006009016000600e8152602001908152602001600020600101600060018152602001908152602001600020600001906004611e65929190613455565b506040518060600160405280610f4661ffff168152602001610ca861ffff16815260200160e661ffff1681525060006009016000600f8152602001908152602001600020600101600060018152602001908152602001600020600001906003611ecf929190613402565b5060405180608001604052806102a861ffff16815260200160b461ffff1681526020016101c261ffff168152602001604661ffff168152506000600901600060108152602001908152602001600020600101600060018152602001908152602001600020600001906004611f44929190613455565b50604051806060016040528061012261ffff16815260200160d261ffff168152602001608261ffff168152506000600901600060118152602001908152602001600020600101600060018152602001908152602001600020600001906003611fad929190613402565b50604051806060016040528061179861ffff16815260200161036661ffff16815260200161016861ffff168152506000600901600060128152602001908152602001600020600101600060018152602001908152602001600020600001906003612018929190613402565b5060405180608001604052806104a661ffff16815260200160dc61ffff16815260200161111c61ffff16815260200160be61ffff16815250600060090160006013815260200190815260200160002060010160006001815260200190815260200160002060000190600461208d929190613455565b506040518060800160405280603261ffff1681526020016123a061ffff1681526020016102a861ffff16815260200161150461ffff168152506000600901600060148152602001908152602001600020600101600060018152602001908152602001600020600001906004612103929190613455565b506040518060800160405280605061ffff16815260200161156861ffff168152602001611f3661ffff16815260200161017261ffff168152506000600901600060158152602001908152602001600020600101600060018152602001908152602001600020600001906004612179929190613455565b50604051806080016040528060c861ffff16815260200161050a61ffff16815260200161037061ffff16815260200161012c61ffff1681525060006009016000601681526020019081526020016000206001016000600181526020019081526020016000206000019060046121ef929190613455565b506000600190505b601681116124b757600080600901600083815260200190815260200160002060010160006001815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561227857602002820191906000526020600020905b815481526020019060010190808311612264575b505050505090506000600290505b600581116124a2576000825167ffffffffffffffff8111156122d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156122ff5781602001602082028036833780820191505090505b50905060005b835181101561244b576000806009016000878152602001908152602001600020600101600060018661233791906135f1565b815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561239257602002820191906000526020600020905b81548152602001906001019080831161237e575b505050505090506064608c8284815181106123d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516123e89190613597565b6123f29190613566565b83838151811061242b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505050808061244390613661565b915050612305565b5080600060090160008681526020019081526020016000206001016000848152602001908152602001600020600001908051906020019061248d9291906134a8565b5050808061249a90613661565b915050612286565b505080806124af90613661565b9150506121f7565b50565b6040518060400160405280600681526020017f4b6e69676874000000000000000000000000000000000000000000000000000081525060006011016000808152602001908152602001600020600001908051906020019061251c929190612bd2565b5062015180600060110160008081526020019081526020016000206001018190555060026000601101600080815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff16021790555060026000601101600080815260200190815260200160002060020160046101000a81548163ffffffff021916908363ffffffff1602179055506201518060006011016000808152602001908152602001600020600101819055506040518060600160405280600260ff168152602001600360ff168152602001600460ff168152506000601101600080815260200190815260200160002060030190600361261f92919061330b565b506040518060600160405280601460ff168152602001601460ff168152602001601460ff168152506000601101600080815260200190815260200160002060040190600361266e92919061330b565b506040518060400160405280600b81526020017f466f6f74736f6c64696572000000000000000000000000000000000000000000815250600060110160006001815260200190815260200160002060000190805190602001906126d2929190612bd2565b50620151806000601101600060018152602001908152602001600020600101819055506001600060110160006001815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506001600060110160006001815260200190815260200160002060020160046101000a81548163ffffffff021916908363ffffffff160217905550620151806000601101600060018152602001908152602001600020600101819055506040518060600160405280600260ff168152602001600360ff168152602001600460ff1681525060006011016000600181526020019081526020016000206003019060036127da92919061330b565b506040518060600160405280601460ff168152602001601460ff168152602001601460ff16815250600060110160006001815260200190815260200160002060040190600361282a92919061330b565b506040518060400160405280600981526020017f54726562756368657400000000000000000000000000000000000000000000008152506000601101600060028152602001908152602001600020600001908051906020019061288e929190612bd2565b50620151806000601101600060028152602001908152602001600020600101819055506001600060110160006002815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506004600060110160006002815260200190815260200160002060020160046101000a81548163ffffffff021916908363ffffffff160217905550620151806000601101600060028152602001908152602001600020600101819055506040518060600160405280600260ff168152602001600360ff168152602001600460ff16815250600060110160006002815260200190815260200160002060030190600361299692919061330b565b506040518060600160405280601460ff168152602001601460ff168152602001601460ff1681525060006011016000600281526020019081526020016000206004019060036129e692919061330b565b506040518060400160405280600881526020017f53636f7270696f6e00000000000000000000000000000000000000000000000081525060006011016000600381526020019081526020016000206000019080519060200190612a4a929190612bd2565b50620151806000601101600060038152602001908152602001600020600101819055506001600060110160006003815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506004600060110160006003815260200190815260200160002060020160046101000a81548163ffffffff021916908363ffffffff160217905550620151806000601101600060038152602001908152602001600020600101819055506040518060600160405280600260ff168152602001600360ff168152602001600460ff168152506000601101600060038152602001908152602001600020600301906003612b5292919061330b565b506040518060600160405280601460ff168152602001601460ff168152602001601460ff168152506000601101600060038152602001908152602001600020600401906003612ba292919061330b565b50565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b828054612bde9061362f565b90600052602060002090601f016020900481019282612c005760008555612c47565b82601f10612c1957805160ff1916838001178555612c47565b82800160010185558215612c47579182015b82811115612c46578251825591602001919060010190612c2b565b5b509050612c5491906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612cf45791602002820160005b83821115612cc257835183826101000a81548163ffffffff021916908360ff1602179055509260200192600401602081600301049283019260010302612c81565b8015612cf25782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612cc2565b505b509050612d0191906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612da25791602002820160005b83821115612d7057835183826101000a81548163ffffffff021916908361ffff1602179055509260200192600401602081600301049283019260010302612d2e565b8015612da05782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612d70565b505b509050612daf91906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612e4f5791602002820160005b83821115612e1d57835183826101000a81548163ffffffff021916908360ff1602179055509260200192600401602081600301049283019260010302612ddc565b8015612e4d5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612e1d565b505b509050612e5c91906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612efc5791602002820160005b83821115612eca57835183826101000a81548163ffffffff021916908360ff1602179055509260200192600401602081600301049283019260010302612e89565b8015612efa5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612eca565b505b509050612f0991906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612faa5791602002820160005b83821115612f7857835183826101000a81548163ffffffff021916908361ffff1602179055509260200192600401602081600301049283019260010302612f36565b8015612fa85782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612f78565b505b509050612fb791906134f5565b5090565b828054828255906000526020600020906007016008900481019282156130575791602002820160005b8382111561302557835183826101000a81548163ffffffff021916908360ff1602179055509260200192600401602081600301049283019260010302612fe4565b80156130555782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613025565b505b50905061306491906134f5565b5090565b828054828255906000526020600020906007016008900481019282156131055791602002820160005b838211156130d357835183826101000a81548163ffffffff021916908361ffff1602179055509260200192600401602081600301049283019260010302613091565b80156131035782816101000a81549063ffffffff02191690556004016020816003010492830192600103026130d3565b505b50905061311291906134f5565b5090565b82805482825590600052602060002090601f016020900481019282156131ac5791602002820160005b8382111561317d57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261313f565b80156131aa5782816101000a81549060ff021916905560010160208160000104928301926001030261317d565b505b5090506131b991906134f5565b5090565b82805482825590600052602060002090601f016020900481019282156132535791602002820160005b8382111561322457835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026131e6565b80156132515782816101000a81549060ff0219169055600101602081600001049283019260010302613224565b505b50905061326091906134f5565b5090565b82805482825590600052602060002090601f016020900481019282156132fa5791602002820160005b838211156132cb57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261328d565b80156132f85782816101000a81549060ff02191690556001016020816000010492830192600103026132cb565b505b50905061330791906134f5565b5090565b82805482825590600052602060002090810192821561334c579160200282015b8281111561334b578251829060ff1690559160200191906001019061332b565b5b50905061335991906134f5565b5090565b82805482825590600052602060002090810192821561339f579160200282015b8281111561339e578251829061ffff1690559160200191906001019061337d565b5b5090506133ac91906134f5565b5090565b8280548282559060005260206000209081019282156133f1579160200282015b828111156133f0578251829060ff169055916020019190600101906133d0565b5b5090506133fe91906134f5565b5090565b828054828255906000526020600020908101928215613444579160200282015b82811115613443578251829061ffff16905591602001919060010190613422565b5b50905061345191906134f5565b5090565b828054828255906000526020600020908101928215613497579160200282015b82811115613496578251829061ffff16905591602001919060010190613475565b5b5090506134a491906134f5565b5090565b8280548282559060005260206000209081019282156134e4579160200282015b828111156134e35782518255916020019190600101906134c8565b5b5090506134f191906134f5565b5090565b5b8082111561350e5760008160009055506001016134f6565b5090565b600061351f602283613555565b915061352a82613737565b604082019050919050565b6000602082019050818103600083015261354e81613512565b9050919050565b600082825260208201905092915050565b600061357182613625565b915061357c83613625565b92508261358c5761358b6136d9565b5b828204905092915050565b60006135a282613625565b91506135ad83613625565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135e6576135e56136aa565b5b828202905092915050565b60006135fc82613625565b915061360783613625565b92508282101561361a576136196136aa565b5b828203905092915050565b6000819050919050565b6000600282049050600182168061364757607f821691505b6020821081141561365b5761365a613708565b5b50919050565b600061366c82613625565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561369f5761369e6136aa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f657200000000000000000000000000000000000000000000000000000000000060208201525056fea264697066735822122074d7037ab9f60e86a661ff79aa164c2f3644f0941752f6bfc78ea2fee15c158964736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f31604c714610030575b600080fd5b61003861003a565b005b61004261005c565b61004a6100f7565b610052611064565b61005a6124ba565b565b610064612ba5565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ec90613535565b60405180910390fd5b565b6040518060400160405280600781526020017f6d61726b657473000000000000000000000000000000000000000000000000008152506000600b0160008081526020019081526020016000206000019080519060200190610159929190612bd2565b506040518060400160405280600160ff168152602001600260ff168152506000600b01600080815260200190815260200160002060010190600261019e929190612c58565b5060405180604001604052806101f461ffff1681526020016101f461ffff168152506000600b0160008081526020019081526020016000206002019060026101e7929190612d05565b506040518060200160405280600160ff168152506000600b016000808152602001908152602001600020600301906001610222929190612db3565b5060026000600b016000808152602001908152602001600020600401600c6101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600981526020017f61717565647563747300000000000000000000000000000000000000000000008152506000600b0160006001815260200190815260200160002060000190805190602001906102c2929190612bd2565b506040518060400160405280600160ff168152602001600260ff168152506000600b01600060018152602001908152602001600020600101906002610308929190612c58565b50604051806040016040528060c860ff16815260200160c860ff168152506000600b0160006001815260200190815260200160002060020190600261034e929190612c58565b506040518060200160405280600360ff168152506000600b0160006001815260200190815260200160002060030190600161038a929190612db3565b5060016000600b0160006001815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600781526020017f636173746c6573000000000000000000000000000000000000000000000000008152506000600b01600060028152602001908152602001600020600001908051906020019061042b929190612bd2565b506040518060600160405280600160ff168152602001600260ff168152602001600760ff168152506000600b0160006002815260200190815260200160002060010190600361047b929190612e60565b506040518060600160405280610bb861ffff16815260200161138861ffff1681526020016101f461ffff168152506000600b016000600281526020019081526020016000206002019060036104d1929190612f0d565b506040518060200160405280600060ff168152506000600b0160006002815260200190815260200160002060030190600161050d929190612db3565b5060056000600b0160006002815260200190815260200160002060040160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060056000600b0160006002815260200190815260200160002060040160046101000a81548163ffffffff021916908360030b63ffffffff1602179055507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6000600b0160006002815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600581526020017f706f7274730000000000000000000000000000000000000000000000000000008152506000600b016000600381526020019081526020016000206000019080519060200190610647929190612bd2565b506040518060600160405280600160ff168152602001600260ff168152602001600360ff168152506000600b01600060038152602001908152602001600020600101906003610697929190612e60565b50604051806060016040528060c860ff16815260200160c860ff16815260200160c860ff168152506000600b016000600381526020019081526020016000206002019060036106e7929190612e60565b506040518060200160405280600260ff168152506000600b01600060038152602001908152602001600020600301906001610723929190612db3565b5060016000600b01600060038152602001908152602001600020600401600c6101000a81548163ffffffff021916908360030b63ffffffff16021790555060026000600b0160006003815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600881526020017f6261727261636b730000000000000000000000000000000000000000000000008152506000600b016000600481526020019081526020016000206000019080519060200190610801929190612bd2565b506040518060600160405280600160ff168152602001600560ff168152602001600860ff168152506000600b01600060048152602001908152602001600020600101906003610851929190612e60565b5060405180606001604052806101f461ffff1681526020016103e861ffff16815260200161019061ffff168152506000600b016000600481526020019081526020016000206002019060036108a7929190612f0d565b506040518060200160405280600160ff168152506000600b016000600481526020019081526020016000206003019060016108e3929190612db3565b5060016000600b0160006004815260200190815260200160002060040160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060026000600b0160006004815260200190815260200160002060040160046101000a81548163ffffffff021916908360030b63ffffffff1602179055507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6000600b0160006004815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600581526020017f6661726d730000000000000000000000000000000000000000000000000000008152506000600b016000600581526020019081526020016000206000019080519060200190610a1d929190612bd2565b506040518060400160405280600160ff168152602001600260ff168152506000600b01600060058152602001908152602001600020600101906002610a63929190612c58565b50604051806040016040528060c860ff16815260200160c860ff168152506000600b01600060058152602001908152602001600020600201906002610aa9929190612c58565b506040518060200160405280600160ff168152506000600b01600060058152602001908152602001600020600301906001610ae5929190612db3565b5060026000600b0160006005815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600781526020017f74656d706c6573000000000000000000000000000000000000000000000000008152506000600b016000600681526020019081526020016000206000019080519060200190610b86929190612bd2565b506040518060a00160405280600a60ff168152602001600c60ff168152602001600d60ff168152602001600e60ff168152602001601060ff168152506000600b01600060068152602001908152602001600020600101906005610bea929190612fbb565b506040518060a0016040528060c860ff168152602001606460ff168152602001606460ff168152602001606460ff168152602001606460ff168152506000600b01600060068152602001908152602001600020600201906005610c4e929190612fbb565b506040518060200160405280600060ff168152506000600b01600060068152602001908152602001600020600301906001610c8a929190612db3565b5060026000600b0160006006815260200190815260200160002060040160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060056000600b0160006006815260200190815260200160002060040160086101000a81548163ffffffff021916908360030b63ffffffff16021790555060016000600b01600060068152602001908152602001600020600401600c6101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600881526020017f73686970796172640000000000000000000000000000000000000000000000008152506000600b016000600781526020019081526020016000206000019080519060200190610da5929190612bd2565b506040518060400160405280600160ff168152602001600260ff168152506000600b01600060078152602001908152602001600020600101906002610deb929190612c58565b5060405180604001604052806107d061ffff1681526020016107d061ffff168152506000600b01600060078152602001908152602001600020600201906002610e35929190612d05565b506040518060200160405280600260ff168152506000600b01600060078152602001908152602001600020600301906001610e71929190612db3565b5060016000600b0160006007815260200190815260200160002060040160046101000a81548163ffffffff021916908360030b63ffffffff1602179055507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6000600b0160006007815260200190815260200160002060040160106101000a81548163ffffffff021916908360030b63ffffffff1602179055506040518060400160405280600f81526020017f66697368696e672076696c6c61676500000000000000000000000000000000008152506000600b016000600881526020019081526020016000206000019080519060200190610f6e929190612bd2565b506040518060200160405280600260ff168152506000600b01600060088152602001908152602001600020600101906001610faa929190612db3565b5060405180602001604052806103e861ffff168152506000600b01600060088152602001908152602001600020600201906001610fe8929190613068565b506040518060200160405280600360ff168152506000600b01600060088152602001908152602001600020600301906001611024929190612db3565b5060016000600b01600060088152602001908152602001600020600401600c6101000a81548163ffffffff021916908360030b63ffffffff160217905550565b6064600060080160006001815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506082600060080160006002815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506096600060080160006003815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060aa600060080160006004815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555060b4600060080160006005815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506040518060600160405280600260ff168152602001600360ff168152602001600460ff1681525060006009016000600181526020019081526020016000206000019060036111b7929190613116565b506040518060600160405280600360ff168152602001600760ff168152602001600860ff168152506000600901600060028152602001908152602001600020600001906003611207929190613116565b506040518060400160405280600160ff168152602001600260ff16815250600060090160006003815260200190815260200160002060000190600261124d9291906131bd565b506040518060800160405280600f60ff168152602001600160ff168152602001600360ff168152602001600260ff1681525060006009016000600481526020019081526020016000206000019060046112a7929190613264565b506040518060600160405280600260ff168152602001600b60ff168152602001600160ff1681525060006009016000600581526020019081526020016000206000019060036112f7929190613116565b506040518060400160405280600360ff168152602001600260ff16815250600060090160006006815260200190815260200160002060000190600261133d9291906131bd565b506040518060600160405280600260ff168152602001600460ff168152602001600160ff16815250600060090160006007815260200190815260200160002060000190600361138d929190613116565b506040518060600160405280600360ff168152602001600760ff168152602001600160ff1681525060006009016000600881526020019081526020016000206000019060036113dd929190613116565b506040518060800160405280600360ff168152602001600160ff168152602001600b60ff168152602001600f60ff168152506000600901600060098152602001908152602001600020600001906004611437929190613264565b506040518060600160405280600460ff168152602001600260ff168152602001600760ff1681525060006009016000600a8152602001908152602001600020600001906003611487929190613116565b506040518060600160405280600560ff168152602001600160ff168152602001600260ff1681525060006009016000600b81526020019081526020016000206000019060036114d7929190613116565b506040518060800160405280600160ff168152602001600360ff168152602001600660ff168152602001600560ff1681525060006009016000600c8152602001908152602001600020600001906004611531929190613264565b506040518060600160405280601060ff168152602001600160ff168152602001600260ff1681525060006009016000600d8152602001908152602001600020600001906003611581929190613116565b506040518060800160405280600160ff168152602001600260ff168152602001600c60ff168152602001600360ff1681525060006009016000600e81526020019081526020016000206000019060046115db929190613264565b506040518060600160405280600160ff168152602001600260ff168152602001600d60ff1681525060006009016000600f815260200190815260200160002060000190600361162b929190613116565b506040518060800160405280600960ff168152602001600e60ff168152602001600a60ff168152602001601360ff168152506000600901600060108152602001908152602001600020600001906004611685929190613264565b506040518060600160405280600d60ff168152602001600f60ff168152602001601260ff1681525060006009016000601181526020019081526020016000206000019060036116d5929190613116565b506040518060600160405280600160ff168152602001600a60ff168152602001600e60ff168152506000600901600060128152602001908152602001600020600001906003611725929190613116565b506040518060800160405280600960ff168152602001601060ff168152602001600360ff168152602001601160ff16815250600060090160006013815260200190815260200160002060000190600461177f929190613264565b506040518060800160405280601660ff168152602001600160ff168152602001600b60ff168152602001600460ff1681525060006009016000601481526020019081526020016000206000019060046117d9929190613264565b506040518060800160405280601660ff168152602001600660ff168152602001600460ff168152602001601260ff168152506000600901600060158152602001908152602001600020600001906004611833929190613264565b506040518060800160405280601560ff168152602001600e60ff168152602001601060ff168152602001601460ff16815250600060090160006016815260200190815260200160002060000190600461188d929190613264565b506040518060600160405280608c60ff168152602001608260ff168152602001606460ff1681525060006009016000600181526020019081526020016000206001016000600181526020019081526020016000206000019060036118f292919061330b565b50604051806060016040528060a060ff168152602001603c60ff168152602001603260ff16815250600060090160006002815260200190815260200160002060010160006001815260200190815260200160002060000190600361195792919061330b565b50604051806040016040528061013661ffff16815260200161010461ffff1681525060006009016000600381526020019081526020016000206001016000600181526020019081526020016000206000019060026119b692919061335d565b506040518060800160405280600a60ff16815260200160d260ff16815260200160aa60ff16815260200160b460ff168152506000600901600060048152602001908152602001600020600101600060018152602001908152602001600020600001906004611a259291906133b0565b50604051806060016040528061011861ffff168152602001601461ffff16815260200161014a61ffff168152506000600901600060058152602001908152602001600020600101600060018152602001908152602001600020600001906003611a8f929190613402565b5060405180604001604052806101f461ffff16815260200161020861ffff168152506000600901600060068152602001908152602001600020600101600060018152602001908152602001600020600001906002611aee92919061335d565b5060405180606001604052806101f461ffff16815260200161015e61ffff16815260200161025861ffff168152506000600901600060078152602001908152602001600020600101600060018152602001908152602001600020600001906003611b59929190613402565b50604051806060016040528061024e61ffff16815260200160c861ffff1681526020016102da61ffff168152506000600901600060088152602001908152602001600020600101600060018152602001908152602001600020600001906003611bc3929190613402565b5060405180608001604052806101cc61ffff16815260200161023a61ffff168152602001602861ffff168152602001601461ffff168152506000600901600060098152602001908152602001600020600101600060018152602001908152602001600020600001906004611c38929190613455565b5060405180606001604052806102a861ffff1681526020016103c061ffff16815260200161014061ffff1681525060006009016000600a8152602001908152602001600020600101600060018152602001908152602001600020600001906003611ca3929190613402565b50604051806060016040528061047461ffff1681526020016108d461ffff16815260200161074e61ffff1681525060006009016000600b8152602001908152602001600020600101600060018152602001908152602001600020600001906003611d0e929190613402565b50604051806080016040528061080261ffff16815260200161067c61ffff16815260200161033e61ffff16815260200161040661ffff1681525060006009016000600c8152602001908152602001600020600101600060018152602001908152602001600020600001906004611d85929190613455565b506040518060600160405280606e61ffff168152602001610b0e61ffff16815260200161092461ffff1681525060006009016000600d8152602001908152602001600020600101600060018152602001908152602001600020600001906003611def929190613402565b50604051806080016040528061084861ffff1681526020016106d661ffff168152602001608261ffff1681526020016106ae61ffff1681525060006009016000600e8152602001908152602001600020600101600060018152602001908152602001600020600001906004611e65929190613455565b506040518060600160405280610f4661ffff168152602001610ca861ffff16815260200160e661ffff1681525060006009016000600f8152602001908152602001600020600101600060018152602001908152602001600020600001906003611ecf929190613402565b5060405180608001604052806102a861ffff16815260200160b461ffff1681526020016101c261ffff168152602001604661ffff168152506000600901600060108152602001908152602001600020600101600060018152602001908152602001600020600001906004611f44929190613455565b50604051806060016040528061012261ffff16815260200160d261ffff168152602001608261ffff168152506000600901600060118152602001908152602001600020600101600060018152602001908152602001600020600001906003611fad929190613402565b50604051806060016040528061179861ffff16815260200161036661ffff16815260200161016861ffff168152506000600901600060128152602001908152602001600020600101600060018152602001908152602001600020600001906003612018929190613402565b5060405180608001604052806104a661ffff16815260200160dc61ffff16815260200161111c61ffff16815260200160be61ffff16815250600060090160006013815260200190815260200160002060010160006001815260200190815260200160002060000190600461208d929190613455565b506040518060800160405280603261ffff1681526020016123a061ffff1681526020016102a861ffff16815260200161150461ffff168152506000600901600060148152602001908152602001600020600101600060018152602001908152602001600020600001906004612103929190613455565b506040518060800160405280605061ffff16815260200161156861ffff168152602001611f3661ffff16815260200161017261ffff168152506000600901600060158152602001908152602001600020600101600060018152602001908152602001600020600001906004612179929190613455565b50604051806080016040528060c861ffff16815260200161050a61ffff16815260200161037061ffff16815260200161012c61ffff1681525060006009016000601681526020019081526020016000206001016000600181526020019081526020016000206000019060046121ef929190613455565b506000600190505b601681116124b757600080600901600083815260200190815260200160002060010160006001815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561227857602002820191906000526020600020905b815481526020019060010190808311612264575b505050505090506000600290505b600581116124a2576000825167ffffffffffffffff8111156122d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156122ff5781602001602082028036833780820191505090505b50905060005b835181101561244b576000806009016000878152602001908152602001600020600101600060018661233791906135f1565b815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561239257602002820191906000526020600020905b81548152602001906001019080831161237e575b505050505090506064608c8284815181106123d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516123e89190613597565b6123f29190613566565b83838151811061242b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505050808061244390613661565b915050612305565b5080600060090160008681526020019081526020016000206001016000848152602001908152602001600020600001908051906020019061248d9291906134a8565b5050808061249a90613661565b915050612286565b505080806124af90613661565b9150506121f7565b50565b6040518060400160405280600681526020017f4b6e69676874000000000000000000000000000000000000000000000000000081525060006011016000808152602001908152602001600020600001908051906020019061251c929190612bd2565b5062015180600060110160008081526020019081526020016000206001018190555060026000601101600080815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff16021790555060026000601101600080815260200190815260200160002060020160046101000a81548163ffffffff021916908363ffffffff1602179055506201518060006011016000808152602001908152602001600020600101819055506040518060600160405280600260ff168152602001600360ff168152602001600460ff168152506000601101600080815260200190815260200160002060030190600361261f92919061330b565b506040518060600160405280601460ff168152602001601460ff168152602001601460ff168152506000601101600080815260200190815260200160002060040190600361266e92919061330b565b506040518060400160405280600b81526020017f466f6f74736f6c64696572000000000000000000000000000000000000000000815250600060110160006001815260200190815260200160002060000190805190602001906126d2929190612bd2565b50620151806000601101600060018152602001908152602001600020600101819055506001600060110160006001815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506001600060110160006001815260200190815260200160002060020160046101000a81548163ffffffff021916908363ffffffff160217905550620151806000601101600060018152602001908152602001600020600101819055506040518060600160405280600260ff168152602001600360ff168152602001600460ff1681525060006011016000600181526020019081526020016000206003019060036127da92919061330b565b506040518060600160405280601460ff168152602001601460ff168152602001601460ff16815250600060110160006001815260200190815260200160002060040190600361282a92919061330b565b506040518060400160405280600981526020017f54726562756368657400000000000000000000000000000000000000000000008152506000601101600060028152602001908152602001600020600001908051906020019061288e929190612bd2565b50620151806000601101600060028152602001908152602001600020600101819055506001600060110160006002815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506004600060110160006002815260200190815260200160002060020160046101000a81548163ffffffff021916908363ffffffff160217905550620151806000601101600060028152602001908152602001600020600101819055506040518060600160405280600260ff168152602001600360ff168152602001600460ff16815250600060110160006002815260200190815260200160002060030190600361299692919061330b565b506040518060600160405280601460ff168152602001601460ff168152602001601460ff1681525060006011016000600281526020019081526020016000206004019060036129e692919061330b565b506040518060400160405280600881526020017f53636f7270696f6e00000000000000000000000000000000000000000000000081525060006011016000600381526020019081526020016000206000019080519060200190612a4a929190612bd2565b50620151806000601101600060038152602001908152602001600020600101819055506001600060110160006003815260200190815260200160002060020160006101000a81548163ffffffff021916908363ffffffff1602179055506004600060110160006003815260200190815260200160002060020160046101000a81548163ffffffff021916908363ffffffff160217905550620151806000601101600060038152602001908152602001600020600101819055506040518060600160405280600260ff168152602001600360ff168152602001600460ff168152506000601101600060038152602001908152602001600020600301906003612b5292919061330b565b506040518060600160405280601460ff168152602001601460ff168152602001601460ff168152506000601101600060038152602001908152602001600020600401906003612ba292919061330b565b50565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b828054612bde9061362f565b90600052602060002090601f016020900481019282612c005760008555612c47565b82601f10612c1957805160ff1916838001178555612c47565b82800160010185558215612c47579182015b82811115612c46578251825591602001919060010190612c2b565b5b509050612c5491906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612cf45791602002820160005b83821115612cc257835183826101000a81548163ffffffff021916908360ff1602179055509260200192600401602081600301049283019260010302612c81565b8015612cf25782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612cc2565b505b509050612d0191906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612da25791602002820160005b83821115612d7057835183826101000a81548163ffffffff021916908361ffff1602179055509260200192600401602081600301049283019260010302612d2e565b8015612da05782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612d70565b505b509050612daf91906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612e4f5791602002820160005b83821115612e1d57835183826101000a81548163ffffffff021916908360ff1602179055509260200192600401602081600301049283019260010302612ddc565b8015612e4d5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612e1d565b505b509050612e5c91906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612efc5791602002820160005b83821115612eca57835183826101000a81548163ffffffff021916908360ff1602179055509260200192600401602081600301049283019260010302612e89565b8015612efa5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612eca565b505b509050612f0991906134f5565b5090565b82805482825590600052602060002090600701600890048101928215612faa5791602002820160005b83821115612f7857835183826101000a81548163ffffffff021916908361ffff1602179055509260200192600401602081600301049283019260010302612f36565b8015612fa85782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612f78565b505b509050612fb791906134f5565b5090565b828054828255906000526020600020906007016008900481019282156130575791602002820160005b8382111561302557835183826101000a81548163ffffffff021916908360ff1602179055509260200192600401602081600301049283019260010302612fe4565b80156130555782816101000a81549063ffffffff0219169055600401602081600301049283019260010302613025565b505b50905061306491906134f5565b5090565b828054828255906000526020600020906007016008900481019282156131055791602002820160005b838211156130d357835183826101000a81548163ffffffff021916908361ffff1602179055509260200192600401602081600301049283019260010302613091565b80156131035782816101000a81549063ffffffff02191690556004016020816003010492830192600103026130d3565b505b50905061311291906134f5565b5090565b82805482825590600052602060002090601f016020900481019282156131ac5791602002820160005b8382111561317d57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261313f565b80156131aa5782816101000a81549060ff021916905560010160208160000104928301926001030261317d565b505b5090506131b991906134f5565b5090565b82805482825590600052602060002090601f016020900481019282156132535791602002820160005b8382111561322457835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026131e6565b80156132515782816101000a81549060ff0219169055600101602081600001049283019260010302613224565b505b50905061326091906134f5565b5090565b82805482825590600052602060002090601f016020900481019282156132fa5791602002820160005b838211156132cb57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261328d565b80156132f85782816101000a81549060ff02191690556001016020816000010492830192600103026132cb565b505b50905061330791906134f5565b5090565b82805482825590600052602060002090810192821561334c579160200282015b8281111561334b578251829060ff1690559160200191906001019061332b565b5b50905061335991906134f5565b5090565b82805482825590600052602060002090810192821561339f579160200282015b8281111561339e578251829061ffff1690559160200191906001019061337d565b5b5090506133ac91906134f5565b5090565b8280548282559060005260206000209081019282156133f1579160200282015b828111156133f0578251829060ff169055916020019190600101906133d0565b5b5090506133fe91906134f5565b5090565b828054828255906000526020600020908101928215613444579160200282015b82811115613443578251829061ffff16905591602001919060010190613422565b5b50905061345191906134f5565b5090565b828054828255906000526020600020908101928215613497579160200282015b82811115613496578251829061ffff16905591602001919060010190613475565b5b5090506134a491906134f5565b5090565b8280548282559060005260206000209081019282156134e4579160200282015b828111156134e35782518255916020019190600101906134c8565b5b5090506134f191906134f5565b5090565b5b8082111561350e5760008160009055506001016134f6565b5090565b600061351f602283613555565b915061352a82613737565b604082019050919050565b6000602082019050818103600083015261354e81613512565b9050919050565b600082825260208201905092915050565b600061357182613625565b915061357c83613625565b92508261358c5761358b6136d9565b5b828204905092915050565b60006135a282613625565b91506135ad83613625565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135e6576135e56136aa565b5b828202905092915050565b60006135fc82613625565b915061360783613625565b92508282101561361a576136196136aa565b5b828203905092915050565b6000819050919050565b6000600282049050600182168061364757607f821691505b6020821081141561365b5761365a613708565b5b50919050565b600061366c82613625565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561369f5761369e6136aa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f657200000000000000000000000000000000000000000000000000000000000060208201525056fea264697066735822122074d7037ab9f60e86a661ff79aa164c2f3644f0941752f6bfc78ea2fee15c158964736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 573,
        "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)5246_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(ArmyUnit)5431_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ArmyUnit)5431_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)5341_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)5350_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)5350_storage"
      },
      "t_mapping(t_uint256,t_struct(DefendingArmy)5411_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefendingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(DefendingArmy)5411_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)5353_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)5353_storage"
      },
      "t_mapping(t_uint256,t_struct(Raiding)5373_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raiding)",
        "numberOfBytes": "32",
        "value": "t_struct(Raiding)5373_storage"
      },
      "t_mapping(t_uint256,t_struct(RaidingArmy)5392_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RaidingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(RaidingArmy)5392_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)5312_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)5312_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)5319_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)5319_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)5253_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)5253_storage"
      },
      "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainedArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(TrainedArmyUnit)5416_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)5366_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)5366_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)5362_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)5362_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)5246_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 5184,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)5312_storage)"
          },
          {
            "astId": 5186,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "sRealms",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5188,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "realms",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5190,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "realmsStorage",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5192,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5194,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "resources",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5196,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5198,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "lords",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 5203,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)5353_storage)"
          },
          {
            "astId": 5208,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)5362_storage)"
          },
          {
            "astId": 5213,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)5350_storage)"
          },
          {
            "astId": 5218,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)"
          },
          {
            "astId": 5223,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(TheAges)5253_storage)"
          },
          {
            "astId": 5225,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 5230,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "raiding",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(Raiding)5373_storage)"
          },
          {
            "astId": 5235,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "raidingArmy",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(RaidingArmy)5392_storage)"
          },
          {
            "astId": 5240,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "defendingArmy",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(DefendingArmy)5411_storage)"
          },
          {
            "astId": 5245,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "armyUnit",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(ArmyUnit)5431_storage)"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(ArmyUnit)5431_storage": {
        "encoding": "inplace",
        "label": "struct ArmyUnit",
        "members": [
          {
            "astId": 5418,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5420,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "timeToTrain",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5422,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "offence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5424,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "defence",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5427,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5430,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingCosts)5341_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 5321,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5324,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5327,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5330,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5332,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5334,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5336,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5338,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5340,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)5350_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 5344,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5349,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefendingArmy)5411_storage": {
        "encoding": "inplace",
        "label": "struct DefendingArmy",
        "members": [
          {
            "astId": 5394,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "trebuchetsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5396,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "trebuchetsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5398,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "scorpionsTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5400,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "scorpionsSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5405,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "trebuchets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          },
          {
            "astId": 5410,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "scorpions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LevelProduction)5353_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 5352,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Raiding)5373_storage": {
        "encoding": "inplace",
        "label": "struct Raiding",
        "members": [
          {
            "astId": 5368,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "coolDownTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5370,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "totalRaids",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5372,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "successfulRaids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RaidingArmy)5392_storage": {
        "encoding": "inplace",
        "label": "struct RaidingArmy",
        "members": [
          {
            "astId": 5375,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "knightsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5377,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "knightsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5379,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "footSoldiersTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5381,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "footSoldiersSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5386,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "knights",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          },
          {
            "astId": 5391,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "footSoldiers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RealmInfo)5312_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 5255,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5257,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5259,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5261,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5263,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5266,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5268,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5270,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5272,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5274,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5276,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5278,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5280,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "aquaducts",
            "offset": 6,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5282,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "temples",
            "offset": 7,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5284,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "castles",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5286,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "markets",
            "offset": 9,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5288,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "ports",
            "offset": 10,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5290,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "barracks",
            "offset": 11,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5292,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "farms",
            "offset": 12,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5294,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "shipyard",
            "offset": 13,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5296,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "fishingVillage",
            "offset": 14,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5298,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "realmDefence",
            "offset": 15,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5300,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "realmOffence",
            "offset": 19,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5302,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "realmMagic",
            "offset": 23,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5304,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "foodSupply",
            "offset": 27,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5306,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "population",
            "offset": 0,
            "slot": "7",
            "type": "t_int32"
          },
          {
            "astId": 5311,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)5319_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ResourceInfo)5319_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 5314,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5316,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5318,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)5253_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 5248,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5250,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5252,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TrainedArmyUnit)5416_storage": {
        "encoding": "inplace",
        "label": "struct TrainedArmyUnit",
        "members": [
          {
            "astId": 5413,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "destroyed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5415,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "unitFinished",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UpgradeCostLevels)5366_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 5365,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)5362_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 5356,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5361,
            "contract": "contracts/settling/facets/DataSetterFacet.sol:DataSetterFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)5366_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}