{
  "address": "0x0D9FA77DeAB0Cce9E49aa552b8c15E70fFf473b3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buildingID",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "resources",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "resourceValues",
          "type": "uint256[]"
        }
      ],
      "name": "createBuilding",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAquaducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBuildingCosts",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initBuilding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7590d30454c53a8d48293bd934807da08c9baa0f02ba5d07e8b5d19e2699ed5b",
  "receipt": {
    "to": null,
    "from": "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
    "contractAddress": "0x0D9FA77DeAB0Cce9E49aa552b8c15E70fFf473b3",
    "transactionIndex": 0,
    "gasUsed": "51594248",
    "logsBloom": "0x
    "blockHash": "0x131bb4e92a3b774d36a5af16ea8d714bb7965c9a995ed446ed1e72cb0dfb1b4a",
    "transactionHash": "0x7590d30454c53a8d48293bd934807da08c9baa0f02ba5d07e8b5d19e2699ed5b",
    "logs": [],
    "blockNumber": 5315235,
    "cumulativeGasUsed": "40266748",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "babff744e45a3aac439ec42bbc858aa6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buildingID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resources\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceValues\",\"type\":\"uint256[]\"}],\"name\":\"createBuilding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAquaducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBuildingCosts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initBuilding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/TraitConstructionFacet.sol\":\"TraitConstructionFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"contracts/facets/TraitConstructionFacet.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/ResourcesIERC1155MintBurn.sol\\\";\\n\\ncontract TraitConstructionFacet {\\n    AppStorage internal s;\\n\\n    // TODO: add security to this\\n    function initBuilding() public {\\n        // output levels\\n        s.buildingCosts[0].name = \\\"markets\\\";\\n        s.buildingCosts[0].resourceIds = [1, 2, 3];\\n        s.buildingCosts[0].resourceValues = [2, 2, 2];\\n        s.buildingCosts[0].requirements = [1];\\n\\n        s.buildingCosts[1].name = \\\"acquaducts\\\";\\n        s.buildingCosts[1].resourceIds = [1, 2, 3];\\n        s.buildingCosts[1].resourceValues = [2, 2, 2];\\n        s.buildingCosts[1].requirements = [3];\\n\\n        s.buildingCosts[2].name = \\\"castles\\\";\\n        s.buildingCosts[2].resourceIds = [1, 2, 3];\\n        s.buildingCosts[2].resourceValues = [2, 2, 2];\\n        s.buildingCosts[2].requirements = [0];\\n\\n        s.buildingCosts[3].name = \\\"ports\\\";\\n        s.buildingCosts[3].resourceIds = [1, 2, 3];\\n        s.buildingCosts[3].resourceValues = [2, 2, 2];\\n        s.buildingCosts[3].requirements = [2];\\n    }\\n\\n    function createBuilding(\\n        uint256 _realmTokenId,\\n        uint256 _buildingID,\\n        uint256[] memory resources,\\n        uint256[] memory resourceValues\\n    ) external payable {\\n        uint8 foodImpact = 2;\\n\\n        RealmInfo storage realmInfo = s.realmInfo[_realmTokenId];\\n        RealmBuildings storage realmBuildings = s.realmBuildings[_realmTokenId];\\n        BuildingCosts storage buildingCosts = s.buildingCosts[_buildingID];\\n\\n        RealmStatistics storage realmStatistics = s.realmStatistics[\\n            _realmTokenId\\n        ];\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n\\n        //Should the this dynamic\\n        if (_buildingID == 0) {\\n            require(\\n                realmBuildings.markets <= realmInfo.cities,\\n                \\\"No cities left to build on\\\"\\n            );\\n        }\\n        if (_buildingID == 1) {\\n            require(\\n                realmBuildings.aquaducts <= realmInfo.rivers,\\n                \\\"No rivers left to build on\\\"\\n            );\\n        }\\n        if (_buildingID == 2) {\\n            require(\\n                realmBuildings.castles <= realmInfo.regions,\\n                \\\"No regions left to build on\\\"\\n            );\\n        }\\n        if (_buildingID == 3) {\\n            require(\\n                realmBuildings.ports <= realmInfo.harbours,\\n                \\\"No harbours left to build on\\\"\\n            );\\n        }\\n        // require(\\n        //     resources[0] == 1 || resources[1] == 2 || resources[2] == 3,\\n        //     \\\"Incorrect resource\\\"\\n        // );\\n        // require(\\n        //     resourceValues[0] == woodRequired ||\\n        //         resourceValues[1] == stoneRequired ||\\n        //         resourceValues[2] == obsidianRequired,\\n        //     \\\"Not enough wood\\\"\\n        // );\\n        for (uint256 i = 0; i < buildingCosts.resourceIds.length; i++) {\\n            require(\\n                resources[i] == buildingCosts.resourceIds[i],\\n                \\\"Incorrect resource\\\"\\n            );\\n            require(\\n                resourceValues[i] == buildingCosts.resourceValues[i],\\n                \\\"Incorrect resources values\\\"\\n            );\\n        }\\n        resourceTokens.productionBuildingsBurn(\\n            msg.sender,\\n            resources,\\n            resourceValues\\n        );\\n\\n        realmBuildings.aquaducts++;\\n        realmStatistics.foodSupply += foodImpact;\\n    }\\n\\n    // event CityBuilt(address owner, uint256 realm_id);\\n    function getAquaducts(uint256 _tokenId) public view returns (uint256) {\\n        RealmBuildings storage realmBuildings = s.realmBuildings[_tokenId];\\n\\n        return realmBuildings.aquaducts;\\n    }\\n\\n    function getBuildingCosts(uint256 _index)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            uint8[] memory,\\n            uint8[] memory,\\n            uint8[] memory\\n        )\\n    {\\n        BuildingCosts storage buildingCosts = s.buildingCosts[_index];\\n\\n        return (\\n            buildingCosts.name,\\n            buildingCosts.resourceIds,\\n            buildingCosts.resourceValues,\\n            buildingCosts.requirements\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0054b593de872e79908618c2636e7bb3e7c228063475c5e99bdaf42069d2d338\"},\"contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        uint256[] memory _tresuryAmounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function productionBuildingsBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb4589dc57eb5a51a1310bafc3fe0f9c0eaf696c7116fc65ff67a69d575532430\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    mapping(uint256 => RealmStatistics) realmStatistics;\\n    mapping(uint256 => RealmBuildings) realmBuildings;\\n    uint8 baseProductionRate;\\n    uint8 maxProductionRate;\\n    address sRealms;\\n    address realms;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct RealmStatistics {\\n    uint8 realmDefence;\\n    uint8 realmOffence;\\n    uint8 realmMagic;\\n    uint8 foodSupply;\\n}\\n\\nstruct RealmInfo {\\n    uint256 tokenId;\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint256[] resourceIds;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\nstruct StatsInfo {\\n    uint8 id;\\n    uint8 value; // level of statistic\\n}\\n\\nstruct RealmBuildings {\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n}\\nstruct BuildingCosts {\\n    string name;\\n    uint8[] resourceIds;\\n    uint8[] resourceValues;\\n    uint8[] requirements;\\n}\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\nlibrary UintKey {\\n    // Resources and wonders\\n    uint256 public constant WOOD = 1;\\n    uint256 public constant STONE = 2;\\n    uint256 public constant COAL = 3;\\n    uint256 public constant COPPER = 4;\\n    uint256 public constant OBSIDIAN = 5;\\n    uint256 public constant SILVER = 6;\\n    uint256 public constant IRONWOOD = 7;\\n    uint256 public constant COLD_IRON = 8;\\n    uint256 public constant GOLD = 9;\\n    uint256 public constant HARTWOOD = 10;\\n    uint256 public constant DIAMONDS = 11;\\n    uint256 public constant SAPPHIRE = 12;\\n    uint256 public constant DEEP_CRYSTAL = 13;\\n    uint256 public constant RUBY = 14;\\n    uint256 public constant IGNIUM = 15;\\n    uint256 public constant ETHEREAL_SILICA = 16;\\n    uint256 public constant TRUE_ICE = 17;\\n    uint256 public constant TWILIGHT_QUARTZ = 18;\\n    uint256 public constant ALCHEMICAL_SILVER = 19;\\n    uint256 public constant ADAMANTINE = 20;\\n    uint256 public constant MITHRAL = 21;\\n    uint256 public constant DRAGONHIDE = 22;\\n    //will add the rest of the wonders if library works as expected on test\\n    uint256 public constant CATHEDRAL_OF_AGONY = 23;\\n}\\n\",\"keccak256\":\"0xb30deaff61ab7453969f0a86b150b3d31a9241fd16f55ef3fa00e6498e90897f\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7437,
        "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)10585_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)10656_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)10656_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)10665_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)10665_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)10668_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)10668_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmBuildings)10644_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmBuildings)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmBuildings)10644_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)10621_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)10621_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmStatistics)10594_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmStatistics)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmStatistics)10594_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)10628_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)10628_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)10681_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)10681_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)10677_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)10677_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)10585_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 10540,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)10621_storage)"
          },
          {
            "astId": 10545,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmStatistics",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(RealmStatistics)10594_storage)"
          },
          {
            "astId": 10550,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(RealmBuildings)10644_storage)"
          },
          {
            "astId": 10552,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "baseProductionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 10554,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "maxProductionRate",
            "offset": 1,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 10556,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "sRealms",
            "offset": 2,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 10558,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realms",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 10560,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 10562,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resources",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 10564,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 10569,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)10668_storage)"
          },
          {
            "astId": 10574,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)10677_storage)"
          },
          {
            "astId": 10579,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)10665_storage)"
          },
          {
            "astId": 10584,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)10656_storage)"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(BuildingCosts)10656_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 10646,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10649,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 10652,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 10655,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint8)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BuildingUpgradeCosts)10665_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 10659,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 10664,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)10656_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LevelProduction)10668_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 10667,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmBuildings)10644_storage": {
        "encoding": "inplace",
        "label": "struct RealmBuildings",
        "members": [
          {
            "astId": 10635,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "aquaducts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10637,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "temples",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10639,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "castles",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10641,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "markets",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10643,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ports",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmInfo)10621_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 10596,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10598,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10600,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10602,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10604,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "cities",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 10606,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 10608,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 10610,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "regions",
            "offset": 3,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 10612,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 10615,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10620,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)10628_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RealmStatistics)10594_storage": {
        "encoding": "inplace",
        "label": "struct RealmStatistics",
        "members": [
          {
            "astId": 10587,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmDefence",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10589,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmOffence",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10591,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmMagic",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10593,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "foodSupply",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ResourceInfo)10628_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 10623,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10625,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10627,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCostLevels)10681_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 10680,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)10677_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 10671,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 10676,
            "contract": "contracts/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)10681_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}