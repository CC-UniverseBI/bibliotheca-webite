{
  "address": "0xF0fb6E4FcCF673AdCf33dC183Bd9b3e2053ca229",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "realmTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buildingId",
          "type": "uint256"
        }
      ],
      "name": "ConstructionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buildingID",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "resources",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "resourceValues",
          "type": "uint256[]"
        }
      ],
      "name": "createBuilding",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getAllBuildingStats",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBuildingCosts",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmTokenId",
          "type": "uint256"
        }
      ],
      "name": "getBuildings",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c4b56e2d30bb6d972611e67b71cd5b5255c664d7700fa8963187235513a7a65",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0xF0fb6E4FcCF673AdCf33dC183Bd9b3e2053ca229",
    "transactionIndex": 0,
    "gasUsed": "72379665",
    "logsBloom": "0x
    "blockHash": "0x9535fafbe3309aa3369b0acda1c7803d2ab146eeba7959d0346aac2c7d2c4479",
    "transactionHash": "0x0c4b56e2d30bb6d972611e67b71cd5b5255c664d7700fa8963187235513a7a65",
    "logs": [],
    "blockNumber": 5982972,
    "cumulativeGasUsed": "56550145",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d8b2bb63233aed491a06ed5388fa0df5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buildingId\",\"type\":\"uint256\"}],\"name\":\"ConstructionEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buildingID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resources\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceValues\",\"type\":\"uint256[]\"}],\"name\":\"createBuilding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAllBuildingStats\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBuildingCosts\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmTokenId\",\"type\":\"uint256\"}],\"name\":\"getBuildings\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/TraitConstructionFacet.sol\":\"TraitConstructionFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/TraitConstructionFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../libraries/ResourceUtils.sol\\\";\\n\\ncontract TraitConstructionFacet is ResourceUtils {\\n    function createBuilding(\\n        uint256 _realmTokenId,\\n        uint256 _buildingID,\\n        uint256[] memory resources,\\n        uint256[] memory resourceValues\\n    ) external payable checkSRealmOwner(_realmTokenId) {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmTokenId];\\n\\n        BuildingCosts memory buildingCosts = s.buildingCosts[_buildingID];\\n\\n        //TODO: Check if user has the balance of resources available\\n        // Markets\\n        if (_buildingID == 0) {\\n            require(realmInfo.markets <= realmInfo.cities, \\\"NO_CITIES\\\");\\n            realmInfo.markets++;\\n        }\\n        if (_buildingID == 1) {\\n            require(realmInfo.aquaducts <= realmInfo.rivers, \\\"NO_RIVERS\\\");\\n            realmInfo.aquaducts++;\\n        }\\n        if (_buildingID == 2) {\\n            require(realmInfo.castles <= realmInfo.regions, \\\"NO_REGIONS\\\");\\n            realmInfo.castles++;\\n        }\\n        if (_buildingID == 3) {\\n            require(realmInfo.ports <= realmInfo.harbours, \\\"NO_HARBOURS\\\");\\n            realmInfo.ports++;\\n        }\\n        if (_buildingID == 4) {\\n            require(realmInfo.barracks <= realmInfo.cities, \\\"NO_CITIES\\\");\\n            realmInfo.barracks++;\\n        }\\n        if (_buildingID == 5) {\\n            require(realmInfo.farms <= realmInfo.cities, \\\"NO_CITIES\\\");\\n            realmInfo.farms++;\\n        }\\n        if (_buildingID == 6) {\\n            require(realmInfo.temples <= realmInfo.regions, \\\"NO_REGIONS\\\");\\n            realmInfo.temples++;\\n        }\\n        if (_buildingID == 7) {\\n            require(realmInfo.shipyard <= realmInfo.harbours, \\\"NO_HARBOURS\\\");\\n            realmInfo.shipyard++;\\n        }\\n        if (_buildingID == 8) {\\n            require(realmInfo.fishingVillage <= realmInfo.rivers, \\\"NO_RIVERS\\\");\\n            realmInfo.fishingVillage++;\\n        }\\n\\n        for (uint256 i = 0; i < buildingCosts.resourceIds.length; i++) {\\n            require(\\n                resources[i] == buildingCosts.resourceIds[i],\\n                \\\"Incorrect resource\\\"\\n            );\\n            require(\\n                resourceValues[i] == buildingCosts.resourceValues[i],\\n                \\\"Incorrect resources values\\\"\\n            );\\n        }\\n\\n        realmInfo.population += s.buildingCosts[_buildingID].population;\\n        realmInfo.foodSupply += s.buildingCosts[_buildingID].food;\\n        realmInfo.realmOffence += s.buildingCosts[_buildingID].offence;\\n        realmInfo.realmDefence += s.buildingCosts[_buildingID].defence;\\n        realmInfo.realmMagic += s.buildingCosts[_buildingID].magic;\\n\\n        _batchBurnResources(msg.sender, resources, resourceValues);\\n\\n        emit ConstructionEvent(msg.sender, _realmTokenId, _buildingID);\\n    }\\n\\n    event ConstructionEvent(\\n        address owner,\\n        uint256 realmTokenId,\\n        uint256 buildingId\\n    );\\n\\n    function getBuildings(uint256 _realmTokenId)\\n        public\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8\\n        )\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmTokenId];\\n\\n        return (\\n            realmInfo.markets,\\n            realmInfo.aquaducts,\\n            realmInfo.castles,\\n            realmInfo.ports,\\n            realmInfo.barracks,\\n            realmInfo.farms,\\n            realmInfo.temples,\\n            realmInfo.shipyard,\\n            realmInfo.fishingVillage\\n        );\\n    }\\n\\n    function getAllBuildingStats(uint256 _index)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            uint32[] memory,\\n            uint32[] memory,\\n            uint32[] memory,\\n            int32,\\n            int32,\\n            int32,\\n            int32,\\n            int32\\n        )\\n    {\\n        BuildingCosts memory buildingCosts = s.buildingCosts[_index];\\n\\n        return (\\n            buildingCosts.name,\\n            buildingCosts.resourceIds,\\n            buildingCosts.resourceValues,\\n            buildingCosts.requirements,\\n            buildingCosts.defence,\\n            buildingCosts.offence,\\n            buildingCosts.magic,\\n            buildingCosts.population,\\n            buildingCosts.food\\n        );\\n    }\\n\\n    function getBuildingCosts(uint256 _index)\\n        public\\n        view\\n        returns (\\n            uint32[] memory,\\n            uint32[] memory,\\n            uint32[] memory\\n        )\\n    {\\n        BuildingCosts memory buildingCosts = s.buildingCosts[_index];\\n\\n        return (\\n            buildingCosts.resourceIds,\\n            buildingCosts.resourceValues,\\n            buildingCosts.requirements\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xab130b7758914c5e7e79451e6903003aa869d20451825b166fd7138acdfd8ded\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    address sRealms;\\n    address realms;\\n    address realmsStorage;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n    mapping(uint256 => Raiding) raiding;\\n    mapping(uint256 => RaidingArmy) raidingArmy;\\n    mapping(uint256 => DefendingArmy) defendingArmy;\\n    mapping(uint256 => ArmyUnit) armyUnit;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\nstruct Raiding {\\n    uint256 coolDownTime;\\n    uint256 totalRaids;\\n    uint256 successfulRaids;\\n}\\n\\nstruct RaidingArmy {\\n    uint32 knightsTrained;\\n    uint32 knightsSlayed;\\n    uint32 footSoldiersTrained;\\n    uint32 footSoldiersSlayed;\\n    mapping(uint256 => TrainedArmyUnit) knights;\\n    mapping(uint256 => TrainedArmyUnit) footSoldiers;\\n}\\n\\nstruct DefendingArmy {\\n    uint32 trebuchetsTrained;\\n    uint32 trebuchetsSlayed;\\n    uint32 scorpionsTrained;\\n    uint32 scorpionsSlayed;\\n    mapping(uint256 => TrainedArmyUnit) trebuchets;\\n    mapping(uint256 => TrainedArmyUnit) scorpions;\\n}\\n\\nstruct TrainedArmyUnit {\\n    bool destroyed;\\n    uint256 unitFinished;\\n}\\n\\nstruct ArmyUnit {\\n    string name;\\n    uint256 timeToTrain;\\n    uint32 offence;\\n    uint32 defence;\\n    uint256[] resourceIds;\\n    uint256[] resourceValues;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xdf4eaff003a64be8c2fe375e99c6b5464c22c235404aaa429c2917a21babbac4\"},\"contracts/settling/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport {IDiamondCut} from \\\"../../shared/interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress)\\n        internal\\n    {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\n            .facetAddresses\\n            .length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x381be6bf44ad825d476842de372d56bc20f4c6b6c2c9a7b176b2a204020e7f39\",\"license\":\"MIT\"},\"contracts/settling/libraries/Modifiers.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6a04f22a363dcf5c72fd36e2eb64c03f7bbed1d0d098311e2727c992890b4718\"},\"contracts/settling/libraries/ResourceUtils.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/Modifiers.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract ResourceUtils is Modifiers {\\n    function _mintResources(\\n        address _minter,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.resourceMinting(\\n            _minter,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchTransferResources(\\n        address _from,\\n        address _to,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.safeBatchTransferFrom(\\n            _from,\\n            _to,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchBurnResources(\\n        address _from,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.batchBurnResources(_from, _resourceIds, _resourceValues);\\n    }\\n\\n    function _getHappiness(uint256 _realmId) internal view returns (uint32) {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmId];\\n        int32 food;\\n\\n        if (realmInfo.foodSupply < 0) {\\n            food = ((100 * realmInfo.foodSupply) * 20) / 1000;\\n        } else {\\n            food = 0;\\n        }\\n        int32 happiness = 100 +\\n            ((100 * (realmInfo.population * 4)) / 1000) +\\n            food;\\n\\n        return uint32(happiness);\\n    }\\n\\n    function _returnTime(uint256 _lastUpdate, uint256 _resourcesAvailable)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _lastUpdate + _resourcesAvailable * 1 hours;\\n    }\\n\\n    function _getAvailableResources(uint256 _lastUpdate)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - _lastUpdate) / 1 hours;\\n    }\\n\\n    function _getAvailableVestedResources(uint256 _vestedTimeUpdatedAt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 vested;\\n        vested = (block.timestamp - _vestedTimeUpdatedAt) / (1 hours);\\n        if (vested > 14) {\\n            return vested;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194b53dbb1e3ab2086de4432fef34c728b0f47d3c66d275594da87a74a2d147c\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xbf17f994eca1e6da64c2cec17318b5701ce0a424fb77db7a64a08c17a547b091\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchBurnResources(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x827b22a96beba7f58adf4ea7cdbc774d885adb2cd76831688b78884778f39dc0\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612311806100206000396000f3fe60806040526004361061003f5760003560e01c806359389ead146100445780638c42f69014610089578063be00feed146100a5578063ca8c3462146100e4575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190611801565b610129565b60405161008099989796959493929190611bf9565b60405180910390f35b6100a3600480360381019061009e919061182a565b610459565b005b3480156100b157600080fd5b506100cc60048036038101906100c79190611801565b61129c565b6040516100db93929190611bad565b60405180910390f35b3480156100f057600080fd5b5061010b60048036038101906101069190611801565b611592565b60405161012099989796959493929190611d9d565b60405180910390f35b6060806060806000806000806000806000600b0160008c81526020019081526020016000206040518061012001604052908160008201805461016a9061201a565b80601f01602080910402602001604051908101604052809291908181526020018280546101969061201a565b80156101e35780601f106101b8576101008083540402835291602001916101e3565b820191906000526020600020905b8154815290600101906020018083116101c657829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561026757602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161022a5790505b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156102eb57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116102ae5790505b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561036f57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116103325790505b505050505081526020016004820160009054906101000a900460030b60030b60030b81526020016004820160049054906101000a900460030b60030b60030b81526020016004820160089054906101000a900460030b60030b60030b815260200160048201600c9054906101000a900460030b60030b60030b81526020016004820160109054906101000a900460030b60030b60030b815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e00151886101000151995099509950995099509950995099509950509193959799909294969850565b8360008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016104bc9190611d82565b60206040518083038186803b1580156104d457600080fd5b505afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c91906117d8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090611cc2565b60405180910390fd5b60008060000160008881526020019081526020016000209050600080600b016000888152602001908152602001600020604051806101200160405290816000820180546105c59061201a565b80601f01602080910402602001604051908101604052809291908181526020018280546105f19061201a565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106c257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116106855790505b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561074657602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116107095790505b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161078d5790505b505050505081526020016004820160009054906101000a900460030b60030b60030b81526020016004820160049054906101000a900460030b60030b60030b81526020016004820160089054906101000a900460030b60030b60030b815260200160048201600c9054906101000a900460030b60030b60030b81526020016004820160109054906101000a900460030b60030b60030b8152505090506000871415610915578160060160009054906101000a900460ff1660ff168260060160099054906101000a900460ff1660ff1611156108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611ca2565b60405180910390fd5b81600601600981819054906101000a900460ff16809291906108fb906120c6565b91906101000a81548160ff021916908360ff160217905550505b60018714156109c4578160060160029054906101000a900460ff1660ff168260060160069054906101000a900460ff1660ff161115610989576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098090611d22565b60405180910390fd5b81600601600681819054906101000a900460ff16809291906109aa906120c6565b91906101000a81548160ff021916908360ff160217905550505b6002871415610a73578160060160039054906101000a900460ff1660ff168260060160089054906101000a900460ff1660ff161115610a38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2f90611ce2565b60405180910390fd5b81600601600881819054906101000a900460ff1680929190610a59906120c6565b91906101000a81548160ff021916908360ff160217905550505b6003871415610b22578160060160019054906101000a900460ff1660ff1682600601600a9054906101000a900460ff1660ff161115610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90611d62565b60405180910390fd5b81600601600a81819054906101000a900460ff1680929190610b08906120c6565b91906101000a81548160ff021916908360ff160217905550505b6004871415610bd1578160060160009054906101000a900460ff1660ff1682600601600b9054906101000a900460ff1660ff161115610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d90611ca2565b60405180910390fd5b81600601600b81819054906101000a900460ff1680929190610bb7906120c6565b91906101000a81548160ff021916908360ff160217905550505b6005871415610c80578160060160009054906101000a900460ff1660ff1682600601600c9054906101000a900460ff1660ff161115610c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3c90611ca2565b60405180910390fd5b81600601600c81819054906101000a900460ff1680929190610c66906120c6565b91906101000a81548160ff021916908360ff160217905550505b6006871415610d2f578160060160039054906101000a900460ff1660ff168260060160079054906101000a900460ff1660ff161115610cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ceb90611ce2565b60405180910390fd5b81600601600781819054906101000a900460ff1680929190610d15906120c6565b91906101000a81548160ff021916908360ff160217905550505b6007871415610dde578160060160019054906101000a900460ff1660ff1682600601600d9054906101000a900460ff1660ff161115610da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9a90611d62565b60405180910390fd5b81600601600d81819054906101000a900460ff1680929190610dc4906120c6565b91906101000a81548160ff021916908360ff160217905550505b6008871415610e8d578160060160029054906101000a900460ff1660ff1682600601600e9054906101000a900460ff1660ff161115610e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4990611d22565b60405180910390fd5b81600601600e81819054906101000a900460ff1680929190610e73906120c6565b91906101000a81548160ff021916908360ff160217905550505b60005b8160200151518110156110485781602001518181518110610eda577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16878281518110610f21577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114610f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6090611d02565b60405180910390fd5b81604001518181518110610fa6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16868281518110610fed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114611035576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102c90611d42565b60405180910390fd5b80806110409061207d565b915050610e90565b506000600b016000888152602001908152602001600020600401600c9054906101000a900460030b8260070160008282829054906101000a900460030b61108f9190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600b01600088815260200190815260200160002060040160109054906101000a900460030b82600601601b8282829054906101000a900460030b6110f69190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600b01600088815260200190815260200160002060040160049054906101000a900460030b8260060160138282829054906101000a900460030b61115d9190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600b01600088815260200190815260200160002060040160009054906101000a900460030b82600601600f8282829054906101000a900460030b6111c49190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600b01600088815260200190815260200160002060040160089054906101000a900460030b8260060160178282829054906101000a900460030b61122b9190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff16021790555061125733878761167a565b7f23b0dc18349873b0095e82b115dd5e0b7bcde4ed3ba5505395d4f3304da15c3a33898960405161128a93929190611b76565b60405180910390a15050505050505050565b6060806060600080600b016000868152602001908152602001600020604051806101200160405290816000820180546112d49061201a565b80601f01602080910402602001604051908101604052809291908181526020018280546113009061201a565b801561134d5780601f106113225761010080835404028352916020019161134d565b820191906000526020600020905b81548152906001019060200180831161133057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156113d157602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116113945790505b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561145557602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116114185790505b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156114d957602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161149c5790505b505050505081526020016004820160009054906101000a900460030b60030b60030b81526020016004820160049054906101000a900460030b60030b60030b81526020016004820160089054906101000a900460030b60030b60030b815260200160048201600c9054906101000a900460030b60030b60030b81526020016004820160109054906101000a900460030b60030b60030b815250509050806020015181604001518260600151935093509350509193909250565b6000806000806000806000806000806000800160008c815260200190815260200160002090508060060160099054906101000a900460ff168160060160069054906101000a900460ff168260060160089054906101000a900460ff1683600601600a9054906101000a900460ff1684600601600b9054906101000a900460ff1685600601600c9054906101000a900460ff168660060160079054906101000a900460ff1687600601600d9054906101000a900460ff1688600601600e9054906101000a900460ff16995099509950995099509950995099509950509193959799909294969850565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638a5d94468585856040518463ffffffff1660e01b81526004016116e093929190611b31565b600060405180830381600087803b1580156116fa57600080fd5b505af115801561170e573d6000803e3d6000fd5b5050505050505050565b600061172b61172684611e4f565b611e2a565b9050808382526020820190508285602086028201111561174a57600080fd5b60005b8581101561177a578161176088826117c3565b84526020840193506020830192505060018101905061174d565b5050509392505050565b600081519050611793816122ad565b92915050565b600082601f8301126117aa57600080fd5b81356117ba848260208601611718565b91505092915050565b6000813590506117d2816122c4565b92915050565b6000602082840312156117ea57600080fd5b60006117f884828501611784565b91505092915050565b60006020828403121561181357600080fd5b6000611821848285016117c3565b91505092915050565b6000806000806080858703121561184057600080fd5b600061184e878288016117c3565b945050602061185f878288016117c3565b935050604085013567ffffffffffffffff81111561187c57600080fd5b61188887828801611799565b925050606085013567ffffffffffffffff8111156118a557600080fd5b6118b187828801611799565b91505092959194509250565b60006118c98383611af5565b60208301905092915050565b60006118e18383611b13565b60208301905092915050565b6118f681611f81565b82525050565b600061190782611e9b565b6119118185611ed6565b935061191c83611e7b565b8060005b8381101561194d57815161193488826118bd565b975061193f83611ebc565b925050600181019050611920565b5085935050505092915050565b600061196582611ea6565b61196f8185611ee7565b935061197a83611e8b565b8060005b838110156119ab57815161199288826118d5565b975061199d83611ec9565b92505060018101905061197e565b5085935050505092915050565b6119c181611f93565b82525050565b60006119d282611eb1565b6119dc8185611ef8565b93506119ec818560208601611fe7565b6119f58161217d565b840191505092915050565b6000611a0d600983611ef8565b9150611a188261218e565b602082019050919050565b6000611a30601983611ef8565b9150611a3b826121b7565b602082019050919050565b6000611a53600a83611ef8565b9150611a5e826121e0565b602082019050919050565b6000611a76601283611ef8565b9150611a8182612209565b602082019050919050565b6000611a99600983611ef8565b9150611aa482612232565b602082019050919050565b6000611abc601a83611ef8565b9150611ac78261225b565b602082019050919050565b6000611adf600b83611ef8565b9150611aea82612284565b602082019050919050565b611afe81611fc0565b82525050565b611b0d81611fc0565b82525050565b611b1c81611fca565b82525050565b611b2b81611fda565b82525050565b6000606082019050611b4660008301866118ed565b8181036020830152611b5881856118fc565b90508181036040830152611b6c81846118fc565b9050949350505050565b6000606082019050611b8b60008301866118ed565b611b986020830185611b04565b611ba56040830184611b04565b949350505050565b60006060820190508181036000830152611bc7818661195a565b90508181036020830152611bdb818561195a565b90508181036040830152611bef818461195a565b9050949350505050565b6000610120820190508181036000830152611c14818c6119c7565b90508181036020830152611c28818b61195a565b90508181036040830152611c3c818a61195a565b90508181036060830152611c50818961195a565b9050611c5f60808301886119b8565b611c6c60a08301876119b8565b611c7960c08301866119b8565b611c8660e08301856119b8565b611c946101008301846119b8565b9a9950505050505050505050565b60006020820190508181036000830152611cbb81611a00565b9050919050565b60006020820190508181036000830152611cdb81611a23565b9050919050565b60006020820190508181036000830152611cfb81611a46565b9050919050565b60006020820190508181036000830152611d1b81611a69565b9050919050565b60006020820190508181036000830152611d3b81611a8c565b9050919050565b60006020820190508181036000830152611d5b81611aaf565b9050919050565b60006020820190508181036000830152611d7b81611ad2565b9050919050565b6000602082019050611d976000830184611b04565b92915050565b600061012082019050611db3600083018c611b22565b611dc0602083018b611b22565b611dcd604083018a611b22565b611dda6060830189611b22565b611de76080830188611b22565b611df460a0830187611b22565b611e0160c0830186611b22565b611e0e60e0830185611b22565b611e1c610100830184611b22565b9a9950505050505050505050565b6000611e34611e45565b9050611e40828261204c565b919050565b6000604051905090565b600067ffffffffffffffff821115611e6a57611e6961214e565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611f1482611f93565b9150611f1f83611f93565b925081637fffffff03831360008312151615611f3e57611f3d6120f0565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000038312600083121615611f7657611f756120f0565b5b828201905092915050565b6000611f8c82611fa0565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b83811015612005578082015181840152602081019050611fea565b83811115612014576000848401525b50505050565b6000600282049050600182168061203257607f821691505b602082108114156120465761204561211f565b5b50919050565b6120558261217d565b810181811067ffffffffffffffff821117156120745761207361214e565b5b80604052505050565b600061208882611fc0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156120bb576120ba6120f0565b5b600182019050919050565b60006120d182611fda565b915060ff8214156120e5576120e46120f0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e4f5f4349544945530000000000000000000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f4e4f5f524547494f4e5300000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f757263650000000000000000000000000000600082015250565b7f4e4f5f5249564552530000000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f75726365732076616c756573000000000000600082015250565b7f4e4f5f484152424f555253000000000000000000000000000000000000000000600082015250565b6122b681611f81565b81146122c157600080fd5b50565b6122cd81611fc0565b81146122d857600080fd5b5056fea26469706673582212200e1ca4a453ca80ee2f308207415add6311e6d9b64998e9224a0275390d8d47bb64736f6c63430008030033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806359389ead146100445780638c42f69014610089578063be00feed146100a5578063ca8c3462146100e4575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190611801565b610129565b60405161008099989796959493929190611bf9565b60405180910390f35b6100a3600480360381019061009e919061182a565b610459565b005b3480156100b157600080fd5b506100cc60048036038101906100c79190611801565b61129c565b6040516100db93929190611bad565b60405180910390f35b3480156100f057600080fd5b5061010b60048036038101906101069190611801565b611592565b60405161012099989796959493929190611d9d565b60405180910390f35b6060806060806000806000806000806000600b0160008c81526020019081526020016000206040518061012001604052908160008201805461016a9061201a565b80601f01602080910402602001604051908101604052809291908181526020018280546101969061201a565b80156101e35780601f106101b8576101008083540402835291602001916101e3565b820191906000526020600020905b8154815290600101906020018083116101c657829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561026757602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161022a5790505b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156102eb57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116102ae5790505b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561036f57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116103325790505b505050505081526020016004820160009054906101000a900460030b60030b60030b81526020016004820160049054906101000a900460030b60030b60030b81526020016004820160089054906101000a900460030b60030b60030b815260200160048201600c9054906101000a900460030b60030b60030b81526020016004820160109054906101000a900460030b60030b60030b815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e00151886101000151995099509950995099509950995099509950509193959799909294969850565b8360008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016104bc9190611d82565b60206040518083038186803b1580156104d457600080fd5b505afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c91906117d8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090611cc2565b60405180910390fd5b60008060000160008881526020019081526020016000209050600080600b016000888152602001908152602001600020604051806101200160405290816000820180546105c59061201a565b80601f01602080910402602001604051908101604052809291908181526020018280546105f19061201a565b801561063e5780601f106106135761010080835404028352916020019161063e565b820191906000526020600020905b81548152906001019060200180831161062157829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156106c257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116106855790505b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561074657602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116107095790505b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161078d5790505b505050505081526020016004820160009054906101000a900460030b60030b60030b81526020016004820160049054906101000a900460030b60030b60030b81526020016004820160089054906101000a900460030b60030b60030b815260200160048201600c9054906101000a900460030b60030b60030b81526020016004820160109054906101000a900460030b60030b60030b8152505090506000871415610915578160060160009054906101000a900460ff1660ff168260060160099054906101000a900460ff1660ff1611156108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611ca2565b60405180910390fd5b81600601600981819054906101000a900460ff16809291906108fb906120c6565b91906101000a81548160ff021916908360ff160217905550505b60018714156109c4578160060160029054906101000a900460ff1660ff168260060160069054906101000a900460ff1660ff161115610989576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098090611d22565b60405180910390fd5b81600601600681819054906101000a900460ff16809291906109aa906120c6565b91906101000a81548160ff021916908360ff160217905550505b6002871415610a73578160060160039054906101000a900460ff1660ff168260060160089054906101000a900460ff1660ff161115610a38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2f90611ce2565b60405180910390fd5b81600601600881819054906101000a900460ff1680929190610a59906120c6565b91906101000a81548160ff021916908360ff160217905550505b6003871415610b22578160060160019054906101000a900460ff1660ff1682600601600a9054906101000a900460ff1660ff161115610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90611d62565b60405180910390fd5b81600601600a81819054906101000a900460ff1680929190610b08906120c6565b91906101000a81548160ff021916908360ff160217905550505b6004871415610bd1578160060160009054906101000a900460ff1660ff1682600601600b9054906101000a900460ff1660ff161115610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d90611ca2565b60405180910390fd5b81600601600b81819054906101000a900460ff1680929190610bb7906120c6565b91906101000a81548160ff021916908360ff160217905550505b6005871415610c80578160060160009054906101000a900460ff1660ff1682600601600c9054906101000a900460ff1660ff161115610c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3c90611ca2565b60405180910390fd5b81600601600c81819054906101000a900460ff1680929190610c66906120c6565b91906101000a81548160ff021916908360ff160217905550505b6006871415610d2f578160060160039054906101000a900460ff1660ff168260060160079054906101000a900460ff1660ff161115610cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ceb90611ce2565b60405180910390fd5b81600601600781819054906101000a900460ff1680929190610d15906120c6565b91906101000a81548160ff021916908360ff160217905550505b6007871415610dde578160060160019054906101000a900460ff1660ff1682600601600d9054906101000a900460ff1660ff161115610da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9a90611d62565b60405180910390fd5b81600601600d81819054906101000a900460ff1680929190610dc4906120c6565b91906101000a81548160ff021916908360ff160217905550505b6008871415610e8d578160060160029054906101000a900460ff1660ff1682600601600e9054906101000a900460ff1660ff161115610e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4990611d22565b60405180910390fd5b81600601600e81819054906101000a900460ff1680929190610e73906120c6565b91906101000a81548160ff021916908360ff160217905550505b60005b8160200151518110156110485781602001518181518110610eda577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16878281518110610f21577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114610f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6090611d02565b60405180910390fd5b81604001518181518110610fa6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015163ffffffff16868281518110610fed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114611035576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102c90611d42565b60405180910390fd5b80806110409061207d565b915050610e90565b506000600b016000888152602001908152602001600020600401600c9054906101000a900460030b8260070160008282829054906101000a900460030b61108f9190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600b01600088815260200190815260200160002060040160109054906101000a900460030b82600601601b8282829054906101000a900460030b6110f69190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600b01600088815260200190815260200160002060040160049054906101000a900460030b8260060160138282829054906101000a900460030b61115d9190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600b01600088815260200190815260200160002060040160009054906101000a900460030b82600601600f8282829054906101000a900460030b6111c49190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600b01600088815260200190815260200160002060040160089054906101000a900460030b8260060160178282829054906101000a900460030b61122b9190611f09565b92506101000a81548163ffffffff021916908360030b63ffffffff16021790555061125733878761167a565b7f23b0dc18349873b0095e82b115dd5e0b7bcde4ed3ba5505395d4f3304da15c3a33898960405161128a93929190611b76565b60405180910390a15050505050505050565b6060806060600080600b016000868152602001908152602001600020604051806101200160405290816000820180546112d49061201a565b80601f01602080910402602001604051908101604052809291908181526020018280546113009061201a565b801561134d5780601f106113225761010080835404028352916020019161134d565b820191906000526020600020905b81548152906001019060200180831161133057829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156113d157602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116113945790505b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561145557602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116114185790505b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156114d957602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161149c5790505b505050505081526020016004820160009054906101000a900460030b60030b60030b81526020016004820160049054906101000a900460030b60030b60030b81526020016004820160089054906101000a900460030b60030b60030b815260200160048201600c9054906101000a900460030b60030b60030b81526020016004820160109054906101000a900460030b60030b60030b815250509050806020015181604001518260600151935093509350509193909250565b6000806000806000806000806000806000800160008c815260200190815260200160002090508060060160099054906101000a900460ff168160060160069054906101000a900460ff168260060160089054906101000a900460ff1683600601600a9054906101000a900460ff1684600601600b9054906101000a900460ff1685600601600c9054906101000a900460ff168660060160079054906101000a900460ff1687600601600d9054906101000a900460ff1688600601600e9054906101000a900460ff16995099509950995099509950995099509950509193959799909294969850565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638a5d94468585856040518463ffffffff1660e01b81526004016116e093929190611b31565b600060405180830381600087803b1580156116fa57600080fd5b505af115801561170e573d6000803e3d6000fd5b5050505050505050565b600061172b61172684611e4f565b611e2a565b9050808382526020820190508285602086028201111561174a57600080fd5b60005b8581101561177a578161176088826117c3565b84526020840193506020830192505060018101905061174d565b5050509392505050565b600081519050611793816122ad565b92915050565b600082601f8301126117aa57600080fd5b81356117ba848260208601611718565b91505092915050565b6000813590506117d2816122c4565b92915050565b6000602082840312156117ea57600080fd5b60006117f884828501611784565b91505092915050565b60006020828403121561181357600080fd5b6000611821848285016117c3565b91505092915050565b6000806000806080858703121561184057600080fd5b600061184e878288016117c3565b945050602061185f878288016117c3565b935050604085013567ffffffffffffffff81111561187c57600080fd5b61188887828801611799565b925050606085013567ffffffffffffffff8111156118a557600080fd5b6118b187828801611799565b91505092959194509250565b60006118c98383611af5565b60208301905092915050565b60006118e18383611b13565b60208301905092915050565b6118f681611f81565b82525050565b600061190782611e9b565b6119118185611ed6565b935061191c83611e7b565b8060005b8381101561194d57815161193488826118bd565b975061193f83611ebc565b925050600181019050611920565b5085935050505092915050565b600061196582611ea6565b61196f8185611ee7565b935061197a83611e8b565b8060005b838110156119ab57815161199288826118d5565b975061199d83611ec9565b92505060018101905061197e565b5085935050505092915050565b6119c181611f93565b82525050565b60006119d282611eb1565b6119dc8185611ef8565b93506119ec818560208601611fe7565b6119f58161217d565b840191505092915050565b6000611a0d600983611ef8565b9150611a188261218e565b602082019050919050565b6000611a30601983611ef8565b9150611a3b826121b7565b602082019050919050565b6000611a53600a83611ef8565b9150611a5e826121e0565b602082019050919050565b6000611a76601283611ef8565b9150611a8182612209565b602082019050919050565b6000611a99600983611ef8565b9150611aa482612232565b602082019050919050565b6000611abc601a83611ef8565b9150611ac78261225b565b602082019050919050565b6000611adf600b83611ef8565b9150611aea82612284565b602082019050919050565b611afe81611fc0565b82525050565b611b0d81611fc0565b82525050565b611b1c81611fca565b82525050565b611b2b81611fda565b82525050565b6000606082019050611b4660008301866118ed565b8181036020830152611b5881856118fc565b90508181036040830152611b6c81846118fc565b9050949350505050565b6000606082019050611b8b60008301866118ed565b611b986020830185611b04565b611ba56040830184611b04565b949350505050565b60006060820190508181036000830152611bc7818661195a565b90508181036020830152611bdb818561195a565b90508181036040830152611bef818461195a565b9050949350505050565b6000610120820190508181036000830152611c14818c6119c7565b90508181036020830152611c28818b61195a565b90508181036040830152611c3c818a61195a565b90508181036060830152611c50818961195a565b9050611c5f60808301886119b8565b611c6c60a08301876119b8565b611c7960c08301866119b8565b611c8660e08301856119b8565b611c946101008301846119b8565b9a9950505050505050505050565b60006020820190508181036000830152611cbb81611a00565b9050919050565b60006020820190508181036000830152611cdb81611a23565b9050919050565b60006020820190508181036000830152611cfb81611a46565b9050919050565b60006020820190508181036000830152611d1b81611a69565b9050919050565b60006020820190508181036000830152611d3b81611a8c565b9050919050565b60006020820190508181036000830152611d5b81611aaf565b9050919050565b60006020820190508181036000830152611d7b81611ad2565b9050919050565b6000602082019050611d976000830184611b04565b92915050565b600061012082019050611db3600083018c611b22565b611dc0602083018b611b22565b611dcd604083018a611b22565b611dda6060830189611b22565b611de76080830188611b22565b611df460a0830187611b22565b611e0160c0830186611b22565b611e0e60e0830185611b22565b611e1c610100830184611b22565b9a9950505050505050505050565b6000611e34611e45565b9050611e40828261204c565b919050565b6000604051905090565b600067ffffffffffffffff821115611e6a57611e6961214e565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611f1482611f93565b9150611f1f83611f93565b925081637fffffff03831360008312151615611f3e57611f3d6120f0565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000038312600083121615611f7657611f756120f0565b5b828201905092915050565b6000611f8c82611fa0565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b83811015612005578082015181840152602081019050611fea565b83811115612014576000848401525b50505050565b6000600282049050600182168061203257607f821691505b602082108114156120465761204561211f565b5b50919050565b6120558261217d565b810181811067ffffffffffffffff821117156120745761207361214e565b5b80604052505050565b600061208882611fc0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156120bb576120ba6120f0565b5b600182019050919050565b60006120d182611fda565b915060ff8214156120e5576120e46120f0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e4f5f4349544945530000000000000000000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f4e4f5f524547494f4e5300000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f757263650000000000000000000000000000600082015250565b7f4e4f5f5249564552530000000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f75726365732076616c756573000000000000600082015250565b7f4e4f5f484152424f555253000000000000000000000000000000000000000000600082015250565b6122b681611f81565b81146122c157600080fd5b50565b6122cd81611fc0565b81146122d857600080fd5b5056fea26469706673582212200e1ca4a453ca80ee2f308207415add6311e6d9b64998e9224a0275390d8d47bb64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6300,
        "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)5246_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(ArmyUnit)5431_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ArmyUnit)5431_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)5341_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)5350_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)5350_storage"
      },
      "t_mapping(t_uint256,t_struct(DefendingArmy)5411_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefendingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(DefendingArmy)5411_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)5353_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)5353_storage"
      },
      "t_mapping(t_uint256,t_struct(Raiding)5373_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raiding)",
        "numberOfBytes": "32",
        "value": "t_struct(Raiding)5373_storage"
      },
      "t_mapping(t_uint256,t_struct(RaidingArmy)5392_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RaidingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(RaidingArmy)5392_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)5312_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)5312_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)5319_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)5319_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)5253_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)5253_storage"
      },
      "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainedArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(TrainedArmyUnit)5416_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)5366_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)5366_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)5362_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)5362_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)5246_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 5184,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)5312_storage)"
          },
          {
            "astId": 5186,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "sRealms",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5188,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realms",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5190,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmsStorage",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5192,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5194,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resources",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5196,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5198,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "lords",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 5203,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)5353_storage)"
          },
          {
            "astId": 5208,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)5362_storage)"
          },
          {
            "astId": 5213,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)5350_storage)"
          },
          {
            "astId": 5218,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)"
          },
          {
            "astId": 5223,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(TheAges)5253_storage)"
          },
          {
            "astId": 5225,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 5230,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "raiding",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(Raiding)5373_storage)"
          },
          {
            "astId": 5235,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "raidingArmy",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(RaidingArmy)5392_storage)"
          },
          {
            "astId": 5240,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "defendingArmy",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(DefendingArmy)5411_storage)"
          },
          {
            "astId": 5245,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "armyUnit",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(ArmyUnit)5431_storage)"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(ArmyUnit)5431_storage": {
        "encoding": "inplace",
        "label": "struct ArmyUnit",
        "members": [
          {
            "astId": 5418,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5420,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "timeToTrain",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5422,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "offence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5424,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "defence",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5427,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5430,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingCosts)5341_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 5321,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5324,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5327,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5330,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5332,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5334,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5336,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5338,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5340,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)5350_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 5344,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5349,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefendingArmy)5411_storage": {
        "encoding": "inplace",
        "label": "struct DefendingArmy",
        "members": [
          {
            "astId": 5394,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "trebuchetsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5396,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "trebuchetsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5398,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "scorpionsTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5400,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "scorpionsSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5405,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "trebuchets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          },
          {
            "astId": 5410,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "scorpions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LevelProduction)5353_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 5352,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Raiding)5373_storage": {
        "encoding": "inplace",
        "label": "struct Raiding",
        "members": [
          {
            "astId": 5368,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "coolDownTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5370,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "totalRaids",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5372,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "successfulRaids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RaidingArmy)5392_storage": {
        "encoding": "inplace",
        "label": "struct RaidingArmy",
        "members": [
          {
            "astId": 5375,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "knightsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5377,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "knightsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5379,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "footSoldiersTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5381,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "footSoldiersSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5386,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "knights",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          },
          {
            "astId": 5391,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "footSoldiers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RealmInfo)5312_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 5255,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5257,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5259,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5261,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5263,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5266,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5268,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5270,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5272,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5274,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5276,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5278,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5280,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "aquaducts",
            "offset": 6,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5282,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "temples",
            "offset": 7,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5284,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "castles",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5286,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "markets",
            "offset": 9,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5288,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ports",
            "offset": 10,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5290,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "barracks",
            "offset": 11,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5292,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "farms",
            "offset": 12,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5294,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "shipyard",
            "offset": 13,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5296,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "fishingVillage",
            "offset": 14,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5298,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmDefence",
            "offset": 15,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5300,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmOffence",
            "offset": 19,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5302,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmMagic",
            "offset": 23,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5304,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "foodSupply",
            "offset": 27,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5306,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "population",
            "offset": 0,
            "slot": "7",
            "type": "t_int32"
          },
          {
            "astId": 5311,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)5319_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ResourceInfo)5319_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 5314,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5316,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5318,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)5253_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 5248,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5250,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5252,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TrainedArmyUnit)5416_storage": {
        "encoding": "inplace",
        "label": "struct TrainedArmyUnit",
        "members": [
          {
            "astId": 5413,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "destroyed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5415,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "unitFinished",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UpgradeCostLevels)5366_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 5365,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)5362_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 5356,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5361,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)5366_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}