{
  "address": "0xa5E9e18f0E055d8927a28367587E75715554D306",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "realmTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buildingId",
          "type": "uint256"
        }
      ],
      "name": "ConstructionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buildingID",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "resources",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "resourceValues",
          "type": "uint256[]"
        }
      ],
      "name": "createBuilding",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getAllBuildingStats",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBuildingCosts",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmTokenId",
          "type": "uint256"
        }
      ],
      "name": "getBuildings",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x07ad22753ef58fb01be77fbfd3f188c282833e38038719de5c80c93298fa3e3f",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0xa5E9e18f0E055d8927a28367587E75715554D306",
    "transactionIndex": 0,
    "gasUsed": "63795155",
    "logsBloom": "0x
    "blockHash": "0xf38b268618f84c59af19e8e0e821a874d1340565897b73417beaca93c686b03a",
    "transactionHash": "0x07ad22753ef58fb01be77fbfd3f188c282833e38038719de5c80c93298fa3e3f",
    "logs": [],
    "blockNumber": 5817385,
    "cumulativeGasUsed": "49907295",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "828df6be63b98841c3bc4bb9a4f76f86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realmTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buildingId\",\"type\":\"uint256\"}],\"name\":\"ConstructionEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buildingID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resources\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceValues\",\"type\":\"uint256[]\"}],\"name\":\"createBuilding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAllBuildingStats\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBuildingCosts\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmTokenId\",\"type\":\"uint256\"}],\"name\":\"getBuildings\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/TraitConstructionFacet.sol\":\"TraitConstructionFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/TraitConstructionFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../libraries/Modifiers.sol\\\";\\n\\ncontract TraitConstructionFacet is Modifiers {\\n    function createBuilding(\\n        uint256 _realmTokenId,\\n        uint256 _buildingID,\\n        uint256[] memory resources,\\n        uint256[] memory resourceValues\\n    ) external payable checkSRealmOwner(_realmTokenId) {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmTokenId];\\n\\n        RealmBuildings storage realmBuildings = s.realmBuildings[_realmTokenId];\\n\\n        BuildingCosts storage buildingCosts = s.buildingCosts[_buildingID];\\n\\n        RealmStatistics storage realmStatistics = s.realmStatistics[\\n            _realmTokenId\\n        ];\\n\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n\\n        //TODO: Check if user has the balance of resources available\\n        // Markets\\n        if (_buildingID == 0) {\\n            require(realmBuildings.markets <= realmInfo.cities, \\\"NO_CITIES\\\");\\n            realmBuildings.markets++;\\n        }\\n        if (_buildingID == 1) {\\n            require(realmBuildings.aquaducts <= realmInfo.rivers, \\\"NO_RIVERS\\\");\\n            realmBuildings.aquaducts++;\\n        }\\n        if (_buildingID == 2) {\\n            require(realmBuildings.castles <= realmInfo.regions, \\\"NO_REGIONS\\\");\\n            realmBuildings.castles++;\\n        }\\n        if (_buildingID == 3) {\\n            require(realmBuildings.ports <= realmInfo.harbours, \\\"NO_HARBOURS\\\");\\n            realmBuildings.ports++;\\n        }\\n        if (_buildingID == 4) {\\n            require(realmBuildings.barracks <= realmInfo.cities, \\\"NO_CITIES\\\");\\n            realmBuildings.barracks++;\\n        }\\n        if (_buildingID == 5) {\\n            require(realmBuildings.farms <= realmInfo.cities, \\\"NO_CITIES\\\");\\n            realmBuildings.farms++;\\n        }\\n        if (_buildingID == 6) {\\n            require(realmBuildings.temples <= realmInfo.regions, \\\"NO_REGIONS\\\");\\n            realmBuildings.temples++;\\n        }\\n        if (_buildingID == 7) {\\n            require(\\n                realmBuildings.shipyard <= realmInfo.harbours,\\n                \\\"NO_HARBOURS\\\"\\n            );\\n            realmBuildings.shipyard++;\\n        }\\n        if (_buildingID == 8) {\\n            require(\\n                realmBuildings.fishingVillage <= realmInfo.rivers,\\n                \\\"NO_RIVERS\\\"\\n            );\\n            realmBuildings.fishingVillage++;\\n        }\\n\\n        for (uint256 i = 0; i < buildingCosts.resourceIds.length; i++) {\\n            require(\\n                resources[i] == buildingCosts.resourceIds[i],\\n                \\\"Incorrect resource\\\"\\n            );\\n            require(\\n                resourceValues[i] == buildingCosts.resourceValues[i],\\n                \\\"Incorrect resources values\\\"\\n            );\\n        }\\n\\n        realmStatistics.population += s.buildingCosts[_buildingID].population;\\n        realmStatistics.foodSupply += s.buildingCosts[_buildingID].food;\\n        realmStatistics.realmOffence += s.buildingCosts[_buildingID].offence;\\n        realmStatistics.realmDefence += s.buildingCosts[_buildingID].defence;\\n        realmStatistics.realmMagic += s.buildingCosts[_buildingID].magic;\\n\\n        resourceTokens.productionBuildingsBurn(\\n            msg.sender,\\n            resources,\\n            resourceValues\\n        );\\n\\n        emit ConstructionEvent(msg.sender, _realmTokenId, _buildingID);\\n    }\\n\\n    event ConstructionEvent(\\n        address owner,\\n        uint256 realmTokenId,\\n        uint256 buildingId\\n    );\\n\\n    function getBuildings(uint256 _realmTokenId)\\n        public\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8\\n        )\\n    {\\n        RealmBuildings storage realmBuildings = s.realmBuildings[_realmTokenId];\\n\\n        return (\\n            realmBuildings.markets,\\n            realmBuildings.aquaducts,\\n            realmBuildings.castles,\\n            realmBuildings.ports,\\n            realmBuildings.barracks,\\n            realmBuildings.farms,\\n            realmBuildings.temples,\\n            realmBuildings.shipyard,\\n            realmBuildings.fishingVillage\\n        );\\n    }\\n\\n    function getAllBuildingStats(uint256 _index)\\n        public\\n        view\\n        returns (\\n            string memory,\\n            uint32[] memory,\\n            uint32[] memory,\\n            uint32[] memory,\\n            int32,\\n            int32,\\n            int32,\\n            int32,\\n            int32\\n        )\\n    {\\n        BuildingCosts storage buildingCosts = s.buildingCosts[_index];\\n\\n        return (\\n            buildingCosts.name,\\n            buildingCosts.resourceIds,\\n            buildingCosts.resourceValues,\\n            buildingCosts.requirements,\\n            buildingCosts.defence,\\n            buildingCosts.offence,\\n            buildingCosts.magic,\\n            buildingCosts.population,\\n            buildingCosts.food\\n        );\\n    }\\n\\n    function getBuildingCosts(uint256 _index)\\n        public\\n        view\\n        returns (\\n            uint32[] memory,\\n            uint32[] memory,\\n            uint32[] memory\\n        )\\n    {\\n        BuildingCosts storage buildingCosts = s.buildingCosts[_index];\\n\\n        return (\\n            buildingCosts.resourceIds,\\n            buildingCosts.resourceValues,\\n            buildingCosts.requirements\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa3503aba9b42626f1ecc151ef0c18f85c6d826537bf3878e60b09be709e94222\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    mapping(uint256 => RealmStatistics) realmStatistics;\\n    mapping(uint256 => RealmBuildings) realmBuildings;\\n    uint8 baseProductionRate;\\n    uint8 maxProductionRate;\\n    address sRealms;\\n    address realms;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmStatistics {\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct StatsInfo {\\n    uint8 id;\\n    uint8 value; // level of statistic\\n}\\n\\nstruct RealmBuildings {\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xc165c0821fd3bbe8678ab7a5ec078a6c875b8e01d2c27558f37d551fbdf70eaa\"},\"contracts/settling/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport {IDiamondCut} from \\\"../../shared/interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress)\\n        internal\\n    {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\n            .facetAddresses\\n            .length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x381be6bf44ad825d476842de372d56bc20f4c6b6c2c9a7b176b2a204020e7f39\",\"license\":\"MIT\"},\"contracts/settling/libraries/Modifiers.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6a04f22a363dcf5c72fd36e2eb64c03f7bbed1d0d098311e2727c992890b4718\"},\"contracts/shared/interfaces/IDiamondCut.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xbf17f994eca1e6da64c2cec17318b5701ce0a424fb77db7a64a08c17a547b091\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function productionBuildingsBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x259fdded2348c09c4a61d4b01baf8730cb2102b1ef9a02374b19874400c620ba\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611efa806100206000396000f3fe60806040526004361061003f5760003560e01c806359389ead146100445780638c42f69014610089578063be00feed146100a5578063ca8c3462146100e4575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906113ea565b610129565b604051610080999897969594939291906117e2565b60405180910390f35b6100a3600480360381019061009e9190611413565b6103e0565b005b3480156100b157600080fd5b506100cc60048036038101906100c791906113ea565b611066565b6040516100db93929190611796565b60405180910390f35b3480156100f057600080fd5b5061010b600480360381019061010691906113ea565b611218565b60405161012099989796959493929190611986565b60405180910390f35b6060806060806000806000806000806000600c0160008c81526020019081526020016000209050806000018160010182600201836003018460040160009054906101000a900460030b8560040160049054906101000a900460030b8660040160089054906101000a900460030b87600401600c9054906101000a900460030b8860040160109054906101000a900460030b8880546101c690611c03565b80601f01602080910402602001604051908101604052809291908181526020018280546101f290611c03565b801561023f5780601f106102145761010080835404028352916020019161023f565b820191906000526020600020905b81548152906001019060200180831161022257829003601f168201915b50505050509850878054806020026020016040519081016040528092919081815260200182805480156102bd57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116102805790505b505050505097508680548060200260200160405190810160405280929190818152602001828054801561033b57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116102fe5790505b50505050509650858054806020026020016040519081016040528092919081815260200182805480156103b957602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161037c5790505b50505050509550995099509950995099509950995099509950509193959799909294969850565b8360008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610443919061196b565b60206040518083038186803b15801561045b57600080fd5b505afa15801561046f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049391906113c1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906118ab565b60405180910390fd5b6000806000016000888152602001908152602001600020905060008060020160008981526020019081526020016000209050600080600c016000898152602001908152602001600020905060008060010160008b8152602001908152602001600020905060008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008a141561063c578460060160009054906101000a900460ff1660ff168460000160039054906101000a900460ff1660ff161115610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f89061188b565b60405180910390fd5b83600001600381819054906101000a900460ff168092919061062290611caf565b91906101000a81548160ff021916908360ff160217905550505b60018a14156106eb578460060160029054906101000a900460ff1660ff168460000160009054906101000a900460ff1660ff1611156106b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a79061190b565b60405180910390fd5b83600001600081819054906101000a900460ff16809291906106d190611caf565b91906101000a81548160ff021916908360ff160217905550505b60028a141561079a578460060160039054906101000a900460ff1660ff168460000160029054906101000a900460ff1660ff16111561075f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610756906118cb565b60405180910390fd5b83600001600281819054906101000a900460ff168092919061078090611caf565b91906101000a81548160ff021916908360ff160217905550505b60038a1415610849578460060160019054906101000a900460ff1660ff168460000160049054906101000a900460ff1660ff16111561080e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108059061194b565b60405180910390fd5b83600001600481819054906101000a900460ff168092919061082f90611caf565b91906101000a81548160ff021916908360ff160217905550505b60048a14156108f8578460060160009054906101000a900460ff1660ff168460000160059054906101000a900460ff1660ff1611156108bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b49061188b565b60405180910390fd5b83600001600581819054906101000a900460ff16809291906108de90611caf565b91906101000a81548160ff021916908360ff160217905550505b60058a14156109a7578460060160009054906101000a900460ff1660ff168460000160069054906101000a900460ff1660ff16111561096c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109639061188b565b60405180910390fd5b83600001600681819054906101000a900460ff168092919061098d90611caf565b91906101000a81548160ff021916908360ff160217905550505b60068a1415610a56578460060160039054906101000a900460ff1660ff168460000160019054906101000a900460ff1660ff161115610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a12906118cb565b60405180910390fd5b83600001600181819054906101000a900460ff1680929190610a3c90611caf565b91906101000a81548160ff021916908360ff160217905550505b60078a1415610b05578460060160019054906101000a900460ff1660ff168460000160079054906101000a900460ff1660ff161115610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac19061194b565b60405180910390fd5b83600001600781819054906101000a900460ff1680929190610aeb90611caf565b91906101000a81548160ff021916908360ff160217905550505b60088a1415610bb4578460060160029054906101000a900460ff1660ff168460000160089054906101000a900460ff1660ff161115610b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b709061190b565b60405180910390fd5b83600001600881819054906101000a900460ff1680929190610b9a90611caf565b91906101000a81548160ff021916908360ff160217905550505b60005b8360010180549050811015610dab57836001018181548110610c02577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff168a8281518110610c67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114610caf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca6906118eb565b60405180910390fd5b836002018181548110610ceb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16898281518110610d50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114610d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8f9061192b565b60405180910390fd5b8080610da390611c66565b915050610bb7565b506000600c0160008b8152602001908152602001600020600401600c9054906101000a900460030b8260000160108282829054906101000a900460030b610df29190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600c0160008b815260200190815260200160002060040160109054906101000a900460030b82600001600c8282829054906101000a900460030b610e599190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600c0160008b815260200190815260200160002060040160049054906101000a900460030b8260000160048282829054906101000a900460030b610ec09190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600c0160008b815260200190815260200160002060040160009054906101000a900460030b8260000160008282829054906101000a900460030b610f279190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600c0160008b815260200190815260200160002060040160089054906101000a900460030b8260000160088282829054906101000a900460030b610f8e9190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663ddb6f7f1338b8b6040518463ffffffff1660e01b8152600401610fec9392919061171a565b600060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050507f23b0dc18349873b0095e82b115dd5e0b7bcde4ed3ba5505395d4f3304da15c3a338c8c6040516110519392919061175f565b60405180910390a15050505050505050505050565b6060806060600080600c01600086815260200190815260200160002090508060010181600201826003018280548060200260200160405190810160405280929190818152602001828054801561110757602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116110ca5790505b505050505092508180548060200260200160405190810160405280929190818152602001828054801561118557602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116111485790505b505050505091508080548060200260200160405190810160405280929190818152602001828054801561120357602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116111c65790505b50505050509050935093509350509193909250565b600080600080600080600080600080600060020160008c815260200190815260200160002090508060000160039054906101000a900460ff168160000160009054906101000a900460ff168260000160029054906101000a900460ff168360000160049054906101000a900460ff168460000160059054906101000a900460ff168560000160069054906101000a900460ff168660000160019054906101000a900460ff168760000160079054906101000a900460ff168860000160089054906101000a900460ff16995099509950995099509950995099509950509193959799909294969850565b600061131461130f84611a38565b611a13565b9050808382526020820190508285602086028201111561133357600080fd5b60005b85811015611363578161134988826113ac565b845260208401935060208301925050600181019050611336565b5050509392505050565b60008151905061137c81611e96565b92915050565b600082601f83011261139357600080fd5b81356113a3848260208601611301565b91505092915050565b6000813590506113bb81611ead565b92915050565b6000602082840312156113d357600080fd5b60006113e18482850161136d565b91505092915050565b6000602082840312156113fc57600080fd5b600061140a848285016113ac565b91505092915050565b6000806000806080858703121561142957600080fd5b6000611437878288016113ac565b9450506020611448878288016113ac565b935050604085013567ffffffffffffffff81111561146557600080fd5b61147187828801611382565b925050606085013567ffffffffffffffff81111561148e57600080fd5b61149a87828801611382565b91505092959194509250565b60006114b283836116de565b60208301905092915050565b60006114ca83836116fc565b60208301905092915050565b6114df81611b6a565b82525050565b60006114f082611a84565b6114fa8185611abf565b935061150583611a64565b8060005b8381101561153657815161151d88826114a6565b975061152883611aa5565b925050600181019050611509565b5085935050505092915050565b600061154e82611a8f565b6115588185611ad0565b935061156383611a74565b8060005b8381101561159457815161157b88826114be565b975061158683611ab2565b925050600181019050611567565b5085935050505092915050565b6115aa81611b7c565b82525050565b60006115bb82611a9a565b6115c58185611ae1565b93506115d5818560208601611bd0565b6115de81611d66565b840191505092915050565b60006115f6600983611ae1565b915061160182611d77565b602082019050919050565b6000611619601983611ae1565b915061162482611da0565b602082019050919050565b600061163c600a83611ae1565b915061164782611dc9565b602082019050919050565b600061165f601283611ae1565b915061166a82611df2565b602082019050919050565b6000611682600983611ae1565b915061168d82611e1b565b602082019050919050565b60006116a5601a83611ae1565b91506116b082611e44565b602082019050919050565b60006116c8600b83611ae1565b91506116d382611e6d565b602082019050919050565b6116e781611ba9565b82525050565b6116f681611ba9565b82525050565b61170581611bb3565b82525050565b61171481611bc3565b82525050565b600060608201905061172f60008301866114d6565b818103602083015261174181856114e5565b9050818103604083015261175581846114e5565b9050949350505050565b600060608201905061177460008301866114d6565b61178160208301856116ed565b61178e60408301846116ed565b949350505050565b600060608201905081810360008301526117b08186611543565b905081810360208301526117c48185611543565b905081810360408301526117d88184611543565b9050949350505050565b60006101208201905081810360008301526117fd818c6115b0565b90508181036020830152611811818b611543565b90508181036040830152611825818a611543565b905081810360608301526118398189611543565b905061184860808301886115a1565b61185560a08301876115a1565b61186260c08301866115a1565b61186f60e08301856115a1565b61187d6101008301846115a1565b9a9950505050505050505050565b600060208201905081810360008301526118a4816115e9565b9050919050565b600060208201905081810360008301526118c48161160c565b9050919050565b600060208201905081810360008301526118e48161162f565b9050919050565b6000602082019050818103600083015261190481611652565b9050919050565b6000602082019050818103600083015261192481611675565b9050919050565b6000602082019050818103600083015261194481611698565b9050919050565b60006020820190508181036000830152611964816116bb565b9050919050565b600060208201905061198060008301846116ed565b92915050565b60006101208201905061199c600083018c61170b565b6119a9602083018b61170b565b6119b6604083018a61170b565b6119c3606083018961170b565b6119d0608083018861170b565b6119dd60a083018761170b565b6119ea60c083018661170b565b6119f760e083018561170b565b611a0561010083018461170b565b9a9950505050505050505050565b6000611a1d611a2e565b9050611a298282611c35565b919050565b6000604051905090565b600067ffffffffffffffff821115611a5357611a52611d37565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611afd82611b7c565b9150611b0883611b7c565b925081637fffffff03831360008312151615611b2757611b26611cd9565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000038312600083121615611b5f57611b5e611cd9565b5b828201905092915050565b6000611b7582611b89565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b83811015611bee578082015181840152602081019050611bd3565b83811115611bfd576000848401525b50505050565b60006002820490506001821680611c1b57607f821691505b60208210811415611c2f57611c2e611d08565b5b50919050565b611c3e82611d66565b810181811067ffffffffffffffff82111715611c5d57611c5c611d37565b5b80604052505050565b6000611c7182611ba9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ca457611ca3611cd9565b5b600182019050919050565b6000611cba82611bc3565b915060ff821415611cce57611ccd611cd9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e4f5f4349544945530000000000000000000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f4e4f5f524547494f4e5300000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f757263650000000000000000000000000000600082015250565b7f4e4f5f5249564552530000000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f75726365732076616c756573000000000000600082015250565b7f4e4f5f484152424f555253000000000000000000000000000000000000000000600082015250565b611e9f81611b6a565b8114611eaa57600080fd5b50565b611eb681611ba9565b8114611ec157600080fd5b5056fea264697066735822122082526a0e5eec66512d1cb4106d39a09445bb91f9ab3903fe4db8db41a6e6de5a64736f6c63430008030033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806359389ead146100445780638c42f69014610089578063be00feed146100a5578063ca8c3462146100e4575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906113ea565b610129565b604051610080999897969594939291906117e2565b60405180910390f35b6100a3600480360381019061009e9190611413565b6103e0565b005b3480156100b157600080fd5b506100cc60048036038101906100c791906113ea565b611066565b6040516100db93929190611796565b60405180910390f35b3480156100f057600080fd5b5061010b600480360381019061010691906113ea565b611218565b60405161012099989796959493929190611986565b60405180910390f35b6060806060806000806000806000806000600c0160008c81526020019081526020016000209050806000018160010182600201836003018460040160009054906101000a900460030b8560040160049054906101000a900460030b8660040160089054906101000a900460030b87600401600c9054906101000a900460030b8860040160109054906101000a900460030b8880546101c690611c03565b80601f01602080910402602001604051908101604052809291908181526020018280546101f290611c03565b801561023f5780601f106102145761010080835404028352916020019161023f565b820191906000526020600020905b81548152906001019060200180831161022257829003601f168201915b50505050509850878054806020026020016040519081016040528092919081815260200182805480156102bd57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116102805790505b505050505097508680548060200260200160405190810160405280929190818152602001828054801561033b57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116102fe5790505b50505050509650858054806020026020016040519081016040528092919081815260200182805480156103b957602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161037c5790505b50505050509550995099509950995099509950995099509950509193959799909294969850565b8360008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610443919061196b565b60206040518083038186803b15801561045b57600080fd5b505afa15801561046f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049391906113c1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906118ab565b60405180910390fd5b6000806000016000888152602001908152602001600020905060008060020160008981526020019081526020016000209050600080600c016000898152602001908152602001600020905060008060010160008b8152602001908152602001600020905060008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008a141561063c578460060160009054906101000a900460ff1660ff168460000160039054906101000a900460ff1660ff161115610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f89061188b565b60405180910390fd5b83600001600381819054906101000a900460ff168092919061062290611caf565b91906101000a81548160ff021916908360ff160217905550505b60018a14156106eb578460060160029054906101000a900460ff1660ff168460000160009054906101000a900460ff1660ff1611156106b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a79061190b565b60405180910390fd5b83600001600081819054906101000a900460ff16809291906106d190611caf565b91906101000a81548160ff021916908360ff160217905550505b60028a141561079a578460060160039054906101000a900460ff1660ff168460000160029054906101000a900460ff1660ff16111561075f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610756906118cb565b60405180910390fd5b83600001600281819054906101000a900460ff168092919061078090611caf565b91906101000a81548160ff021916908360ff160217905550505b60038a1415610849578460060160019054906101000a900460ff1660ff168460000160049054906101000a900460ff1660ff16111561080e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108059061194b565b60405180910390fd5b83600001600481819054906101000a900460ff168092919061082f90611caf565b91906101000a81548160ff021916908360ff160217905550505b60048a14156108f8578460060160009054906101000a900460ff1660ff168460000160059054906101000a900460ff1660ff1611156108bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b49061188b565b60405180910390fd5b83600001600581819054906101000a900460ff16809291906108de90611caf565b91906101000a81548160ff021916908360ff160217905550505b60058a14156109a7578460060160009054906101000a900460ff1660ff168460000160069054906101000a900460ff1660ff16111561096c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109639061188b565b60405180910390fd5b83600001600681819054906101000a900460ff168092919061098d90611caf565b91906101000a81548160ff021916908360ff160217905550505b60068a1415610a56578460060160039054906101000a900460ff1660ff168460000160019054906101000a900460ff1660ff161115610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a12906118cb565b60405180910390fd5b83600001600181819054906101000a900460ff1680929190610a3c90611caf565b91906101000a81548160ff021916908360ff160217905550505b60078a1415610b05578460060160019054906101000a900460ff1660ff168460000160079054906101000a900460ff1660ff161115610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac19061194b565b60405180910390fd5b83600001600781819054906101000a900460ff1680929190610aeb90611caf565b91906101000a81548160ff021916908360ff160217905550505b60088a1415610bb4578460060160029054906101000a900460ff1660ff168460000160089054906101000a900460ff1660ff161115610b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b709061190b565b60405180910390fd5b83600001600881819054906101000a900460ff1680929190610b9a90611caf565b91906101000a81548160ff021916908360ff160217905550505b60005b8360010180549050811015610dab57836001018181548110610c02577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff168a8281518110610c67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114610caf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca6906118eb565b60405180910390fd5b836002018181548110610ceb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16898281518110610d50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114610d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8f9061192b565b60405180910390fd5b8080610da390611c66565b915050610bb7565b506000600c0160008b8152602001908152602001600020600401600c9054906101000a900460030b8260000160108282829054906101000a900460030b610df29190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600c0160008b815260200190815260200160002060040160109054906101000a900460030b82600001600c8282829054906101000a900460030b610e599190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600c0160008b815260200190815260200160002060040160049054906101000a900460030b8260000160048282829054906101000a900460030b610ec09190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600c0160008b815260200190815260200160002060040160009054906101000a900460030b8260000160008282829054906101000a900460030b610f279190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055506000600c0160008b815260200190815260200160002060040160089054906101000a900460030b8260000160088282829054906101000a900460030b610f8e9190611af2565b92506101000a81548163ffffffff021916908360030b63ffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663ddb6f7f1338b8b6040518463ffffffff1660e01b8152600401610fec9392919061171a565b600060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050507f23b0dc18349873b0095e82b115dd5e0b7bcde4ed3ba5505395d4f3304da15c3a338c8c6040516110519392919061175f565b60405180910390a15050505050505050505050565b6060806060600080600c01600086815260200190815260200160002090508060010181600201826003018280548060200260200160405190810160405280929190818152602001828054801561110757602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116110ca5790505b505050505092508180548060200260200160405190810160405280929190818152602001828054801561118557602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116111485790505b505050505091508080548060200260200160405190810160405280929190818152602001828054801561120357602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116111c65790505b50505050509050935093509350509193909250565b600080600080600080600080600080600060020160008c815260200190815260200160002090508060000160039054906101000a900460ff168160000160009054906101000a900460ff168260000160029054906101000a900460ff168360000160049054906101000a900460ff168460000160059054906101000a900460ff168560000160069054906101000a900460ff168660000160019054906101000a900460ff168760000160079054906101000a900460ff168860000160089054906101000a900460ff16995099509950995099509950995099509950509193959799909294969850565b600061131461130f84611a38565b611a13565b9050808382526020820190508285602086028201111561133357600080fd5b60005b85811015611363578161134988826113ac565b845260208401935060208301925050600181019050611336565b5050509392505050565b60008151905061137c81611e96565b92915050565b600082601f83011261139357600080fd5b81356113a3848260208601611301565b91505092915050565b6000813590506113bb81611ead565b92915050565b6000602082840312156113d357600080fd5b60006113e18482850161136d565b91505092915050565b6000602082840312156113fc57600080fd5b600061140a848285016113ac565b91505092915050565b6000806000806080858703121561142957600080fd5b6000611437878288016113ac565b9450506020611448878288016113ac565b935050604085013567ffffffffffffffff81111561146557600080fd5b61147187828801611382565b925050606085013567ffffffffffffffff81111561148e57600080fd5b61149a87828801611382565b91505092959194509250565b60006114b283836116de565b60208301905092915050565b60006114ca83836116fc565b60208301905092915050565b6114df81611b6a565b82525050565b60006114f082611a84565b6114fa8185611abf565b935061150583611a64565b8060005b8381101561153657815161151d88826114a6565b975061152883611aa5565b925050600181019050611509565b5085935050505092915050565b600061154e82611a8f565b6115588185611ad0565b935061156383611a74565b8060005b8381101561159457815161157b88826114be565b975061158683611ab2565b925050600181019050611567565b5085935050505092915050565b6115aa81611b7c565b82525050565b60006115bb82611a9a565b6115c58185611ae1565b93506115d5818560208601611bd0565b6115de81611d66565b840191505092915050565b60006115f6600983611ae1565b915061160182611d77565b602082019050919050565b6000611619601983611ae1565b915061162482611da0565b602082019050919050565b600061163c600a83611ae1565b915061164782611dc9565b602082019050919050565b600061165f601283611ae1565b915061166a82611df2565b602082019050919050565b6000611682600983611ae1565b915061168d82611e1b565b602082019050919050565b60006116a5601a83611ae1565b91506116b082611e44565b602082019050919050565b60006116c8600b83611ae1565b91506116d382611e6d565b602082019050919050565b6116e781611ba9565b82525050565b6116f681611ba9565b82525050565b61170581611bb3565b82525050565b61171481611bc3565b82525050565b600060608201905061172f60008301866114d6565b818103602083015261174181856114e5565b9050818103604083015261175581846114e5565b9050949350505050565b600060608201905061177460008301866114d6565b61178160208301856116ed565b61178e60408301846116ed565b949350505050565b600060608201905081810360008301526117b08186611543565b905081810360208301526117c48185611543565b905081810360408301526117d88184611543565b9050949350505050565b60006101208201905081810360008301526117fd818c6115b0565b90508181036020830152611811818b611543565b90508181036040830152611825818a611543565b905081810360608301526118398189611543565b905061184860808301886115a1565b61185560a08301876115a1565b61186260c08301866115a1565b61186f60e08301856115a1565b61187d6101008301846115a1565b9a9950505050505050505050565b600060208201905081810360008301526118a4816115e9565b9050919050565b600060208201905081810360008301526118c48161160c565b9050919050565b600060208201905081810360008301526118e48161162f565b9050919050565b6000602082019050818103600083015261190481611652565b9050919050565b6000602082019050818103600083015261192481611675565b9050919050565b6000602082019050818103600083015261194481611698565b9050919050565b60006020820190508181036000830152611964816116bb565b9050919050565b600060208201905061198060008301846116ed565b92915050565b60006101208201905061199c600083018c61170b565b6119a9602083018b61170b565b6119b6604083018a61170b565b6119c3606083018961170b565b6119d0608083018861170b565b6119dd60a083018761170b565b6119ea60c083018661170b565b6119f760e083018561170b565b611a0561010083018461170b565b9a9950505050505050505050565b6000611a1d611a2e565b9050611a298282611c35565b919050565b6000604051905090565b600067ffffffffffffffff821115611a5357611a52611d37565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611afd82611b7c565b9150611b0883611b7c565b925081637fffffff03831360008312151615611b2757611b26611cd9565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000038312600083121615611b5f57611b5e611cd9565b5b828201905092915050565b6000611b7582611b89565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b83811015611bee578082015181840152602081019050611bd3565b83811115611bfd576000848401525b50505050565b60006002820490506001821680611c1b57607f821691505b60208210811415611c2f57611c2e611d08565b5b50919050565b611c3e82611d66565b810181811067ffffffffffffffff82111715611c5d57611c5c611d37565b5b80604052505050565b6000611c7182611ba9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ca457611ca3611cd9565b5b600182019050919050565b6000611cba82611bc3565b915060ff821415611cce57611ccd611cd9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e4f5f4349544945530000000000000000000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f4e4f5f524547494f4e5300000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f757263650000000000000000000000000000600082015250565b7f4e4f5f5249564552530000000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f75726365732076616c756573000000000000600082015250565b7f4e4f5f484152424f555253000000000000000000000000000000000000000000600082015250565b611e9f81611b6a565b8114611eaa57600080fd5b50565b611eb681611ba9565b8114611ec157600080fd5b5056fea264697066735822122082526a0e5eec66512d1cb4106d39a09445bb91f9ab3903fe4db8db41a6e6de5a64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1703,
        "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)707_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)809_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)809_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)818_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)818_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)821_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)821_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmBuildings)787_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmBuildings)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmBuildings)787_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)756_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)756_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmStatistics)725_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmStatistics)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmStatistics)725_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)763_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)763_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)714_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)714_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)834_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)834_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)830_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)830_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)707_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 653,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)756_storage)"
          },
          {
            "astId": 658,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmStatistics",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(RealmStatistics)725_storage)"
          },
          {
            "astId": 663,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(RealmBuildings)787_storage)"
          },
          {
            "astId": 665,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "baseProductionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 667,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "maxProductionRate",
            "offset": 1,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 669,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "sRealms",
            "offset": 2,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 671,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realms",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 673,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 675,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resources",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 677,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 679,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "lords",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 684,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)821_storage)"
          },
          {
            "astId": 689,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)830_storage)"
          },
          {
            "astId": 694,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)818_storage)"
          },
          {
            "astId": 699,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)809_storage)"
          },
          {
            "astId": 704,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_struct(TheAges)714_storage)"
          },
          {
            "astId": 706,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(BuildingCosts)809_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 789,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 792,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 795,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 798,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 800,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 802,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 804,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 806,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 808,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)818_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 812,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 817,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)809_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LevelProduction)821_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmBuildings)787_storage": {
        "encoding": "inplace",
        "label": "struct RealmBuildings",
        "members": [
          {
            "astId": 770,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "aquaducts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 772,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "temples",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 774,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "castles",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 776,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "markets",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 778,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ports",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 780,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "barracks",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 782,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "farms",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 784,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "shipyard",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 786,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "fishingVillage",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmInfo)756_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 727,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 729,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 731,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 733,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 735,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 738,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 740,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 742,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 744,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 746,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 748,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 750,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 755,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)763_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RealmStatistics)725_storage": {
        "encoding": "inplace",
        "label": "struct RealmStatistics",
        "members": [
          {
            "astId": 716,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmDefence",
            "offset": 0,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 718,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmOffence",
            "offset": 4,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 720,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "realmMagic",
            "offset": 8,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 722,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "foodSupply",
            "offset": 12,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 724,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "population",
            "offset": 16,
            "slot": "0",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ResourceInfo)763_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 758,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 760,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 762,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)714_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 709,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 711,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 713,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UpgradeCostLevels)834_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 833,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)830_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 824,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 829,
            "contract": "contracts/settling/facets/TraitConstructionFacet.sol:TraitConstructionFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)834_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}