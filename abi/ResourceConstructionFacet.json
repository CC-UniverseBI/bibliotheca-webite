{
  "address": "0xF841514865dC2757e271EB2c649D15DEe33AfF10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_resourceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_level",
          "type": "uint256"
        }
      ],
      "name": "getCosts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_resourceId",
          "type": "uint256"
        }
      ],
      "name": "getProductionDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initResourceValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_resourceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "resources",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "resourceValues",
          "type": "uint256[]"
        }
      ],
      "name": "upgradeResource",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff5579e3b73003304556ebce23d1f7b42303a85d4b7f818c1da659cda02439bb",
  "receipt": {
    "to": null,
    "from": "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
    "contractAddress": "0xF841514865dC2757e271EB2c649D15DEe33AfF10",
    "transactionIndex": 0,
    "gasUsed": "41813284",
    "logsBloom": "0x
    "blockHash": "0xc94e127ae17356e2206275913a0b61dd3487f28e405b64b1fd4e0eb97530532f",
    "transactionHash": "0xff5579e3b73003304556ebce23d1f7b42303a85d4b7f818c1da659cda02439bb",
    "logs": [],
    "blockNumber": 5391832,
    "cumulativeGasUsed": "32422384",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6ff06cbd8dadafec7118428c79511e38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_resourceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getCosts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resourceId\",\"type\":\"uint256\"}],\"name\":\"getProductionDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initResourceValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resourceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resources\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceValues\",\"type\":\"uint256[]\"}],\"name\":\"upgradeResource\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ResourceConstructionFacet.sol\":\"ResourceConstructionFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"contracts/facets/ResourceConstructionFacet.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/ResourcesIERC1155MintBurn.sol\\\";\\n\\n//TODO: implement IERCReveiver Calls\\n//TODO: Add ownly sRealm owner\\ncontract ResourceConstructionFacet {\\n    AppStorage internal s;\\n\\n    // TODO: add security to this\\n    function initResourceValues() public {\\n        // output levels\\n        s.levelProduction[1].output = 10;\\n        s.levelProduction[2].output = 14;\\n        s.levelProduction[3].output = 16;\\n        s.levelProduction[4].output = 18;\\n        s.levelProduction[5].output = 20;\\n\\n        // resource ids\\n        s.upgradeCosts[1].resourceIds = [1, 2, 3];\\n        s.upgradeCosts[2].resourceIds = [1, 2, 3];\\n        s.upgradeCosts[3].resourceIds = [1, 2, 3];\\n        s.upgradeCosts[4].resourceIds = [1, 2, 3];\\n\\n        // value costs\\n        s.upgradeCosts[1].upgradeCostLevels[1].value = [1, 1, 1];\\n        s.upgradeCosts[1].upgradeCostLevels[2].value = [2, 2, 2];\\n        s.upgradeCosts[1].upgradeCostLevels[3].value = [3, 3, 3];\\n        s.upgradeCosts[1].upgradeCostLevels[4].value = [4, 4, 4];\\n        s.upgradeCosts[1].upgradeCostLevels[5].value = [5, 5, 5];\\n\\n        s.upgradeCosts[2].upgradeCostLevels[1].value = [1, 1, 1];\\n        s.upgradeCosts[2].upgradeCostLevels[2].value = [2, 2, 2];\\n        s.upgradeCosts[2].upgradeCostLevels[3].value = [3, 3, 3];\\n        s.upgradeCosts[2].upgradeCostLevels[4].value = [4, 4, 4];\\n        s.upgradeCosts[2].upgradeCostLevels[5].value = [5, 5, 5];\\n    }\\n\\n    // TODO: Check resource is actually on the Realm\\n    // TODO: Check owner of Realm\\n    function upgradeResource(\\n        uint256 _realmTokenId,\\n        uint256 _resourceId,\\n        uint256[] memory resources,\\n        uint256[] memory resourceValues\\n    ) external payable {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmTokenId];\\n        UpgradeCosts storage upgradeCosts = s.upgradeCosts[_resourceId];\\n\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n\\n        // get level\\n\\n        for (uint256 i = 0; i < upgradeCosts.resourceIds.length; i++) {\\n            require(\\n                resources[i] == upgradeCosts.resourceIds[i],\\n                \\\"Incorrect resource\\\"\\n            );\\n            require(\\n                resourceValues[i] ==\\n                    upgradeCosts\\n                        .upgradeCostLevels[\\n                            realmInfo.resourceInfo[_resourceId].level\\n                        ]\\n                        .value[i],\\n                \\\"Incorrect resources values\\\"\\n            );\\n        }\\n\\n        resourceTokens.productionBuildingsBurn(\\n            msg.sender,\\n            resources,\\n            resourceValues\\n        );\\n\\n        realmInfo.resourceInfo[_resourceId].level++;\\n\\n        LevelProduction storage levelProduction = s.levelProduction[\\n            realmInfo.resourceInfo[_resourceId].level\\n        ];\\n        realmInfo.resourceInfo[_resourceId].production = levelProduction.output;\\n\\n        // TODO: Emit burn event\\n    }\\n\\n    function getProductionDetails(uint256 _tokenId, uint256 _resourceId)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        return (\\n            realmInfo.resourceInfo[_resourceId].level,\\n            realmInfo.resourceInfo[_resourceId].production\\n        );\\n    }\\n\\n    //TODO: Reverse return so resourceIds are first\\n    function getCosts(uint256 _resourceId, uint256 _level)\\n        public\\n        view\\n        returns (uint256[] memory, uint8[] memory)\\n    {\\n        UpgradeCosts storage upgradeCosts = s.upgradeCosts[_resourceId];\\n\\n        return (\\n            upgradeCosts.upgradeCostLevels[_level].value,\\n            upgradeCosts.resourceIds\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9037dbe6cbc1cd0733a6e4b86943a02dcad5f952a188249c7bb8e7b19572d0c4\"},\"contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        uint256[] memory _tresuryAmounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function productionBuildingsBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb4589dc57eb5a51a1310bafc3fe0f9c0eaf696c7116fc65ff67a69d575532430\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    mapping(uint256 => RealmStatistics) realmStatistics;\\n    mapping(uint256 => RealmBuildings) realmBuildings;\\n    uint8 baseProductionRate;\\n    uint8 maxProductionRate;\\n    address sRealms;\\n    address realms;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct RealmStatistics {\\n    uint8 realmDefence;\\n    uint8 realmOffence;\\n    uint8 realmMagic;\\n    uint8 foodSupply;\\n}\\n\\nstruct RealmInfo {\\n    uint256 tokenId;\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint256[] resourceIds;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\nstruct StatsInfo {\\n    uint8 id;\\n    uint8 value; // level of statistic\\n}\\n\\nstruct RealmBuildings {\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n}\\nstruct BuildingCosts {\\n    string name;\\n    uint8[] resourceIds;\\n    uint8[] resourceValues;\\n    uint8[] requirements;\\n}\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\nlibrary UintKey {\\n    // Resources and wonders\\n    uint256 public constant WOOD = 1;\\n    uint256 public constant STONE = 2;\\n    uint256 public constant COAL = 3;\\n    uint256 public constant COPPER = 4;\\n    uint256 public constant OBSIDIAN = 5;\\n    uint256 public constant SILVER = 6;\\n    uint256 public constant IRONWOOD = 7;\\n    uint256 public constant COLD_IRON = 8;\\n    uint256 public constant GOLD = 9;\\n    uint256 public constant HARTWOOD = 10;\\n    uint256 public constant DIAMONDS = 11;\\n    uint256 public constant SAPPHIRE = 12;\\n    uint256 public constant DEEP_CRYSTAL = 13;\\n    uint256 public constant RUBY = 14;\\n    uint256 public constant IGNIUM = 15;\\n    uint256 public constant ETHEREAL_SILICA = 16;\\n    uint256 public constant TRUE_ICE = 17;\\n    uint256 public constant TWILIGHT_QUARTZ = 18;\\n    uint256 public constant ALCHEMICAL_SILVER = 19;\\n    uint256 public constant ADAMANTINE = 20;\\n    uint256 public constant MITHRAL = 21;\\n    uint256 public constant DRAGONHIDE = 22;\\n    //will add the rest of the wonders if library works as expected on test\\n    uint256 public constant CATHEDRAL_OF_AGONY = 23;\\n}\\n\",\"keccak256\":\"0xb30deaff61ab7453969f0a86b150b3d31a9241fd16f55ef3fa00e6498e90897f\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)1127_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)1198_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)1198_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1207_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)1207_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)1210_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)1210_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmBuildings)1186_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmBuildings)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmBuildings)1186_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)1163_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)1163_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmStatistics)1136_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmStatistics)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmStatistics)1136_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)1170_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)1170_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1223_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)1223_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)1219_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)1219_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)1127_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 1082,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)1163_storage)"
          },
          {
            "astId": 1087,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "realmStatistics",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(RealmStatistics)1136_storage)"
          },
          {
            "astId": 1092,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(RealmBuildings)1186_storage)"
          },
          {
            "astId": 1094,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "baseProductionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 1096,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "maxProductionRate",
            "offset": 1,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 1098,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "sRealms",
            "offset": 2,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1100,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "realms",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1102,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1104,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "resources",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1106,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1111,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)1210_storage)"
          },
          {
            "astId": 1116,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)1219_storage)"
          },
          {
            "astId": 1121,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1207_storage)"
          },
          {
            "astId": 1126,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1198_storage)"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(BuildingCosts)1198_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 1188,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1191,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1194,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1197,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint8)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BuildingUpgradeCosts)1207_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 1201,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1206,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1198_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LevelProduction)1210_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 1209,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmBuildings)1186_storage": {
        "encoding": "inplace",
        "label": "struct RealmBuildings",
        "members": [
          {
            "astId": 1177,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "aquaducts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1179,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "temples",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1181,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "castles",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1183,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "markets",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1185,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "ports",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmInfo)1163_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 1138,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1140,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1142,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1144,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1146,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "cities",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1148,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1150,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1152,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "regions",
            "offset": 3,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1154,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1157,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1162,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)1170_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RealmStatistics)1136_storage": {
        "encoding": "inplace",
        "label": "struct RealmStatistics",
        "members": [
          {
            "astId": 1129,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "realmDefence",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1131,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "realmOffence",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1133,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "realmMagic",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1135,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "foodSupply",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ResourceInfo)1170_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 1165,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1167,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1169,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCostLevels)1223_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 1222,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)1219_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 1213,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1218,
            "contract": "contracts/facets/ResourceConstructionFacet.sol:ResourceConstructionFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1223_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}