{
  "address": "0xf88F0a2d6b7fCB93E817A963f7AD3356289AcBa8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attackingRealm",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defendingRealm",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "attackerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "defenderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raidingUnitsLost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defendingUnitsLost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "resourcesIdsPillaged",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "resourcesValuesPillaged",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitsCaptured",
          "type": "uint256"
        }
      ],
      "name": "RaidResult",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "pickWinner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_attackingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defendingTokenId",
          "type": "uint256"
        }
      ],
      "name": "raidRealm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3d56612bfcf64bda1f5f3f0dbd5e7515bf60ce8d7b0e0e6b88fe997c144db5e",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0xf88F0a2d6b7fCB93E817A963f7AD3356289AcBa8",
    "transactionIndex": 0,
    "gasUsed": "64460745",
    "logsBloom": "0x
    "blockHash": "0x628a53cd11b54aee4cae924c4802a94180e80fe3d20e2c59f55c55ad7f0240b4",
    "transactionHash": "0xf3d56612bfcf64bda1f5f3f0dbd5e7515bf60ce8d7b0e0e6b88fe997c144db5e",
    "logs": [],
    "blockNumber": 6098621,
    "cumulativeGasUsed": "50296885",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "15d9541d3948a8600a85b17ecdb11584",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attackingRealm\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defendingRealm\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"attackerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raidingUnitsLost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defendingUnitsLost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resourcesIdsPillaged\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"resourcesValuesPillaged\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitsCaptured\",\"type\":\"uint256\"}],\"name\":\"RaidResult\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_attackingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defendingTokenId\",\"type\":\"uint256\"}],\"name\":\"raidRealm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/RaidingFacet.sol\":\"RaidingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/RaidingFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"../libraries/ResourceUtils.sol\\\";\\n\\n//____|#|_|#|____RAIDING FACET____|#|_|#|____//\\n// Allows one Realm to raid another\\n// Gives outcome based of Realm statistics plus a diceroll\\n// Burns some resources\\n// If raid is succesful buildings are Razed and vault is plundered\\n\\ncontract RaidingFacet is ResourceUtils {\\n    event RaidResult(\\n        uint256 attackingRealm,\\n        uint256 defendingRealm,\\n        address attackerAddress,\\n        address defenderAddress,\\n        uint256 raidingUnitsLost,\\n        uint256 defendingUnitsLost,\\n        uint256[] resourcesIdsPillaged,\\n        uint256[] resourcesValuesPillaged,\\n        uint256 unitsCaptured\\n    );\\n\\n    function raidRealm(uint256 _attackingTokenId, uint256 _defendingTokenId)\\n        public\\n        checkSRealmOwner(_attackingTokenId)\\n    {\\n        bool raidSuccessful;\\n        uint256 raidSuccessRatio;\\n        uint32 unitsCaptured;\\n\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        address defendersAddress = sRealmstoken.ownerOf(_defendingTokenId);\\n        require(msg.sender != defendersAddress, \\\"DONT_KILL_YOUR_PEOPLE\\\");\\n\\n        (raidSuccessful, raidSuccessRatio, unitsCaptured) = _calculateOutcome(\\n            _attackingTokenId,\\n            _defendingTokenId\\n        );\\n        RealmInfo storage defendingRealmInfo = s.realmInfo[_defendingTokenId];\\n        RealmInfo storage attackingRealmInfo = s.realmInfo[_attackingTokenId];\\n        require(\\n            attackingRealmInfo.orderOf != defendingRealmInfo.orderOf,\\n            \\\"CANT_ATTACK_SAME_ORDER\\\"\\n        );\\n        if (raidSuccessful) {\\n            // calculate pillaged resource values\\n            uint256[] memory dRealmResourceIds = new uint256[](\\n                defendingRealmInfo.resourceIds.length\\n            );\\n            uint256[] memory dRealmResourceValues = new uint256[](\\n                defendingRealmInfo.resourceIds.length\\n            );\\n\\n            (dRealmResourceIds, dRealmResourceValues) = _pillagedResources(\\n                _defendingTokenId,\\n                25,\\n                defendingRealmInfo\\n            ); // currently set at 50 TODO: be within a band limit and Raze some buildings\\n\\n            _mintResources(msg.sender, dRealmResourceIds, dRealmResourceValues);\\n            emit RaidResult(\\n                _attackingTokenId,\\n                _defendingTokenId,\\n                msg.sender,\\n                defendersAddress,\\n                0, // attacking units lost\\n                0, //defending units lost\\n                dRealmResourceIds, // resource ids\\n                dRealmResourceValues, // resource values captured\\n                0 // units captured\\n            );\\n        } else {\\n            emit RaidResult(\\n                _attackingTokenId,\\n                _defendingTokenId,\\n                msg.sender,\\n                defendersAddress,\\n                unitsCaptured, // attacking units lost\\n                0, //defending units lost\\n                new uint256[](0), // resource ids\\n                new uint256[](0), // resource values captured\\n                unitsCaptured // units captured\\n            );\\n        }\\n    }\\n\\n    function _calculateOutcome(\\n        uint256 _attackingTokenId,\\n        uint256 _defendingTokenId\\n    )\\n        internal\\n        returns (\\n            bool,\\n            uint256,\\n            uint32\\n        )\\n    {\\n        // Attacking Realm\\n        RaidingArmy storage raidingArmy = s.raidingArmy[_attackingTokenId];\\n\\n        require(\\n            raidingArmy.knightsTrained + raidingArmy.footSoldiersTrained > 0,\\n            \\\"NO_UNITS\\\"\\n        );\\n\\n        RaidingArmy storage defendingRaidingArmy = s.raidingArmy[\\n            _defendingTokenId\\n        ];\\n        DefendingArmy storage defendingArmy = s.defendingArmy[\\n            _defendingTokenId\\n        ];\\n        RealmInfo storage defendingRealm = s.realmInfo[_defendingTokenId];\\n\\n        uint32 knights;\\n        uint32 footSoldiers;\\n        uint32 trebuchets;\\n        uint32 scorpions;\\n\\n        (knights, footSoldiers) = _finishedRaidingUnits(raidingArmy);\\n\\n        (trebuchets, scorpions) = _finishedDefendingUnits(defendingArmy);\\n\\n        // Defending Realm\\n        uint32 defendersChance = (((uint32(defendingRealm.realmDefence) +\\n            (300 * trebuchets) +\\n            (100 * scorpions)) * 100) /\\n            (uint32(defendingRealm.realmDefence) +\\n                (300 * trebuchets) +\\n                (100 * scorpions) +\\n                (knights * 250) +\\n                (footSoldiers * 100)));\\n\\n        if (_pickWinner() > defendersChance) {\\n            return (true, defendersChance, 0);\\n        } else {\\n            raidingArmy.knightsTrained -= knights / 2;\\n            raidingArmy.footSoldiersTrained -= footSoldiers / 2;\\n            defendingRaidingArmy.knightsTrained += knights / 4;\\n            defendingRaidingArmy.footSoldiersTrained += footSoldiers / 4;\\n            return (false, defendersChance, (knights / 2) + (footSoldiers / 2)); // total units captured\\n        }\\n    }\\n\\n    function _totalUnits(\\n        uint32 _trained,\\n        uint32 _slayed,\\n        uint32 _unfinished\\n    ) private pure returns (uint32) {\\n        return (_trained - _slayed - _unfinished);\\n    }\\n\\n    function _finishedRaidingUnits(RaidingArmy storage raidingArmy)\\n        private\\n        view\\n        returns (uint32, uint32)\\n    {\\n        uint32 unfinishedKnights;\\n        uint32 unfinishedFootsoldiers;\\n        for (\\n            uint32 i = raidingArmy.knightsTrained;\\n            i < raidingArmy.knightsTrained - raidingArmy.knightsSlayed;\\n            i--\\n        ) {\\n            if (raidingArmy.knights[i].unitFinished < block.timestamp) {\\n                break;\\n            } else {\\n                unfinishedKnights++;\\n            }\\n        }\\n\\n        for (\\n            uint32 i = raidingArmy.footSoldiersTrained;\\n            i <\\n            raidingArmy.footSoldiersTrained - raidingArmy.footSoldiersSlayed;\\n            i--\\n        ) {\\n            if (raidingArmy.footSoldiers[i].unitFinished < block.timestamp) {\\n                break;\\n            } else {\\n                unfinishedFootsoldiers++;\\n            }\\n        }\\n        return (\\n            _totalUnits(\\n                raidingArmy.knightsTrained,\\n                raidingArmy.knightsSlayed,\\n                unfinishedKnights\\n            ),\\n            _totalUnits(\\n                raidingArmy.footSoldiersTrained,\\n                raidingArmy.footSoldiersSlayed,\\n                unfinishedFootsoldiers\\n            )\\n        );\\n    }\\n\\n    function _finishedDefendingUnits(DefendingArmy storage defendingArmy)\\n        private\\n        view\\n        returns (uint32, uint32)\\n    {\\n        uint32 unfinishedTrebuchets;\\n        uint32 unfinishedScorpions;\\n\\n        for (\\n            uint32 i = defendingArmy.trebuchetsTrained;\\n            i <\\n            defendingArmy.trebuchetsTrained - defendingArmy.trebuchetsSlayed;\\n            i--\\n        ) {\\n            if (defendingArmy.trebuchets[i].unitFinished < block.timestamp) {\\n                break;\\n            } else {\\n                unfinishedTrebuchets++;\\n            }\\n        }\\n\\n        for (\\n            uint32 i = defendingArmy.scorpionsTrained;\\n            i < defendingArmy.scorpionsTrained - defendingArmy.scorpionsSlayed;\\n            i--\\n        ) {\\n            if (defendingArmy.scorpions[i].unitFinished < block.timestamp) {\\n                break;\\n            } else {\\n                unfinishedScorpions++;\\n            }\\n        }\\n        return (\\n            _totalUnits(\\n                defendingArmy.trebuchetsTrained,\\n                defendingArmy.trebuchetsSlayed,\\n                unfinishedTrebuchets\\n            ),\\n            _totalUnits(\\n                defendingArmy.scorpionsTrained,\\n                defendingArmy.scorpionsSlayed,\\n                unfinishedScorpions\\n            )\\n        );\\n    }\\n\\n    function _pickWinner() private view returns (uint256) {\\n        return _random() % 100;\\n    }\\n\\n    function pickWinner() public view returns (uint256) {\\n        return _pickWinner();\\n    }\\n\\n    function _random() private view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.difficulty,\\n                        block.timestamp,\\n                        uint8(100)\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _pillagedResources(\\n        uint256 _tokenId,\\n        uint256 _percentage,\\n        RealmInfo storage realmInfo\\n    )\\n        private\\n        returns (\\n            uint256[] memory _ids,\\n            uint256[] memory _realmsResourcesOutputs\\n        )\\n    {\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        _realmsResourcesOutputs = new uint256[](realmInfo.resourceIds.length);\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        uint256 total = _getAvailableVaultResources(\\n            realmInfo.vestedTimeUpdatedAt\\n        );\\n        uint256 happiness = _getHappiness(_tokenId);\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            _realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * _percentage) / 100) *\\n                    happiness) /\\n                100; // replace with resourcesAvailable\\n        }\\n\\n        realmInfo.lastUpdateAt = _returnPillagedTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt),\\n            _percentage\\n        );\\n\\n        realmInfo.vestedTimeUpdatedAt = _returnPillagedTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt),\\n            _percentage\\n        );\\n\\n        return (realmInfo.resourceIds, _realmsResourcesOutputs);\\n    }\\n\\n    function _returnPillagedTime(\\n        uint256 _lastUpdate,\\n        uint256 _resourcesAvailable,\\n        uint256 _percentage\\n    ) internal pure returns (uint256) {\\n        return\\n            _lastUpdate + ((_resourcesAvailable * 1 hours) * _percentage) / 100;\\n    }\\n\\n    function _getAvailableVaultResources(uint256 _vestedTimeUpdatedAt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - _vestedTimeUpdatedAt) / (1 hours);\\n    }\\n}\\n\",\"keccak256\":\"0x6567615c9583a30128cf9b57fdbb102d74145c823934179d6abc57eb0e1bbefa\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    address sRealms;\\n    address realms;\\n    address realmsStorage;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n    mapping(uint256 => Raiding) raiding;\\n    mapping(uint256 => RaidingArmy) raidingArmy;\\n    mapping(uint256 => DefendingArmy) defendingArmy;\\n    mapping(uint256 => ArmyUnit) armyUnit;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\nstruct Raiding {\\n    uint256 coolDownTime;\\n    uint256 totalRaids;\\n    uint256 successfulRaids;\\n}\\n\\nstruct RaidingArmy {\\n    uint32 knightsTrained;\\n    uint32 knightsSlayed;\\n    uint32 footSoldiersTrained;\\n    uint32 footSoldiersSlayed;\\n    mapping(uint256 => TrainedArmyUnit) knights;\\n    mapping(uint256 => TrainedArmyUnit) footSoldiers;\\n}\\n\\nstruct DefendingArmy {\\n    uint32 trebuchetsTrained;\\n    uint32 trebuchetsSlayed;\\n    uint32 scorpionsTrained;\\n    uint32 scorpionsSlayed;\\n    mapping(uint256 => TrainedArmyUnit) trebuchets;\\n    mapping(uint256 => TrainedArmyUnit) scorpions;\\n}\\n\\nstruct TrainedArmyUnit {\\n    bool destroyed;\\n    uint256 unitFinished;\\n}\\n\\nstruct ArmyUnit {\\n    string name;\\n    uint256 timeToTrain;\\n    uint32 offence;\\n    uint32 defence;\\n    uint256[] resourceIds;\\n    uint256[] resourceValues;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xdf4eaff003a64be8c2fe375e99c6b5464c22c235404aaa429c2917a21babbac4\"},\"contracts/settling/libraries/Modifiers.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6a04f22a363dcf5c72fd36e2eb64c03f7bbed1d0d098311e2727c992890b4718\"},\"contracts/settling/libraries/ResourceUtils.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/Modifiers.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract ResourceUtils is Modifiers {\\n    function _mintResources(\\n        address _minter,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.resourceMinting(\\n            _minter,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchTransferResources(\\n        address _from,\\n        address _to,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.safeBatchTransferFrom(\\n            _from,\\n            _to,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchBurnResources(\\n        address _from,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.batchBurnResources(_from, _resourceIds, _resourceValues);\\n    }\\n\\n    function _getHappiness(uint256 _realmId) internal view returns (uint32) {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmId];\\n        int32 food;\\n\\n        if (realmInfo.foodSupply < 0) {\\n            food = ((100 * realmInfo.foodSupply) * 20) / 1000;\\n        } else {\\n            food = 0;\\n        }\\n        int32 happiness = 100 +\\n            ((100 * (realmInfo.population * 4)) / 1000) +\\n            food;\\n\\n        return uint32(happiness);\\n    }\\n\\n    function _returnTime(uint256 _lastUpdate, uint256 _resourcesAvailable)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _lastUpdate + _resourcesAvailable * 1 hours;\\n    }\\n\\n    function _getAvailableResources(uint256 _lastUpdate)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - _lastUpdate) / 1 hours;\\n    }\\n\\n    function _getAvailableVestedResources(uint256 _vestedTimeUpdatedAt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 vested;\\n        vested = (block.timestamp - _vestedTimeUpdatedAt) / (1 hours);\\n        if (vested > 14) {\\n            return vested;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194b53dbb1e3ab2086de4432fef34c728b0f47d3c66d275594da87a74a2d147c\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchBurnResources(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x827b22a96beba7f58adf4ea7cdbc774d885adb2cd76831688b78884778f39dc0\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f27806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630f3c92f51461003b5780635d495aea14610057575b600080fd5b610055600480360381019061005091906113c6565b610075565b005b61005f61060e565b60405161006c91906116b5565b60405180910390f35b8160008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016100d891906116b5565b60206040518083038186803b1580156100f057600080fd5b505afa158015610104573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610128919061139d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90611655565b60405180910390fd5b600080600080600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b81526004016101fe91906116b5565b60206040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024e919061139d565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611695565b60405180910390fd5b6102c9898961061d565b80955081965082975050505060008060000160008a8152602001908152602001600020905060008060000160008c815260200190815260200160002090508160060160059054906101000a900460ff1660ff168160060160059054906101000a900460ff1660ff161415610372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036990611635565b60405180910390fd5b86156104db576000826005018054905067ffffffffffffffff8111156103c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103ef5781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff81111561043b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104695781602001602082028036833780820191505090505b5090506104788c6019866109a6565b809250819350505061048b338383610d2a565b7f6678e7114f44f87317726cb728842e4eef1b40c5b2ece628d335360c8c6e52588d8d3388600080888860006040516104cc999897969594939291906116d0565b60405180910390a15050610601565b7f6678e7114f44f87317726cb728842e4eef1b40c5b2ece628d335360c8c6e52588b8b33868960008067ffffffffffffffff811115610543577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105715781602001602082028036833780820191505090505b50600067ffffffffffffffff8111156105b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105e15781602001602082028036833780820191505090505b508d6040516105f89998979695949392919061176b565b60405180910390a15b5050505050505050505050565b6000610618610dc8565b905090565b6000806000806000600f016000878152602001908152602001600020905060008160000160089054906101000a900463ffffffff168260000160009054906101000a900463ffffffff16610671919061192f565b63ffffffff16116106b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ae90611675565b60405180910390fd5b600080600f0160008781526020019081526020016000209050600080601001600088815260200190815260200160002090506000806000016000898152602001908152602001600020905060008060008061071188610de3565b809450819550505061072286610fb6565b809250819350505060006064846107399190611b6e565b60fa866107469190611b6e565b8360646107539190611b6e565b8561012c6107619190611b6e565b89600601600f9054906101000a900460030b61077d919061192f565b610787919061192f565b610791919061192f565b61079b919061192f565b60648360646107aa9190611b6e565b8561012c6107b89190611b6e565b89600601600f9054906101000a900460030b6107d4919061192f565b6107de919061192f565b6107e89190611b6e565b6107f29190611a04565b90508063ffffffff16610803610dc8565b111561082b5760018160008163ffffffff1691509b509b509b5050505050505050505061099f565b6002856108389190611a04565b8960000160008282829054906101000a900463ffffffff1661085a9190611be0565b92506101000a81548163ffffffff021916908363ffffffff1602179055506002846108859190611a04565b8960000160088282829054906101000a900463ffffffff166108a79190611be0565b92506101000a81548163ffffffff021916908363ffffffff1602179055506004856108d29190611a04565b8860000160008282829054906101000a900463ffffffff166108f4919061192f565b92506101000a81548163ffffffff021916908363ffffffff16021790555060048461091f9190611a04565b8860000160088282829054906101000a900463ffffffff16610941919061192f565b92506101000a81548163ffffffff021916908363ffffffff16021790555060008160028661096f9190611a04565b60028861097c9190611a04565b610986919061192f565b8163ffffffff1691509b509b509b505050505050505050505b9250925092565b6060806000836005018054905067ffffffffffffffff8111156109f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a205781602001602082028036833780820191505090505b509050836005018054905067ffffffffffffffff811115610a6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a985781602001602082028036833780820191505090505b50915060005b8460050180549050811015610b7457846008016000866005018381548110610aef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16828281518110610b55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610b6c90611cc8565b915050610a9e565b506000610b848560020154611189565b90506000610b91886111ab565b63ffffffff16905060005b8660050180549050811015610c7d5760648260648a86888681518110610beb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610bfd9190611b14565b610c079190611b14565b610c1191906119d3565b610c1b9190611b14565b610c2591906119d3565b858281518110610c5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610c7590611cc8565b915050610b9c565b50610c998660010154610c938860010154611283565b896112a5565b8660010181905550610cbc8660020154610cb688600201546112e0565b896112a5565b8660020181905550856005018481805480602002602001604051908101604052809291908181526020018280548015610d1457602002820191906000526020600020905b815481526020019060010190808311610d00575b5050505050915094509450505050935093915050565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638edf55bf8585856040518463ffffffff1660e01b8152600401610d90939291906115dd565b600060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b5050505050505050565b60006064610dd461131b565b610dde9190611d5a565b905090565b60008060008060008560000160009054906101000a900463ffffffff1690505b8560000160049054906101000a900463ffffffff168660000160009054906101000a900463ffffffff16610e379190611be0565b63ffffffff168163ffffffff161015610e9657428660010160008363ffffffff168152602001908152602001600020600101541015610e7557610e96565b8280610e8090611d11565b9350508080610e8e90611c9e565b915050610e03565b5060008560000160089054906101000a900463ffffffff1690505b85600001600c9054906101000a900463ffffffff168660000160089054906101000a900463ffffffff16610ee59190611be0565b63ffffffff168163ffffffff161015610f4457428660020160008363ffffffff168152602001908152602001600020600101541015610f2357610f44565b8180610f2e90611d11565b9250508080610f3c90611c9e565b915050610eb1565b50610f788560000160009054906101000a900463ffffffff168660000160049054906101000a900463ffffffff1684611351565b610fab8660000160089054906101000a900463ffffffff1687600001600c9054906101000a900463ffffffff1684611351565b935093505050915091565b60008060008060008560000160009054906101000a900463ffffffff1690505b8560000160049054906101000a900463ffffffff168660000160009054906101000a900463ffffffff1661100a9190611be0565b63ffffffff168163ffffffff16101561106957428660010160008363ffffffff16815260200190815260200160002060010154101561104857611069565b828061105390611d11565b935050808061106190611c9e565b915050610fd6565b5060008560000160089054906101000a900463ffffffff1690505b85600001600c9054906101000a900463ffffffff168660000160089054906101000a900463ffffffff166110b89190611be0565b63ffffffff168163ffffffff16101561111757428660020160008363ffffffff1681526020019081526020016000206001015410156110f657611117565b818061110190611d11565b925050808061110f90611c9e565b915050611084565b5061114b8560000160009054906101000a900463ffffffff168660000160049054906101000a900463ffffffff1684611351565b61117e8660000160089054906101000a900463ffffffff1687600001600c9054906101000a900463ffffffff1684611351565b935093505050915091565b6000610e10824261119a9190611bac565b6111a491906119d3565b9050919050565b600080600080016000848152602001908152602001600020905060008082600601601b9054906101000a900460030b60030b1215611221576103e8601483600601601b9054906101000a900460030b60646112069190611a35565b6112109190611a35565b61121a9190611969565b9050611226565b600090505b6000816103e860048560070160009054906101000a900460030b61124a9190611a35565b60646112569190611a35565b6112609190611969565b606461126c9190611861565b6112769190611861565b9050809350505050919050565b6000610e1082426112949190611bac565b61129e91906119d3565b9050919050565b6000606482610e10856112b89190611b14565b6112c29190611b14565b6112cc91906119d3565b846112d791906118d9565b90509392505050565b600080610e1083426112f29190611bac565b6112fc91906119d3565b9050600e8111156113105780915050611316565b60009150505b919050565b600044426064604051602001611333939291906115a0565b6040516020818303038152906040528051906020012060001c905090565b60008183856113609190611be0565b61136a9190611be0565b90509392505050565b60008151905061138281611ec3565b92915050565b60008135905061139781611eda565b92915050565b6000602082840312156113af57600080fd5b60006113bd84828501611373565b91505092915050565b600080604083850312156113d957600080fd5b60006113e785828601611388565b92505060206113f885828601611388565b9150509250929050565b600061140e8383611545565b60208301905092915050565b61142381611c14565b82525050565b600061143482611816565b61143e818561182e565b935061144983611806565b8060005b8381101561147a5781516114618882611402565b975061146c83611821565b92505060018101905061144d565b5085935050505092915050565b61149081611c7a565b82525050565b60006114a360028361183f565b91506114ae82611df6565b602082019050919050565b60006114c6601683611850565b91506114d182611e1f565b602082019050919050565b60006114e9601983611850565b91506114f482611e48565b602082019050919050565b600061150c600883611850565b915061151782611e71565b602082019050919050565b600061152f601583611850565b915061153a82611e9a565b602082019050919050565b61154e81611c53565b82525050565b61155d81611c53565b82525050565b61157461156f82611c53565b611d3e565b82525050565b61158381611c8c565b82525050565b61159a61159582611c6d565b611d48565b82525050565b60006115ac8286611563565b6020820191506115bc8285611563565b6020820191506115cc8284611589565b600182019150819050949350505050565b60006080820190506115f2600083018661141a565b81810360208301526116048185611429565b905081810360408301526116188184611429565b9050818103606083015261162b81611496565b9050949350505050565b6000602082019050818103600083015261164e816114b9565b9050919050565b6000602082019050818103600083015261166e816114dc565b9050919050565b6000602082019050818103600083015261168e816114ff565b9050919050565b600060208201905081810360008301526116ae81611522565b9050919050565b60006020820190506116ca6000830184611554565b92915050565b6000610120820190506116e6600083018c611554565b6116f3602083018b611554565b611700604083018a61141a565b61170d606083018961141a565b61171a6080830188611487565b61172760a0830187611487565b81810360c08301526117398186611429565b905081810360e083015261174d8185611429565b905061175d610100830184611487565b9a9950505050505050505050565b600061012082019050611781600083018c611554565b61178e602083018b611554565b61179b604083018a61141a565b6117a8606083018961141a565b6117b5608083018861157a565b6117c260a0830187611487565b81810360c08301526117d48186611429565b905081810360e08301526117e88185611429565b90506117f861010083018461157a565b9a9950505050505050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061186c82611c26565b915061187783611c26565b925081637fffffff0383136000831215161561189657611895611d8b565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000383126000831216156118ce576118cd611d8b565b5b828201905092915050565b60006118e482611c53565b91506118ef83611c53565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561192457611923611d8b565b5b828201905092915050565b600061193a82611c5d565b915061194583611c5d565b92508263ffffffff0382111561195e5761195d611d8b565b5b828201905092915050565b600061197482611c26565b915061197f83611c26565b92508261198f5761198e611dba565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000831416156119c8576119c7611d8b565b5b828205905092915050565b60006119de82611c53565b91506119e983611c53565b9250826119f9576119f8611dba565b5b828204905092915050565b6000611a0f82611c5d565b9150611a1a83611c5d565b925082611a2a57611a29611dba565b5b828204905092915050565b6000611a4082611c26565b9150611a4b83611c26565b925082637fffffff0482116000841360008413161615611a6e57611a6d611d8b565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000583126000841260008413161615611aab57611aaa611d8b565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000582126000841360008412161615611ae857611ae7611d8b565b5b82637fffffff0582126000841260008412161615611b0957611b08611d8b565b5b828202905092915050565b6000611b1f82611c53565b9150611b2a83611c53565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b6357611b62611d8b565b5b828202905092915050565b6000611b7982611c5d565b9150611b8483611c5d565b92508163ffffffff0483118215151615611ba157611ba0611d8b565b5b828202905092915050565b6000611bb782611c53565b9150611bc283611c53565b925082821015611bd557611bd4611d8b565b5b828203905092915050565b6000611beb82611c5d565b9150611bf683611c5d565b925082821015611c0957611c08611d8b565b5b828203905092915050565b6000611c1f82611c33565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000611c8582611c53565b9050919050565b6000611c9782611c5d565b9050919050565b6000611ca982611c5d565b91506000821415611cbd57611cbc611d8b565b5b600182039050919050565b6000611cd382611c53565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d0657611d05611d8b565b5b600182019050919050565b6000611d1c82611c5d565b915063ffffffff821415611d3357611d32611d8b565b5b600182019050919050565b6000819050919050565b6000611d5382611de9565b9050919050565b6000611d6582611c53565b9150611d7083611c53565b925082611d8057611d7f611dba565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008160f81b9050919050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b7f43414e545f41545441434b5f53414d455f4f5244455200000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f4e4f5f554e495453000000000000000000000000000000000000000000000000600082015250565b7f444f4e545f4b494c4c5f594f55525f50454f504c450000000000000000000000600082015250565b611ecc81611c14565b8114611ed757600080fd5b50565b611ee381611c53565b8114611eee57600080fd5b5056fea2646970667358221220e86437262d6273113fdc2c370c7fb721d3b5535e22b3c1dbb31cc479c488cb9764736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80630f3c92f51461003b5780635d495aea14610057575b600080fd5b610055600480360381019061005091906113c6565b610075565b005b61005f61060e565b60405161006c91906116b5565b60405180910390f35b8160008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016100d891906116b5565b60206040518083038186803b1580156100f057600080fd5b505afa158015610104573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610128919061139d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90611655565b60405180910390fd5b600080600080600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b81526004016101fe91906116b5565b60206040518083038186803b15801561021657600080fd5b505afa15801561022a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024e919061139d565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611695565b60405180910390fd5b6102c9898961061d565b80955081965082975050505060008060000160008a8152602001908152602001600020905060008060000160008c815260200190815260200160002090508160060160059054906101000a900460ff1660ff168160060160059054906101000a900460ff1660ff161415610372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036990611635565b60405180910390fd5b86156104db576000826005018054905067ffffffffffffffff8111156103c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103ef5781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff81111561043b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104695781602001602082028036833780820191505090505b5090506104788c6019866109a6565b809250819350505061048b338383610d2a565b7f6678e7114f44f87317726cb728842e4eef1b40c5b2ece628d335360c8c6e52588d8d3388600080888860006040516104cc999897969594939291906116d0565b60405180910390a15050610601565b7f6678e7114f44f87317726cb728842e4eef1b40c5b2ece628d335360c8c6e52588b8b33868960008067ffffffffffffffff811115610543577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105715781602001602082028036833780820191505090505b50600067ffffffffffffffff8111156105b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105e15781602001602082028036833780820191505090505b508d6040516105f89998979695949392919061176b565b60405180910390a15b5050505050505050505050565b6000610618610dc8565b905090565b6000806000806000600f016000878152602001908152602001600020905060008160000160089054906101000a900463ffffffff168260000160009054906101000a900463ffffffff16610671919061192f565b63ffffffff16116106b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ae90611675565b60405180910390fd5b600080600f0160008781526020019081526020016000209050600080601001600088815260200190815260200160002090506000806000016000898152602001908152602001600020905060008060008061071188610de3565b809450819550505061072286610fb6565b809250819350505060006064846107399190611b6e565b60fa866107469190611b6e565b8360646107539190611b6e565b8561012c6107619190611b6e565b89600601600f9054906101000a900460030b61077d919061192f565b610787919061192f565b610791919061192f565b61079b919061192f565b60648360646107aa9190611b6e565b8561012c6107b89190611b6e565b89600601600f9054906101000a900460030b6107d4919061192f565b6107de919061192f565b6107e89190611b6e565b6107f29190611a04565b90508063ffffffff16610803610dc8565b111561082b5760018160008163ffffffff1691509b509b509b5050505050505050505061099f565b6002856108389190611a04565b8960000160008282829054906101000a900463ffffffff1661085a9190611be0565b92506101000a81548163ffffffff021916908363ffffffff1602179055506002846108859190611a04565b8960000160088282829054906101000a900463ffffffff166108a79190611be0565b92506101000a81548163ffffffff021916908363ffffffff1602179055506004856108d29190611a04565b8860000160008282829054906101000a900463ffffffff166108f4919061192f565b92506101000a81548163ffffffff021916908363ffffffff16021790555060048461091f9190611a04565b8860000160088282829054906101000a900463ffffffff16610941919061192f565b92506101000a81548163ffffffff021916908363ffffffff16021790555060008160028661096f9190611a04565b60028861097c9190611a04565b610986919061192f565b8163ffffffff1691509b509b509b505050505050505050505b9250925092565b6060806000836005018054905067ffffffffffffffff8111156109f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a205781602001602082028036833780820191505090505b509050836005018054905067ffffffffffffffff811115610a6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a985781602001602082028036833780820191505090505b50915060005b8460050180549050811015610b7457846008016000866005018381548110610aef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16828281518110610b55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610b6c90611cc8565b915050610a9e565b506000610b848560020154611189565b90506000610b91886111ab565b63ffffffff16905060005b8660050180549050811015610c7d5760648260648a86888681518110610beb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610bfd9190611b14565b610c079190611b14565b610c1191906119d3565b610c1b9190611b14565b610c2591906119d3565b858281518110610c5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610c7590611cc8565b915050610b9c565b50610c998660010154610c938860010154611283565b896112a5565b8660010181905550610cbc8660020154610cb688600201546112e0565b896112a5565b8660020181905550856005018481805480602002602001604051908101604052809291908181526020018280548015610d1457602002820191906000526020600020905b815481526020019060010190808311610d00575b5050505050915094509450505050935093915050565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638edf55bf8585856040518463ffffffff1660e01b8152600401610d90939291906115dd565b600060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b5050505050505050565b60006064610dd461131b565b610dde9190611d5a565b905090565b60008060008060008560000160009054906101000a900463ffffffff1690505b8560000160049054906101000a900463ffffffff168660000160009054906101000a900463ffffffff16610e379190611be0565b63ffffffff168163ffffffff161015610e9657428660010160008363ffffffff168152602001908152602001600020600101541015610e7557610e96565b8280610e8090611d11565b9350508080610e8e90611c9e565b915050610e03565b5060008560000160089054906101000a900463ffffffff1690505b85600001600c9054906101000a900463ffffffff168660000160089054906101000a900463ffffffff16610ee59190611be0565b63ffffffff168163ffffffff161015610f4457428660020160008363ffffffff168152602001908152602001600020600101541015610f2357610f44565b8180610f2e90611d11565b9250508080610f3c90611c9e565b915050610eb1565b50610f788560000160009054906101000a900463ffffffff168660000160049054906101000a900463ffffffff1684611351565b610fab8660000160089054906101000a900463ffffffff1687600001600c9054906101000a900463ffffffff1684611351565b935093505050915091565b60008060008060008560000160009054906101000a900463ffffffff1690505b8560000160049054906101000a900463ffffffff168660000160009054906101000a900463ffffffff1661100a9190611be0565b63ffffffff168163ffffffff16101561106957428660010160008363ffffffff16815260200190815260200160002060010154101561104857611069565b828061105390611d11565b935050808061106190611c9e565b915050610fd6565b5060008560000160089054906101000a900463ffffffff1690505b85600001600c9054906101000a900463ffffffff168660000160089054906101000a900463ffffffff166110b89190611be0565b63ffffffff168163ffffffff16101561111757428660020160008363ffffffff1681526020019081526020016000206001015410156110f657611117565b818061110190611d11565b925050808061110f90611c9e565b915050611084565b5061114b8560000160009054906101000a900463ffffffff168660000160049054906101000a900463ffffffff1684611351565b61117e8660000160089054906101000a900463ffffffff1687600001600c9054906101000a900463ffffffff1684611351565b935093505050915091565b6000610e10824261119a9190611bac565b6111a491906119d3565b9050919050565b600080600080016000848152602001908152602001600020905060008082600601601b9054906101000a900460030b60030b1215611221576103e8601483600601601b9054906101000a900460030b60646112069190611a35565b6112109190611a35565b61121a9190611969565b9050611226565b600090505b6000816103e860048560070160009054906101000a900460030b61124a9190611a35565b60646112569190611a35565b6112609190611969565b606461126c9190611861565b6112769190611861565b9050809350505050919050565b6000610e1082426112949190611bac565b61129e91906119d3565b9050919050565b6000606482610e10856112b89190611b14565b6112c29190611b14565b6112cc91906119d3565b846112d791906118d9565b90509392505050565b600080610e1083426112f29190611bac565b6112fc91906119d3565b9050600e8111156113105780915050611316565b60009150505b919050565b600044426064604051602001611333939291906115a0565b6040516020818303038152906040528051906020012060001c905090565b60008183856113609190611be0565b61136a9190611be0565b90509392505050565b60008151905061138281611ec3565b92915050565b60008135905061139781611eda565b92915050565b6000602082840312156113af57600080fd5b60006113bd84828501611373565b91505092915050565b600080604083850312156113d957600080fd5b60006113e785828601611388565b92505060206113f885828601611388565b9150509250929050565b600061140e8383611545565b60208301905092915050565b61142381611c14565b82525050565b600061143482611816565b61143e818561182e565b935061144983611806565b8060005b8381101561147a5781516114618882611402565b975061146c83611821565b92505060018101905061144d565b5085935050505092915050565b61149081611c7a565b82525050565b60006114a360028361183f565b91506114ae82611df6565b602082019050919050565b60006114c6601683611850565b91506114d182611e1f565b602082019050919050565b60006114e9601983611850565b91506114f482611e48565b602082019050919050565b600061150c600883611850565b915061151782611e71565b602082019050919050565b600061152f601583611850565b915061153a82611e9a565b602082019050919050565b61154e81611c53565b82525050565b61155d81611c53565b82525050565b61157461156f82611c53565b611d3e565b82525050565b61158381611c8c565b82525050565b61159a61159582611c6d565b611d48565b82525050565b60006115ac8286611563565b6020820191506115bc8285611563565b6020820191506115cc8284611589565b600182019150819050949350505050565b60006080820190506115f2600083018661141a565b81810360208301526116048185611429565b905081810360408301526116188184611429565b9050818103606083015261162b81611496565b9050949350505050565b6000602082019050818103600083015261164e816114b9565b9050919050565b6000602082019050818103600083015261166e816114dc565b9050919050565b6000602082019050818103600083015261168e816114ff565b9050919050565b600060208201905081810360008301526116ae81611522565b9050919050565b60006020820190506116ca6000830184611554565b92915050565b6000610120820190506116e6600083018c611554565b6116f3602083018b611554565b611700604083018a61141a565b61170d606083018961141a565b61171a6080830188611487565b61172760a0830187611487565b81810360c08301526117398186611429565b905081810360e083015261174d8185611429565b905061175d610100830184611487565b9a9950505050505050505050565b600061012082019050611781600083018c611554565b61178e602083018b611554565b61179b604083018a61141a565b6117a8606083018961141a565b6117b5608083018861157a565b6117c260a0830187611487565b81810360c08301526117d48186611429565b905081810360e08301526117e88185611429565b90506117f861010083018461157a565b9a9950505050505050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061186c82611c26565b915061187783611c26565b925081637fffffff0383136000831215161561189657611895611d8b565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000383126000831216156118ce576118cd611d8b565b5b828201905092915050565b60006118e482611c53565b91506118ef83611c53565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561192457611923611d8b565b5b828201905092915050565b600061193a82611c5d565b915061194583611c5d565b92508263ffffffff0382111561195e5761195d611d8b565b5b828201905092915050565b600061197482611c26565b915061197f83611c26565b92508261198f5761198e611dba565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000831416156119c8576119c7611d8b565b5b828205905092915050565b60006119de82611c53565b91506119e983611c53565b9250826119f9576119f8611dba565b5b828204905092915050565b6000611a0f82611c5d565b9150611a1a83611c5d565b925082611a2a57611a29611dba565b5b828204905092915050565b6000611a4082611c26565b9150611a4b83611c26565b925082637fffffff0482116000841360008413161615611a6e57611a6d611d8b565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000583126000841260008413161615611aab57611aaa611d8b565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000582126000841360008412161615611ae857611ae7611d8b565b5b82637fffffff0582126000841260008412161615611b0957611b08611d8b565b5b828202905092915050565b6000611b1f82611c53565b9150611b2a83611c53565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b6357611b62611d8b565b5b828202905092915050565b6000611b7982611c5d565b9150611b8483611c5d565b92508163ffffffff0483118215151615611ba157611ba0611d8b565b5b828202905092915050565b6000611bb782611c53565b9150611bc283611c53565b925082821015611bd557611bd4611d8b565b5b828203905092915050565b6000611beb82611c5d565b9150611bf683611c5d565b925082821015611c0957611c08611d8b565b5b828203905092915050565b6000611c1f82611c33565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000611c8582611c53565b9050919050565b6000611c9782611c5d565b9050919050565b6000611ca982611c5d565b91506000821415611cbd57611cbc611d8b565b5b600182039050919050565b6000611cd382611c53565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d0657611d05611d8b565b5b600182019050919050565b6000611d1c82611c5d565b915063ffffffff821415611d3357611d32611d8b565b5b600182019050919050565b6000819050919050565b6000611d5382611de9565b9050919050565b6000611d6582611c53565b9150611d7083611c53565b925082611d8057611d7f611dba565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008160f81b9050919050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b7f43414e545f41545441434b5f53414d455f4f5244455200000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f4e4f5f554e495453000000000000000000000000000000000000000000000000600082015250565b7f444f4e545f4b494c4c5f594f55525f50454f504c450000000000000000000000600082015250565b611ecc81611c14565b8114611ed757600080fd5b50565b611ee381611c53565b8114611eee57600080fd5b5056fea2646970667358221220e86437262d6273113fdc2c370c7fb721d3b5535e22b3c1dbb31cc479c488cb9764736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1294,
        "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)1074_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(ArmyUnit)1259_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ArmyUnit)1259_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)1169_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)1169_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1178_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)1178_storage"
      },
      "t_mapping(t_uint256,t_struct(DefendingArmy)1239_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefendingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(DefendingArmy)1239_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)1181_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)1181_storage"
      },
      "t_mapping(t_uint256,t_struct(Raiding)1201_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raiding)",
        "numberOfBytes": "32",
        "value": "t_struct(Raiding)1201_storage"
      },
      "t_mapping(t_uint256,t_struct(RaidingArmy)1220_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RaidingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(RaidingArmy)1220_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)1140_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)1140_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)1147_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)1147_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)1081_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)1081_storage"
      },
      "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1244_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainedArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(TrainedArmyUnit)1244_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1194_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)1194_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)1190_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)1190_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)1074_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 1012,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)1140_storage)"
          },
          {
            "astId": 1014,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "sRealms",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1016,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "realms",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1018,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "realmsStorage",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1020,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1022,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "resources",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1024,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1026,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "lords",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1031,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)1181_storage)"
          },
          {
            "astId": 1036,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)1190_storage)"
          },
          {
            "astId": 1041,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1178_storage)"
          },
          {
            "astId": 1046,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1169_storage)"
          },
          {
            "astId": 1051,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(TheAges)1081_storage)"
          },
          {
            "astId": 1053,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 1058,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "raiding",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(Raiding)1201_storage)"
          },
          {
            "astId": 1063,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "raidingArmy",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(RaidingArmy)1220_storage)"
          },
          {
            "astId": 1068,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "defendingArmy",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(DefendingArmy)1239_storage)"
          },
          {
            "astId": 1073,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "armyUnit",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(ArmyUnit)1259_storage)"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(ArmyUnit)1259_storage": {
        "encoding": "inplace",
        "label": "struct ArmyUnit",
        "members": [
          {
            "astId": 1246,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1248,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "timeToTrain",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1250,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "offence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1252,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "defence",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1255,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1258,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingCosts)1169_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 1149,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1152,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1155,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1158,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1160,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1162,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1164,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1166,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1168,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)1178_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 1172,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1177,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1169_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefendingArmy)1239_storage": {
        "encoding": "inplace",
        "label": "struct DefendingArmy",
        "members": [
          {
            "astId": 1222,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "trebuchetsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1224,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "trebuchetsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1226,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "scorpionsTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1228,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "scorpionsSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1233,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "trebuchets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1244_storage)"
          },
          {
            "astId": 1238,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "scorpions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1244_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LevelProduction)1181_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 1180,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Raiding)1201_storage": {
        "encoding": "inplace",
        "label": "struct Raiding",
        "members": [
          {
            "astId": 1196,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "coolDownTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1198,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "totalRaids",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1200,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "successfulRaids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RaidingArmy)1220_storage": {
        "encoding": "inplace",
        "label": "struct RaidingArmy",
        "members": [
          {
            "astId": 1203,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "knightsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1205,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "knightsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1207,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "footSoldiersTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1209,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "footSoldiersSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1214,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "knights",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1244_storage)"
          },
          {
            "astId": 1219,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "footSoldiers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1244_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RealmInfo)1140_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 1083,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1085,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1087,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1089,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1091,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1094,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1096,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1098,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1100,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1102,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1104,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1106,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1108,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "aquaducts",
            "offset": 6,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1110,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "temples",
            "offset": 7,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1112,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "castles",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1114,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "markets",
            "offset": 9,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1116,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "ports",
            "offset": 10,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1118,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "barracks",
            "offset": 11,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1120,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "farms",
            "offset": 12,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1122,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "shipyard",
            "offset": 13,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1124,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "fishingVillage",
            "offset": 14,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1126,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "realmDefence",
            "offset": 15,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1128,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "realmOffence",
            "offset": 19,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1130,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "realmMagic",
            "offset": 23,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1132,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "foodSupply",
            "offset": 27,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1134,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "population",
            "offset": 0,
            "slot": "7",
            "type": "t_int32"
          },
          {
            "astId": 1139,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)1147_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ResourceInfo)1147_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 1142,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1144,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1146,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)1081_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 1076,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1078,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1080,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TrainedArmyUnit)1244_storage": {
        "encoding": "inplace",
        "label": "struct TrainedArmyUnit",
        "members": [
          {
            "astId": 1241,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "destroyed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1243,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "unitFinished",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UpgradeCostLevels)1194_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 1193,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)1190_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 1184,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1189,
            "contract": "contracts/settling/facets/RaidingFacet.sol:RaidingFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1194_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}