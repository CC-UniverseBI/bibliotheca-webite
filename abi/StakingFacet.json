{
  "address": "0x0F8044869D2f8c3510B38Afb1Da3E653bcBFF662",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_traits",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_resources",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_orderOf",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_wonder",
          "type": "uint8"
        }
      ],
      "name": "RealmData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lord",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realmStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "RealmStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lord",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realmUnstaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "RealmUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "ResourcesClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "get30DayVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgeClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgeSettled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmId",
          "type": "uint256"
        }
      ],
      "name": "getAllStatistics",
      "outputs": [
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAllTraits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFoodSupply",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmId",
          "type": "uint256"
        }
      ],
      "name": "getHappiness",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHarbours",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPopulation",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRealmInformation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastupdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRegions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getResourceIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getResourceLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRivers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getWonder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "_traits",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_resources",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8",
          "name": "_orderOf",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_wonder",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_update",
          "type": "bool"
        }
      ],
      "name": "stakeRealm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sTokenId",
          "type": "uint256"
        }
      ],
      "name": "unstakeAndExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "withdrawAllResources",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "withdrawSingleRealmResources",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x38ccd930a3fdce69e4c43ba9e29df775c5f609a496262f3bbda11f8977e0655f",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0x0F8044869D2f8c3510B38Afb1Da3E653bcBFF662",
    "transactionIndex": 0,
    "gasUsed": "122742097",
    "logsBloom": "0x
    "blockHash": "0x6b54a5d9b31bed5aacfa976d0d9ffa1eee0daddf0643ea05a533fdd5b08c6b05",
    "transactionHash": "0x38ccd930a3fdce69e4c43ba9e29df775c5f609a496262f3bbda11f8977e0655f",
    "logs": [],
    "blockNumber": 5740146,
    "cumulativeGasUsed": "96371677",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8cd6c73c9f10613865570e47e69af7a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_traits\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_resources\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_orderOf\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_wonder\",\"type\":\"uint8\"}],\"name\":\"RealmData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realmStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"RealmStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realmUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"RealmUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"ResourcesClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"get30DayVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgeSettled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmId\",\"type\":\"uint256\"}],\"name\":\"getAllStatistics\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAllTraits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getFoodSupply\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmId\",\"type\":\"uint256\"}],\"name\":\"getHappiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHarbours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPopulation\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRealmInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastupdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRegions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getResourceIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getResourceLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRivers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWonder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"_traits\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_resources\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"_orderOf\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_wonder\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"stakeRealm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sTokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeAndExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"withdrawAllResources\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"withdrawSingleRealmResources\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/StakingFacet.sol\":\"StakingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/StakingFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract StakingFacet {\\n    AppStorage internal s;\\n\\n    event Init(uint256 _tokenId);\\n    event RealmStaked(address _lord, uint256 _realmStaked, uint256 _age);\\n    event RealmUnstaked(address _lord, uint256 _realmUnstaked, uint256 _age);\\n    event ResourcesClaimed(uint256[], uint256[]);\\n    event RealmData(\\n        uint256 _tokenId,\\n        string _name,\\n        uint8[] _traits,\\n        uint8[] _resources,\\n        uint8 _orderOf,\\n        uint8 _wonder\\n    );\\n\\n    function getRealmInformation(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256 lastupdate)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.lastUpdateAt;\\n    }\\n\\n    function stakeRealm(uint256 _tokenId, bool _update)\\n        public\\n        payable\\n        checkRealmOwner(_tokenId)\\n    {\\n        // init contracts\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_tokenId];\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        // mint sRealm\\n        sRealmstoken.mintFromStakingContract(msg.sender, _tokenId);\\n\\n        // transfer realms token\\n        realmstoken.safeTransferFrom(msg.sender, s.treasury, _tokenId);\\n\\n        uint256 currentAge = (block.timestamp - s.genesisTime) / (1 days);\\n\\n        s.theAges[currentAge].settledRealms++;\\n\\n        // if update is false update lastUpdate else set up initial struct and trigger oracle\\n        if (!_update) {\\n            realmInfo.lastUpdateAt = block.timestamp;\\n            realmInfo.vestedTimeUpdatedAt = block.timestamp;\\n            realmInfo.ageSettled = currentAge;\\n            realmInfo.ageClaimed = currentAge;\\n        } else {\\n            // setup realmInfo Struct\\n            realmInfo.lastUpdateAt = block.timestamp;\\n            realmInfo.vestedTimeUpdatedAt = block.timestamp;\\n            realmInfo.ageSettled = currentAge;\\n            realmInfo.ageClaimed = currentAge;\\n            // realmInfo.foodSupply = 100; // set @ base of 100\\n\\n            //check if stats have been set before\\n            if (realmStatistics.foodSupply == 0) {\\n                realmStatistics.foodSupply = 0; // set @ base of 100\\n                realmStatistics.realmDefence = 1;\\n                realmStatistics.realmOffence = 1;\\n                realmStatistics.realmMagic = 1;\\n            }\\n\\n            emit Init(_tokenId);\\n            emit RealmStaked(msg.sender, _tokenId, currentAge);\\n        }\\n    }\\n\\n    function init(\\n        uint256 _tokenId,\\n        string memory _name,\\n        uint8[] memory _traits,\\n        uint8[] memory _resources,\\n        uint8 _orderOf,\\n        uint8 _wonder\\n    ) public {\\n        // require(msg.sender == s.oracle, \\\"Only The Oracle Can Update\\\"); //commented out for testing\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        //Add Name\\n        realmInfo.name = _name;\\n\\n        // Set order\\n        realmInfo.orderOf = _orderOf;\\n\\n        //Set Regions, Cities, Harbors, Rivers\\n        realmInfo.regions = _traits[0];\\n        realmInfo.cities = _traits[1];\\n        realmInfo.harbours = _traits[2];\\n        realmInfo.rivers = _traits[3];\\n\\n        // create resource id array\\n        for (uint8 i = 0; i < _resources.length; i++) {\\n            realmInfo.resourceIds.push(_resources[i]);\\n        }\\n\\n        //Add the resource ids with base level and production rate\\n        for (uint8 i = 0; i < _resources.length; i++) {\\n            realmInfo.resourceInfo[_resources[i]].id = _resources[i];\\n            realmInfo.resourceInfo[_resources[i]].level = 1;\\n            realmInfo.resourceInfo[_resources[i]].production = 10;\\n        }\\n\\n        //Log wonder if wonder != 0\\n        if (_wonder != 0) {\\n            realmInfo.wonders = _wonder;\\n        }\\n        emit RealmData(_tokenId, _name, _traits, _resources, _orderOf, _wonder);\\n    }\\n\\n    function withdrawSingleRealmResources(\\n        uint256 _tokenId,\\n        bytes calldata _calldata\\n    ) public payable checkSRealmOwner(_tokenId) {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        uint256[] memory realmsResourcesOutputs = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        uint256[] memory treasuryResourcesOutputs = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        require(\\n            _getAvailableResources(realmInfo.lastUpdateAt) +\\n                _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt) >\\n                1,\\n            \\\"not enough resouces\\\"\\n        );\\n\\n        uint256 total = _getAvailableResources(realmInfo.lastUpdateAt) +\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt);\\n\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 90) / 10) *\\n                    _getHappiness(_tokenId)) /\\n                100; // replace with resourcesAvailable\\n            treasuryResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 10) / 90) *\\n                    _getHappiness(_tokenId)) /\\n                100; // replace with resourcesAvailable\\n        }\\n\\n        // return the remaining time\\n        realmInfo.lastUpdateAt = _returnTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt)\\n        );\\n        realmInfo.vestedTimeUpdatedAt = _returnTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt)\\n        );\\n\\n        // send to minter and mint\\n        resourceTokens.resourceMinting(\\n            msg.sender,\\n            realmInfo.resourceIds,\\n            realmsResourcesOutputs,\\n            _calldata\\n        );\\n\\n        emit ResourcesClaimed(realmInfo.resourceIds, realmsResourcesOutputs);\\n    }\\n\\n    function _withdrawResources(uint256 _tokenId)\\n        private\\n        checkSRealmOwner(_tokenId)\\n        returns (\\n            uint256[] memory _ids,\\n            uint256[] memory _realmsResourcesOutputs\\n        )\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        _realmsResourcesOutputs = new uint256[](realmInfo.resourceIds.length);\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        uint256 total = _getAvailableResources(realmInfo.lastUpdateAt) +\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt);\\n\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            _realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 90) / 10) *\\n                    _getHappiness(_tokenId)) /\\n                100; // replace with resourcesAvailable\\n        }\\n\\n        // return the remaining time\\n        realmInfo.lastUpdateAt = _returnTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt)\\n        );\\n\\n        realmInfo.vestedTimeUpdatedAt = _returnTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt)\\n        );\\n\\n        return (realmInfo.resourceIds, _realmsResourcesOutputs);\\n    }\\n\\n    function withdrawAllResources(bytes calldata _calldata) public payable {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        uint256 tokenBalanceOwner = sRealmstoken.balanceOf(msg.sender);\\n        uint256[] memory _ids;\\n        uint256[] memory _settlerValues;\\n\\n        uint256[] memory _totalIds = new uint256[](22);\\n        uint256[] memory _totalSettlerValues = new uint256[](22);\\n\\n        for (uint256 i = 0; i < tokenBalanceOwner; i++) {\\n            (_ids, _settlerValues) = _withdrawResources(\\n                sRealmstoken.tokenOfOwnerByIndex(msg.sender, i)\\n            );\\n\\n            for (uint256 x = 0; x < _ids.length; x++) {\\n                _totalIds[_ids[x]] = _ids[x];\\n                _totalSettlerValues[_ids[x]] += _settlerValues[x];\\n            }\\n        }\\n        resourceTokens.batchResourceMinting(\\n            msg.sender,\\n            _totalIds,\\n            _totalSettlerValues,\\n            _calldata\\n        );\\n    }\\n\\n    function _getHappiness(uint256 _realmId) internal view returns (uint32) {\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_realmId];\\n        int32 food;\\n\\n        if (realmStatistics.foodSupply < 0) {\\n            food = ((100 * realmStatistics.foodSupply) * 20) / 1000;\\n        } else {\\n            food = 0;\\n        }\\n        int32 happiness = 100 +\\n            ((100 * (realmStatistics.population * 4)) / 1000) +\\n            food;\\n\\n        return uint32(happiness);\\n    }\\n\\n    function getHappiness(uint256 _realmId) public view returns (uint256) {\\n        return _getHappiness(_realmId);\\n    }\\n\\n    function _returnTime(uint256 _lastUpdate, uint256 _resourcesAvailable)\\n        internal\\n        pure\\n        returns (uint256 _time)\\n    {\\n        _time = _lastUpdate + _resourcesAvailable * 1 hours;\\n        return _time;\\n    }\\n\\n    function _getAvailableResources(uint256 _lastUpdate)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - _lastUpdate) / 1 hours;\\n    }\\n\\n    function _getAvailableVestedResources(uint256 _vestedTimeUpdatedAt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 vested;\\n        vested = (block.timestamp - _vestedTimeUpdatedAt) / 1 hours;\\n        if (vested > 31 hours) {\\n            vested = vested - 30 hours;\\n        }\\n        return vested;\\n    }\\n\\n    // TODO: We could add a withdraw here\\n    function unstakeAndExit(uint256 _sTokenId)\\n        public\\n        checkSRealmOwner(_sTokenId)\\n    {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        RealmInfo storage realmInfo = s.realmInfo[_sTokenId];\\n        uint256 currentAge = (block.timestamp - s.genesisTime) / (1 days);\\n        // reset time\\n        realmInfo.lastUpdateAt = 0;\\n        realmInfo.vestedTimeUpdatedAt = 0;\\n        // transfer realm back to owner\\n        realmstoken.safeTransferFrom(s.treasury, msg.sender, _sTokenId);\\n\\n        s.theAges[realmInfo.ageSettled].settledRealms--;\\n\\n        sRealmstoken.burn(_sTokenId);\\n        emit RealmUnstaked(msg.sender, _sTokenId, currentAge);\\n    }\\n\\n    // GETTER FUNCTIONS\\n    function getVestingTime(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return block.timestamp - realmInfo.lastUpdateAt;\\n    }\\n\\n    function get30DayVestingTime(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return block.timestamp - realmInfo.vestedTimeUpdatedAt;\\n    }\\n\\n    function getAllStatistics(uint256 _realmId)\\n        public\\n        view\\n        returns (\\n            int32,\\n            int32,\\n            int32,\\n            int32,\\n            int32\\n        )\\n    {\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_realmId];\\n        return (\\n            realmStatistics.realmDefence,\\n            realmStatistics.realmOffence,\\n            realmStatistics.realmMagic,\\n            realmStatistics.foodSupply,\\n            realmStatistics.population\\n        );\\n    }\\n\\n    function getAllTraits(uint256 _tokenId)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return (\\n            realmInfo.regions,\\n            realmInfo.cities,\\n            realmInfo.harbours,\\n            realmInfo.rivers,\\n            realmInfo.orderOf,\\n            realmInfo.wonders\\n        );\\n    }\\n\\n    function getName(uint256 _tokenId) public view returns (string memory) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.name;\\n    }\\n\\n    function getRegions(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.regions;\\n    }\\n\\n    function getCities(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.cities;\\n    }\\n\\n    function getHarbours(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.harbours;\\n    }\\n\\n    function getRivers(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.rivers;\\n    }\\n\\n    function getResourceIds(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.resourceIds;\\n    }\\n\\n    function getResourceLength(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.resourceIds.length;\\n    }\\n\\n    function getWonder(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.wonders;\\n    }\\n\\n    function getAgeSettled(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.ageSettled;\\n    }\\n\\n    function getAgeClaimed(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.ageClaimed;\\n    }\\n\\n    function getPopulation(uint256 _tokenId) public view returns (int256) {\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_tokenId];\\n        return realmStatistics.population;\\n    }\\n\\n    function getFoodSupply(uint256 _tokenId) public view returns (int256) {\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_tokenId];\\n        return realmStatistics.foodSupply;\\n    }\\n\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x77d6d0198ccf4ee5256333cbc2a61081eea243897dbd50d73b94192c0177664b\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    mapping(uint256 => RealmStatistics) realmStatistics;\\n    mapping(uint256 => RealmBuildings) realmBuildings;\\n    uint8 baseProductionRate;\\n    uint8 maxProductionRate;\\n    address sRealms;\\n    address realms;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmStatistics {\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct StatsInfo {\\n    uint8 id;\\n    uint8 value; // level of statistic\\n}\\n\\nstruct RealmBuildings {\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xc165c0821fd3bbe8678ab7a5ec078a6c875b8e01d2c27558f37d551fbdf70eaa\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function productionBuildingsBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x259fdded2348c09c4a61d4b01baf8730cb2102b1ef9a02374b19874400c620ba\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613bc1806100206000396000f3fe6080604052600436106101405760003560e01c806361eb6865116100b6578063913436241161006f57806391343624146105005780639fb42cf414610529578063a771303f1461056b578063ab67134b14610587578063b47e8c5e146105c4578063da37000b1461060157610140565b806361eb6865146103c35780636a589f86146104005780636b8ff574146104295780636bd1d84d146104665780637fe4faf8146104a75780638775d442146104e457610140565b80632f78e373116101085780632f78e37314610255578063322942ee146102925780633e383b43146102cf578063431f88641461030c57806346b9cb8a146103495780635c5081281461038657610140565b806304eaf327146101455780631634a51d1461018257806319d7151d146101bf578063255a4217146101fc57806329e0ba6614610239575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190612c58565b61063e565b6040516101799190613308565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190612c58565b610675565b6040516101b69190613238565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e19190612c58565b6106ad565b6040516101f39190613308565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190612c58565b6106e4565b6040516102309190613308565b60405180910390f35b610253600480360381019061024e9190612ce6565b61070b565b005b34801561026157600080fd5b5061027c60048036038101906102779190612c58565b610e08565b6040516102899190613308565b60405180910390f35b34801561029e57600080fd5b506102b960048036038101906102b49190612c58565b610e20565b6040516102c69190613308565b60405180910390f35b3480156102db57600080fd5b506102f660048036038101906102f19190612c58565b610e52565b6040516103039190613308565b60405180910390f35b34801561031857600080fd5b50610333600480360381019061032e9190612c58565b610e79565b6040516103409190613238565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190612c58565b610eb1565b60405161037d9190613308565b60405180910390f35b34801561039257600080fd5b506103ad60048036038101906103a89190612c58565b610ee3565b6040516103ba9190613308565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e59190612c58565b610f0d565b6040516103f791906131df565b60405180910390f35b34801561040c57600080fd5b5061042760048036038101906104229190612d3e565b610f83565b005b34801561043557600080fd5b50610450600480360381019061044b9190612c58565b61141e565b60405161045d91906132a6565b60405180910390f35b34801561047257600080fd5b5061048d60048036038101906104889190612c58565b6114ce565b60405161049e959493929190613253565b60405180910390f35b3480156104b357600080fd5b506104ce60048036038101906104c99190612c58565b61155d565b6040516104db9190613308565b60405180910390f35b6104fe60048036038101906104f99190612c13565b611594565b005b34801561050c57600080fd5b5061052760048036038101906105229190612c58565b611a51565b005b34801561053557600080fd5b50610550600480360381019061054b9190612c58565b611d89565b60405161056296959493929190613399565b60405180910390f35b61058560048036038101906105809190612caa565b611e51565b005b34801561059357600080fd5b506105ae60048036038101906105a99190612c58565b6122d2565b6040516105bb9190613308565b60405180910390f35b3480156105d057600080fd5b506105eb60048036038101906105e69190612c58565b612309565b6040516105f89190613308565b60405180910390f35b34801561060d57600080fd5b5061062860048036038101906106239190612c58565b612340565b6040516106359190613308565b60405180910390f35b60008060008001600084815260200190815260200160002090508060060160019054906101000a900460ff1660ff16915050919050565b6000806000600101600084815260200190815260200160002090508060000160109054906101000a900460030b60030b915050919050565b60008060008001600084815260200190815260200160002090508060060160049054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060040154915050919050565b8260008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161076e9190613308565b60206040518083038186803b15801561078657600080fd5b505afa15801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190612bea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461082b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610822906132c8565b60405180910390fd5b60008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600088815260200190815260200160002090506000816005018054905067ffffffffffffffff8111156108b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156108e45781602001602082028036833780820191505090505b5090506000826005018054905067ffffffffffffffff811115610930577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561095e5781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff8111156109aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156109d85781602001602082028036833780820191505090505b50905060005b8460050180549050811015610ab457846007016000866005018381548110610a2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16848281518110610a95577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610aac9061397d565b9150506109de565b506001610ac48560020154612367565b610ad186600101546123ab565b610adb91906135c0565b11610b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b12906132e8565b60405180910390fd5b6000610b2a8560020154612367565b610b3786600101546123ab565b610b4191906135c0565b905060005b8560050180549050811015610d04576064610b608d6123cd565b63ffffffff16600a605a85898681518110610ba4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610bb69190613790565b610bc09190613790565b610bca9190613680565b610bd49190613790565b610bde9190613680565b848281518110610c17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506064610c2e8d6123cd565b63ffffffff16605a600a85898681518110610c72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610c849190613790565b610c8e9190613790565b610c989190613680565b610ca29190613790565b610cac9190613680565b838281518110610ce5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610cfc9061397d565b915050610b46565b50610d1f8560010154610d1a87600101546123ab565b6124a6565b8560010181905550610d418560020154610d3c8760020154612367565b6124a6565b85600201819055508573ffffffffffffffffffffffffffffffffffffffff16638edf55bf3387600501868e8e6040518663ffffffff1660e01b8152600401610d8d959493929190613123565b600060405180830381600087803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b505050507f80622db75391035b375fd650fdd63615c99c66f0610ec81d9acee6ca1e0d927b8560050184604051610df3929190613201565b60405180910390a15050505050505050505050565b6000610e13826123cd565b63ffffffff169050919050565b6000806000800160008481526020019081526020016000209050806002015442610e4a91906137ea565b915050919050565b60008060008001600084815260200190815260200160002090508060030154915050919050565b60008060006001016000848152602001908152602001600020905080600001600c9054906101000a900460030b60030b915050919050565b6000806000800160008481526020019081526020016000209050806001015442610edb91906137ea565b915050919050565b60008060008001600084815260200190815260200160002090508060050180549050915050919050565b60606000806000016000848152602001908152602001600020905080600501805480602002602001604051908101604052809291908181526020018280548015610f7657602002820191906000526020600020905b815481526020019060010190808311610f62575b5050505050915050919050565b6000806000016000888152602001908152602001600020905085816000019080519060200190610fb4929190612996565b50828160060160056101000a81548160ff021916908360ff1602179055508460008151811061100c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160036101000a81548160ff021916908360ff1602179055508460018151811061106a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160006101000a81548160ff021916908360ff160217905550846002815181106110c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160016101000a81548160ff021916908360ff16021790555084600381518110611126577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160026101000a81548160ff021916908360ff16021790555060005b84518160ff1610156111dd5781600501858260ff1681518110611199577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151908060018154018082558091505060019003906000526020600020016000909160ff1690919091505580806111d5906139c6565b91505061114d565b5060005b84518160ff1610156113aa57848160ff1681518110611229577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826007016000878460ff1681518110611273577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506001826007016000878460ff16815181106112eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff160217905550600a826007016000878460ff1681518110611363577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160026101000a81548160ff021916908360ff16021790555080806113a2906139c6565b9150506111e1565b5060008260ff16146113d457818160060160046101000a81548160ff021916908360ff1602179055505b7fe3c8f0bd20211d0bc86a10e012946d813c237c180cd4f11e74d1b658b8f5367a87878787878760405161140d96959493929190613323565b60405180910390a150505050505050565b60606000806000016000848152602001908152602001600020905080600001805461144890613900565b80601f016020809104026020016040519081016040528092919081815260200182805461147490613900565b80156114c15780601f10611496576101008083540402835291602001916114c1565b820191906000526020600020905b8154815290600101906020018083116114a457829003601f168201915b5050505050915050919050565b6000806000806000806000600101600088815260200190815260200160002090508060000160009054906101000a900460030b8160000160049054906101000a900460030b8260000160089054906101000a900460030b83600001600c9054906101000a900460030b8460000160109054906101000a900460030b955095509550955095505091939590929450565b60008060008001600084815260200190815260200160002090508060060160009054906101000a900460ff1660ff16915050919050565b60008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016116219190613075565b60206040518083038186803b15801561163957600080fd5b505afa15801561164d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116719190612c81565b90506060806000601667ffffffffffffffff8111156116b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116e75781602001602082028036833780820191505090505b5090506000601667ffffffffffffffff81111561172d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561175b5781602001602082028036833780820191505090505b50905060005b858110156119d2576117fc8773ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b81526004016117a792919061317f565b60206040518083038186803b1580156117bf57600080fd5b505afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f79190612c81565b6124c9565b809550819650505060005b85518110156119be57858181518110611849577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518487838151811061188b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815181106118ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505084818151811061190f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183878381518110611951577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181518110611990577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181516119a491906135c0565b9150818152505080806119b69061397d565b915050611807565b5080806119ca9061397d565b915050611761565b508673ffffffffffffffffffffffffffffffffffffffff1663c90f75593384848d8d6040518663ffffffff1660e01b8152600401611a149594939291906130c7565b600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b50505050505050505050505050565b8060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611ab49190613308565b60206040518083038186803b158015611acc57600080fd5b505afa158015611ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b049190612bea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b68906132c8565b60405180910390fd5b60008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600087815260200190815260200160002090506000620151806000600e015442611bf391906137ea565b611bfd9190613680565b905060008260010181905550600082600201819055508373ffffffffffffffffffffffffffffffffffffffff166342842e0e600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338a6040518463ffffffff1660e01b8152600401611c7593929190613090565b600060405180830381600087803b158015611c8f57600080fd5b505af1158015611ca3573d6000803e3d6000fd5b505050506000600d016000836003015481526020019081526020016000206000016000815480929190611cd5906138d6565b91905055508273ffffffffffffffffffffffffffffffffffffffff166342966c68886040518263ffffffff1660e01b8152600401611d139190613308565b600060405180830381600087803b158015611d2d57600080fd5b505af1158015611d41573d6000803e3d6000fd5b505050507f1d5429148ee8279c8ea448f03ff7cdd042ab3c911ee5c05cb3a5a6d32dace2f2338883604051611d78939291906131a8565b60405180910390a150505050505050565b600080600080600080600080600001600089815260200190815260200160002090508060060160039054906101000a900460ff168160060160009054906101000a900460ff168260060160019054906101000a900460ff168360060160029054906101000a900460ff168460060160059054906101000a900460ff168560060160049054906101000a900460ff168560ff1695508460ff1694508360ff1693508260ff1692508160ff1691508060ff1690509650965096509650965096505091939550919395565b8160008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611eb49190613308565b60206040518083038186803b158015611ecc57600080fd5b505afa158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f049190612bea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f68906132c8565b60405180910390fd5b600080600001600086815260200190815260200160002090506000806001016000878152602001908152602001600020905060008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166321c6ddff338a6040518363ffffffff1660e01b815260040161203092919061317f565b600060405180830381600087803b15801561204a57600080fd5b505af115801561205e573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6040518463ffffffff1660e01b81526004016120c493929190613090565b600060405180830381600087803b1580156120de57600080fd5b505af11580156120f2573d6000803e3d6000fd5b505050506000620151806000600e01544261210d91906137ea565b6121179190613680565b90506000600d01600082815260200190815260200160002060000160008154809291906121439061397d565b919050555087612176574285600101819055504285600201819055508085600301819055508085600401819055506122c7565b428560010181905550428560020181905550808560030181905550808560040181905550600084600001600c9054906101000a900460030b60030b141561225457600084600001600c6101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160046101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160086101000a81548163ffffffff021916908360030b63ffffffff1602179055505b7f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c01338896040516122839190613308565b60405180910390a17fe254cd0a8f2353c72dad29e55618b11a740a94d3cc510e63a798e3381bb20fd3338a836040516122be939291906131a8565b60405180910390a15b505050505050505050565b60008060008001600084815260200190815260200160002090508060060160029054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060060160039054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060010154915050919050565b600080610e10834261237991906137ea565b6123839190613680565b90506201b3f08111156123a2576201a5e08161239f91906137ea565b90505b80915050919050565b6000610e1082426123bc91906137ea565b6123c69190613680565b9050919050565b60008060006001016000848152602001908152602001600020905060008082600001600c9054906101000a900460030b60030b1215612444576103e8601483600001600c9054906101000a900460030b606461242991906136b1565b61243391906136b1565b61243d9190613616565b9050612449565b600090505b6000816103e860048560000160109054906101000a900460030b61246d91906136b1565b606461247991906136b1565b6124839190613616565b606461248f9190613548565b6124999190613548565b9050809350505050919050565b6000610e10826124b69190613790565b836124c191906135c0565b905092915050565b6060808260008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161252f9190613308565b60206040518083038186803b15801561254757600080fd5b505afa15801561255b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257f9190612bea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146125ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e3906132c8565b60405180910390fd5b600080600001600087815260200190815260200160002090506000816005018054905067ffffffffffffffff81111561264e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561267c5781602001602082028036833780820191505090505b509050816005018054905067ffffffffffffffff8111156126c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156126f45781602001602082028036833780820191505090505b50945060005b82600501805490508110156127d05782600701600084600501838154811061274b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff168282815181106127b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806127c89061397d565b9150506126fa565b5060006127e08360020154612367565b6127ed84600101546123ab565b6127f791906135c0565b905060005b83600501805490508110156128ec5760646128168a6123cd565b63ffffffff16600a605a8587868151811061285a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161286c9190613790565b6128769190613790565b6128809190613680565b61288a9190613790565b6128949190613680565b8782815181106128cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806128e49061397d565b9150506127fc565b50612907836001015461290285600101546123ab565b6124a6565b836001018190555061292983600201546129248560020154612367565b6124a6565b836002018190555082600501868180548060200260200160405190810160405280929190818152602001828054801561298157602002820191906000526020600020905b81548152602001906001019080831161296d575b50505050509150965096505050505050915091565b8280546129a290613900565b90600052602060002090601f0160209004810192826129c45760008555612a0b565b82601f106129dd57805160ff1916838001178555612a0b565b82800160010185558215612a0b579182015b82811115612a0a5782518255916020019190600101906129ef565b5b509050612a189190612a1c565b5090565b5b80821115612a35576000816000905550600101612a1d565b5090565b6000612a4c612a478461341f565b6133fa565b90508083825260208201905082856020860282011115612a6b57600080fd5b60005b85811015612a9b5781612a818882612bd5565b845260208401935060208301925050600181019050612a6e565b5050509392505050565b6000612ab8612ab38461344b565b6133fa565b905082815260208101848484011115612ad057600080fd5b612adb848285613894565b509392505050565b600081519050612af281613b2f565b92915050565b600082601f830112612b0957600080fd5b8135612b19848260208601612a39565b91505092915050565b600081359050612b3181613b46565b92915050565b60008083601f840112612b4957600080fd5b8235905067ffffffffffffffff811115612b6257600080fd5b602083019150836001820283011115612b7a57600080fd5b9250929050565b600082601f830112612b9257600080fd5b8135612ba2848260208601612aa5565b91505092915050565b600081359050612bba81613b5d565b92915050565b600081519050612bcf81613b5d565b92915050565b600081359050612be481613b74565b92915050565b600060208284031215612bfc57600080fd5b6000612c0a84828501612ae3565b91505092915050565b60008060208385031215612c2657600080fd5b600083013567ffffffffffffffff811115612c4057600080fd5b612c4c85828601612b37565b92509250509250929050565b600060208284031215612c6a57600080fd5b6000612c7884828501612bab565b91505092915050565b600060208284031215612c9357600080fd5b6000612ca184828501612bc0565b91505092915050565b60008060408385031215612cbd57600080fd5b6000612ccb85828601612bab565b9250506020612cdc85828601612b22565b9150509250929050565b600080600060408486031215612cfb57600080fd5b6000612d0986828701612bab565b935050602084013567ffffffffffffffff811115612d2657600080fd5b612d3286828701612b37565b92509250509250925092565b60008060008060008060c08789031215612d5757600080fd5b6000612d6589828a01612bab565b965050602087013567ffffffffffffffff811115612d8257600080fd5b612d8e89828a01612b81565b955050604087013567ffffffffffffffff811115612dab57600080fd5b612db789828a01612af8565b945050606087013567ffffffffffffffff811115612dd457600080fd5b612de089828a01612af8565b9350506080612df189828a01612bd5565b92505060a0612e0289828a01612bd5565b9150509295509295509295565b6000612e1b8383613039565b60208301905092915050565b6000612e338383613057565b60208301905092915050565b612e4881613828565b82525050565b6000612e59826134b1565b612e638185613504565b9350612e6e8361347c565b8060005b83811015612e9f578151612e868882612e0f565b9750612e91836134dd565b925050600181019050612e72565b5085935050505092915050565b6000612eb7826134bc565b612ec18185613504565b9350612ecc8361348c565b8060005b83811015612f0457612ee182613aac565b612eeb8882612e0f565b9750612ef6836134ea565b925050600181019050612ed0565b5085935050505092915050565b6000612f1c826134c7565b612f268185613515565b9350612f31836134a1565b8060005b83811015612f62578151612f498882612e27565b9750612f54836134f7565b925050600181019050612f35565b5085935050505092915050565b6000612f7b8385613526565b9350612f88838584613894565b612f9183613abf565b840190509392505050565b612fa581613846565b82525050565b612fb481613850565b82525050565b6000612fc5826134d2565b612fcf8185613537565b9350612fdf8185602086016138a3565b612fe881613abf565b840191505092915050565b6000613000601983613537565b915061300b82613add565b602082019050919050565b6000613023601383613537565b915061302e82613b06565b602082019050919050565b6130428161387d565b82525050565b6130518161387d565b82525050565b61306081613887565b82525050565b61306f81613887565b82525050565b600060208201905061308a6000830184612e3f565b92915050565b60006060820190506130a56000830186612e3f565b6130b26020830185612e3f565b6130bf6040830184613048565b949350505050565b60006080820190506130dc6000830188612e3f565b81810360208301526130ee8187612e4e565b905081810360408301526131028186612e4e565b90508181036060830152613117818486612f6f565b90509695505050505050565b60006080820190506131386000830188612e3f565b818103602083015261314a8187612eac565b9050818103604083015261315e8186612e4e565b90508181036060830152613173818486612f6f565b90509695505050505050565b60006040820190506131946000830185612e3f565b6131a16020830184613048565b9392505050565b60006060820190506131bd6000830186612e3f565b6131ca6020830185613048565b6131d76040830184613048565b949350505050565b600060208201905081810360008301526131f98184612e4e565b905092915050565b6000604082019050818103600083015261321b8185612eac565b9050818103602083015261322f8184612e4e565b90509392505050565b600060208201905061324d6000830184612f9c565b92915050565b600060a0820190506132686000830188612fab565b6132756020830187612fab565b6132826040830186612fab565b61328f6060830185612fab565b61329c6080830184612fab565b9695505050505050565b600060208201905081810360008301526132c08184612fba565b905092915050565b600060208201905081810360008301526132e181612ff3565b9050919050565b6000602082019050818103600083015261330181613016565b9050919050565b600060208201905061331d6000830184613048565b92915050565b600060c0820190506133386000830189613048565b818103602083015261334a8188612fba565b9050818103604083015261335e8187612f11565b905081810360608301526133728186612f11565b90506133816080830185613066565b61338e60a0830184613066565b979650505050505050565b600060c0820190506133ae6000830189613048565b6133bb6020830188613048565b6133c86040830187613048565b6133d56060830186613048565b6133e26080830185613048565b6133ef60a0830184613048565b979650505050505050565b6000613404613415565b9050613410828261394c565b919050565b6000604051905090565b600067ffffffffffffffff82111561343a57613439613a7d565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561346657613465613a7d565b5b61346f82613abf565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061355382613850565b915061355e83613850565b925081637fffffff0383136000831215161561357d5761357c6139f0565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000383126000831216156135b5576135b46139f0565b5b828201905092915050565b60006135cb8261387d565b91506135d68361387d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561360b5761360a6139f0565b5b828201905092915050565b600061362182613850565b915061362c83613850565b92508261363c5761363b613a1f565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000083141615613675576136746139f0565b5b828205905092915050565b600061368b8261387d565b91506136968361387d565b9250826136a6576136a5613a1f565b5b828204905092915050565b60006136bc82613850565b91506136c783613850565b925082637fffffff04821160008413600084131616156136ea576136e96139f0565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000583126000841260008413161615613727576137266139f0565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000582126000841360008412161615613764576137636139f0565b5b82637fffffff0582126000841260008412161615613785576137846139f0565b5b828202905092915050565b600061379b8261387d565b91506137a68361387d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137df576137de6139f0565b5b828202905092915050565b60006137f58261387d565b91506138008361387d565b925082821015613813576138126139f0565b5b828203905092915050565b6000819050919050565b60006138338261385d565b9050919050565b60008115159050919050565b6000819050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156138c15780820151818401526020810190506138a6565b838111156138d0576000848401525b50505050565b60006138e18261387d565b915060008214156138f5576138f46139f0565b5b600182039050919050565b6000600282049050600182168061391857607f821691505b6020821081141561392c5761392b613a4e565b5b50919050565b600061394561394083613ad0565b61381e565b9050919050565b61395582613abf565b810181811067ffffffffffffffff8211171561397457613973613a7d565b5b80604052505050565b60006139888261387d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156139bb576139ba6139f0565b5b600182019050919050565b60006139d182613887565b915060ff8214156139e5576139e46139f0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000613ab88254613932565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f6e6f7420656e6f756768207265736f7563657300000000000000000000000000600082015250565b613b3881613828565b8114613b4357600080fd5b50565b613b4f8161383a565b8114613b5a57600080fd5b50565b613b668161387d565b8114613b7157600080fd5b50565b613b7d81613887565b8114613b8857600080fd5b5056fea26469706673582212200f77349a0ffe1ec247670a8a9a716276257e1aa05e93bd491a9e2eb83d78822564736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806361eb6865116100b6578063913436241161006f57806391343624146105005780639fb42cf414610529578063a771303f1461056b578063ab67134b14610587578063b47e8c5e146105c4578063da37000b1461060157610140565b806361eb6865146103c35780636a589f86146104005780636b8ff574146104295780636bd1d84d146104665780637fe4faf8146104a75780638775d442146104e457610140565b80632f78e373116101085780632f78e37314610255578063322942ee146102925780633e383b43146102cf578063431f88641461030c57806346b9cb8a146103495780635c5081281461038657610140565b806304eaf327146101455780631634a51d1461018257806319d7151d146101bf578063255a4217146101fc57806329e0ba6614610239575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190612c58565b61063e565b6040516101799190613308565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190612c58565b610675565b6040516101b69190613238565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e19190612c58565b6106ad565b6040516101f39190613308565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190612c58565b6106e4565b6040516102309190613308565b60405180910390f35b610253600480360381019061024e9190612ce6565b61070b565b005b34801561026157600080fd5b5061027c60048036038101906102779190612c58565b610e08565b6040516102899190613308565b60405180910390f35b34801561029e57600080fd5b506102b960048036038101906102b49190612c58565b610e20565b6040516102c69190613308565b60405180910390f35b3480156102db57600080fd5b506102f660048036038101906102f19190612c58565b610e52565b6040516103039190613308565b60405180910390f35b34801561031857600080fd5b50610333600480360381019061032e9190612c58565b610e79565b6040516103409190613238565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190612c58565b610eb1565b60405161037d9190613308565b60405180910390f35b34801561039257600080fd5b506103ad60048036038101906103a89190612c58565b610ee3565b6040516103ba9190613308565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e59190612c58565b610f0d565b6040516103f791906131df565b60405180910390f35b34801561040c57600080fd5b5061042760048036038101906104229190612d3e565b610f83565b005b34801561043557600080fd5b50610450600480360381019061044b9190612c58565b61141e565b60405161045d91906132a6565b60405180910390f35b34801561047257600080fd5b5061048d60048036038101906104889190612c58565b6114ce565b60405161049e959493929190613253565b60405180910390f35b3480156104b357600080fd5b506104ce60048036038101906104c99190612c58565b61155d565b6040516104db9190613308565b60405180910390f35b6104fe60048036038101906104f99190612c13565b611594565b005b34801561050c57600080fd5b5061052760048036038101906105229190612c58565b611a51565b005b34801561053557600080fd5b50610550600480360381019061054b9190612c58565b611d89565b60405161056296959493929190613399565b60405180910390f35b61058560048036038101906105809190612caa565b611e51565b005b34801561059357600080fd5b506105ae60048036038101906105a99190612c58565b6122d2565b6040516105bb9190613308565b60405180910390f35b3480156105d057600080fd5b506105eb60048036038101906105e69190612c58565b612309565b6040516105f89190613308565b60405180910390f35b34801561060d57600080fd5b5061062860048036038101906106239190612c58565b612340565b6040516106359190613308565b60405180910390f35b60008060008001600084815260200190815260200160002090508060060160019054906101000a900460ff1660ff16915050919050565b6000806000600101600084815260200190815260200160002090508060000160109054906101000a900460030b60030b915050919050565b60008060008001600084815260200190815260200160002090508060060160049054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060040154915050919050565b8260008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161076e9190613308565b60206040518083038186803b15801561078657600080fd5b505afa15801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190612bea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461082b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610822906132c8565b60405180910390fd5b60008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600088815260200190815260200160002090506000816005018054905067ffffffffffffffff8111156108b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156108e45781602001602082028036833780820191505090505b5090506000826005018054905067ffffffffffffffff811115610930577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561095e5781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff8111156109aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156109d85781602001602082028036833780820191505090505b50905060005b8460050180549050811015610ab457846007016000866005018381548110610a2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16848281518110610a95577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610aac9061397d565b9150506109de565b506001610ac48560020154612367565b610ad186600101546123ab565b610adb91906135c0565b11610b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b12906132e8565b60405180910390fd5b6000610b2a8560020154612367565b610b3786600101546123ab565b610b4191906135c0565b905060005b8560050180549050811015610d04576064610b608d6123cd565b63ffffffff16600a605a85898681518110610ba4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610bb69190613790565b610bc09190613790565b610bca9190613680565b610bd49190613790565b610bde9190613680565b848281518110610c17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506064610c2e8d6123cd565b63ffffffff16605a600a85898681518110610c72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610c849190613790565b610c8e9190613790565b610c989190613680565b610ca29190613790565b610cac9190613680565b838281518110610ce5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610cfc9061397d565b915050610b46565b50610d1f8560010154610d1a87600101546123ab565b6124a6565b8560010181905550610d418560020154610d3c8760020154612367565b6124a6565b85600201819055508573ffffffffffffffffffffffffffffffffffffffff16638edf55bf3387600501868e8e6040518663ffffffff1660e01b8152600401610d8d959493929190613123565b600060405180830381600087803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b505050507f80622db75391035b375fd650fdd63615c99c66f0610ec81d9acee6ca1e0d927b8560050184604051610df3929190613201565b60405180910390a15050505050505050505050565b6000610e13826123cd565b63ffffffff169050919050565b6000806000800160008481526020019081526020016000209050806002015442610e4a91906137ea565b915050919050565b60008060008001600084815260200190815260200160002090508060030154915050919050565b60008060006001016000848152602001908152602001600020905080600001600c9054906101000a900460030b60030b915050919050565b6000806000800160008481526020019081526020016000209050806001015442610edb91906137ea565b915050919050565b60008060008001600084815260200190815260200160002090508060050180549050915050919050565b60606000806000016000848152602001908152602001600020905080600501805480602002602001604051908101604052809291908181526020018280548015610f7657602002820191906000526020600020905b815481526020019060010190808311610f62575b5050505050915050919050565b6000806000016000888152602001908152602001600020905085816000019080519060200190610fb4929190612996565b50828160060160056101000a81548160ff021916908360ff1602179055508460008151811061100c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160036101000a81548160ff021916908360ff1602179055508460018151811061106a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160006101000a81548160ff021916908360ff160217905550846002815181106110c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160016101000a81548160ff021916908360ff16021790555084600381518110611126577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160026101000a81548160ff021916908360ff16021790555060005b84518160ff1610156111dd5781600501858260ff1681518110611199577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151908060018154018082558091505060019003906000526020600020016000909160ff1690919091505580806111d5906139c6565b91505061114d565b5060005b84518160ff1610156113aa57848160ff1681518110611229577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826007016000878460ff1681518110611273577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506001826007016000878460ff16815181106112eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff160217905550600a826007016000878460ff1681518110611363577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160026101000a81548160ff021916908360ff16021790555080806113a2906139c6565b9150506111e1565b5060008260ff16146113d457818160060160046101000a81548160ff021916908360ff1602179055505b7fe3c8f0bd20211d0bc86a10e012946d813c237c180cd4f11e74d1b658b8f5367a87878787878760405161140d96959493929190613323565b60405180910390a150505050505050565b60606000806000016000848152602001908152602001600020905080600001805461144890613900565b80601f016020809104026020016040519081016040528092919081815260200182805461147490613900565b80156114c15780601f10611496576101008083540402835291602001916114c1565b820191906000526020600020905b8154815290600101906020018083116114a457829003601f168201915b5050505050915050919050565b6000806000806000806000600101600088815260200190815260200160002090508060000160009054906101000a900460030b8160000160049054906101000a900460030b8260000160089054906101000a900460030b83600001600c9054906101000a900460030b8460000160109054906101000a900460030b955095509550955095505091939590929450565b60008060008001600084815260200190815260200160002090508060060160009054906101000a900460ff1660ff16915050919050565b60008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016116219190613075565b60206040518083038186803b15801561163957600080fd5b505afa15801561164d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116719190612c81565b90506060806000601667ffffffffffffffff8111156116b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116e75781602001602082028036833780820191505090505b5090506000601667ffffffffffffffff81111561172d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561175b5781602001602082028036833780820191505090505b50905060005b858110156119d2576117fc8773ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b81526004016117a792919061317f565b60206040518083038186803b1580156117bf57600080fd5b505afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f79190612c81565b6124c9565b809550819650505060005b85518110156119be57858181518110611849577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518487838151811061188b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815181106118ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505084818151811061190f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183878381518110611951577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181518110611990577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181516119a491906135c0565b9150818152505080806119b69061397d565b915050611807565b5080806119ca9061397d565b915050611761565b508673ffffffffffffffffffffffffffffffffffffffff1663c90f75593384848d8d6040518663ffffffff1660e01b8152600401611a149594939291906130c7565b600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b50505050505050505050505050565b8060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611ab49190613308565b60206040518083038186803b158015611acc57600080fd5b505afa158015611ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b049190612bea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b68906132c8565b60405180910390fd5b60008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600087815260200190815260200160002090506000620151806000600e015442611bf391906137ea565b611bfd9190613680565b905060008260010181905550600082600201819055508373ffffffffffffffffffffffffffffffffffffffff166342842e0e600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338a6040518463ffffffff1660e01b8152600401611c7593929190613090565b600060405180830381600087803b158015611c8f57600080fd5b505af1158015611ca3573d6000803e3d6000fd5b505050506000600d016000836003015481526020019081526020016000206000016000815480929190611cd5906138d6565b91905055508273ffffffffffffffffffffffffffffffffffffffff166342966c68886040518263ffffffff1660e01b8152600401611d139190613308565b600060405180830381600087803b158015611d2d57600080fd5b505af1158015611d41573d6000803e3d6000fd5b505050507f1d5429148ee8279c8ea448f03ff7cdd042ab3c911ee5c05cb3a5a6d32dace2f2338883604051611d78939291906131a8565b60405180910390a150505050505050565b600080600080600080600080600001600089815260200190815260200160002090508060060160039054906101000a900460ff168160060160009054906101000a900460ff168260060160019054906101000a900460ff168360060160029054906101000a900460ff168460060160059054906101000a900460ff168560060160049054906101000a900460ff168560ff1695508460ff1694508360ff1693508260ff1692508160ff1691508060ff1690509650965096509650965096505091939550919395565b8160008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611eb49190613308565b60206040518083038186803b158015611ecc57600080fd5b505afa158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f049190612bea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f68906132c8565b60405180910390fd5b600080600001600086815260200190815260200160002090506000806001016000878152602001908152602001600020905060008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166321c6ddff338a6040518363ffffffff1660e01b815260040161203092919061317f565b600060405180830381600087803b15801561204a57600080fd5b505af115801561205e573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6040518463ffffffff1660e01b81526004016120c493929190613090565b600060405180830381600087803b1580156120de57600080fd5b505af11580156120f2573d6000803e3d6000fd5b505050506000620151806000600e01544261210d91906137ea565b6121179190613680565b90506000600d01600082815260200190815260200160002060000160008154809291906121439061397d565b919050555087612176574285600101819055504285600201819055508085600301819055508085600401819055506122c7565b428560010181905550428560020181905550808560030181905550808560040181905550600084600001600c9054906101000a900460030b60030b141561225457600084600001600c6101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160046101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160086101000a81548163ffffffff021916908360030b63ffffffff1602179055505b7f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c01338896040516122839190613308565b60405180910390a17fe254cd0a8f2353c72dad29e55618b11a740a94d3cc510e63a798e3381bb20fd3338a836040516122be939291906131a8565b60405180910390a15b505050505050505050565b60008060008001600084815260200190815260200160002090508060060160029054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060060160039054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060010154915050919050565b600080610e10834261237991906137ea565b6123839190613680565b90506201b3f08111156123a2576201a5e08161239f91906137ea565b90505b80915050919050565b6000610e1082426123bc91906137ea565b6123c69190613680565b9050919050565b60008060006001016000848152602001908152602001600020905060008082600001600c9054906101000a900460030b60030b1215612444576103e8601483600001600c9054906101000a900460030b606461242991906136b1565b61243391906136b1565b61243d9190613616565b9050612449565b600090505b6000816103e860048560000160109054906101000a900460030b61246d91906136b1565b606461247991906136b1565b6124839190613616565b606461248f9190613548565b6124999190613548565b9050809350505050919050565b6000610e10826124b69190613790565b836124c191906135c0565b905092915050565b6060808260008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161252f9190613308565b60206040518083038186803b15801561254757600080fd5b505afa15801561255b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257f9190612bea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146125ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e3906132c8565b60405180910390fd5b600080600001600087815260200190815260200160002090506000816005018054905067ffffffffffffffff81111561264e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561267c5781602001602082028036833780820191505090505b509050816005018054905067ffffffffffffffff8111156126c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156126f45781602001602082028036833780820191505090505b50945060005b82600501805490508110156127d05782600701600084600501838154811061274b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff168282815181106127b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806127c89061397d565b9150506126fa565b5060006127e08360020154612367565b6127ed84600101546123ab565b6127f791906135c0565b905060005b83600501805490508110156128ec5760646128168a6123cd565b63ffffffff16600a605a8587868151811061285a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161286c9190613790565b6128769190613790565b6128809190613680565b61288a9190613790565b6128949190613680565b8782815181106128cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806128e49061397d565b9150506127fc565b50612907836001015461290285600101546123ab565b6124a6565b836001018190555061292983600201546129248560020154612367565b6124a6565b836002018190555082600501868180548060200260200160405190810160405280929190818152602001828054801561298157602002820191906000526020600020905b81548152602001906001019080831161296d575b50505050509150965096505050505050915091565b8280546129a290613900565b90600052602060002090601f0160209004810192826129c45760008555612a0b565b82601f106129dd57805160ff1916838001178555612a0b565b82800160010185558215612a0b579182015b82811115612a0a5782518255916020019190600101906129ef565b5b509050612a189190612a1c565b5090565b5b80821115612a35576000816000905550600101612a1d565b5090565b6000612a4c612a478461341f565b6133fa565b90508083825260208201905082856020860282011115612a6b57600080fd5b60005b85811015612a9b5781612a818882612bd5565b845260208401935060208301925050600181019050612a6e565b5050509392505050565b6000612ab8612ab38461344b565b6133fa565b905082815260208101848484011115612ad057600080fd5b612adb848285613894565b509392505050565b600081519050612af281613b2f565b92915050565b600082601f830112612b0957600080fd5b8135612b19848260208601612a39565b91505092915050565b600081359050612b3181613b46565b92915050565b60008083601f840112612b4957600080fd5b8235905067ffffffffffffffff811115612b6257600080fd5b602083019150836001820283011115612b7a57600080fd5b9250929050565b600082601f830112612b9257600080fd5b8135612ba2848260208601612aa5565b91505092915050565b600081359050612bba81613b5d565b92915050565b600081519050612bcf81613b5d565b92915050565b600081359050612be481613b74565b92915050565b600060208284031215612bfc57600080fd5b6000612c0a84828501612ae3565b91505092915050565b60008060208385031215612c2657600080fd5b600083013567ffffffffffffffff811115612c4057600080fd5b612c4c85828601612b37565b92509250509250929050565b600060208284031215612c6a57600080fd5b6000612c7884828501612bab565b91505092915050565b600060208284031215612c9357600080fd5b6000612ca184828501612bc0565b91505092915050565b60008060408385031215612cbd57600080fd5b6000612ccb85828601612bab565b9250506020612cdc85828601612b22565b9150509250929050565b600080600060408486031215612cfb57600080fd5b6000612d0986828701612bab565b935050602084013567ffffffffffffffff811115612d2657600080fd5b612d3286828701612b37565b92509250509250925092565b60008060008060008060c08789031215612d5757600080fd5b6000612d6589828a01612bab565b965050602087013567ffffffffffffffff811115612d8257600080fd5b612d8e89828a01612b81565b955050604087013567ffffffffffffffff811115612dab57600080fd5b612db789828a01612af8565b945050606087013567ffffffffffffffff811115612dd457600080fd5b612de089828a01612af8565b9350506080612df189828a01612bd5565b92505060a0612e0289828a01612bd5565b9150509295509295509295565b6000612e1b8383613039565b60208301905092915050565b6000612e338383613057565b60208301905092915050565b612e4881613828565b82525050565b6000612e59826134b1565b612e638185613504565b9350612e6e8361347c565b8060005b83811015612e9f578151612e868882612e0f565b9750612e91836134dd565b925050600181019050612e72565b5085935050505092915050565b6000612eb7826134bc565b612ec18185613504565b9350612ecc8361348c565b8060005b83811015612f0457612ee182613aac565b612eeb8882612e0f565b9750612ef6836134ea565b925050600181019050612ed0565b5085935050505092915050565b6000612f1c826134c7565b612f268185613515565b9350612f31836134a1565b8060005b83811015612f62578151612f498882612e27565b9750612f54836134f7565b925050600181019050612f35565b5085935050505092915050565b6000612f7b8385613526565b9350612f88838584613894565b612f9183613abf565b840190509392505050565b612fa581613846565b82525050565b612fb481613850565b82525050565b6000612fc5826134d2565b612fcf8185613537565b9350612fdf8185602086016138a3565b612fe881613abf565b840191505092915050565b6000613000601983613537565b915061300b82613add565b602082019050919050565b6000613023601383613537565b915061302e82613b06565b602082019050919050565b6130428161387d565b82525050565b6130518161387d565b82525050565b61306081613887565b82525050565b61306f81613887565b82525050565b600060208201905061308a6000830184612e3f565b92915050565b60006060820190506130a56000830186612e3f565b6130b26020830185612e3f565b6130bf6040830184613048565b949350505050565b60006080820190506130dc6000830188612e3f565b81810360208301526130ee8187612e4e565b905081810360408301526131028186612e4e565b90508181036060830152613117818486612f6f565b90509695505050505050565b60006080820190506131386000830188612e3f565b818103602083015261314a8187612eac565b9050818103604083015261315e8186612e4e565b90508181036060830152613173818486612f6f565b90509695505050505050565b60006040820190506131946000830185612e3f565b6131a16020830184613048565b9392505050565b60006060820190506131bd6000830186612e3f565b6131ca6020830185613048565b6131d76040830184613048565b949350505050565b600060208201905081810360008301526131f98184612e4e565b905092915050565b6000604082019050818103600083015261321b8185612eac565b9050818103602083015261322f8184612e4e565b90509392505050565b600060208201905061324d6000830184612f9c565b92915050565b600060a0820190506132686000830188612fab565b6132756020830187612fab565b6132826040830186612fab565b61328f6060830185612fab565b61329c6080830184612fab565b9695505050505050565b600060208201905081810360008301526132c08184612fba565b905092915050565b600060208201905081810360008301526132e181612ff3565b9050919050565b6000602082019050818103600083015261330181613016565b9050919050565b600060208201905061331d6000830184613048565b92915050565b600060c0820190506133386000830189613048565b818103602083015261334a8188612fba565b9050818103604083015261335e8187612f11565b905081810360608301526133728186612f11565b90506133816080830185613066565b61338e60a0830184613066565b979650505050505050565b600060c0820190506133ae6000830189613048565b6133bb6020830188613048565b6133c86040830187613048565b6133d56060830186613048565b6133e26080830185613048565b6133ef60a0830184613048565b979650505050505050565b6000613404613415565b9050613410828261394c565b919050565b6000604051905090565b600067ffffffffffffffff82111561343a57613439613a7d565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561346657613465613a7d565b5b61346f82613abf565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061355382613850565b915061355e83613850565b925081637fffffff0383136000831215161561357d5761357c6139f0565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000383126000831216156135b5576135b46139f0565b5b828201905092915050565b60006135cb8261387d565b91506135d68361387d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561360b5761360a6139f0565b5b828201905092915050565b600061362182613850565b915061362c83613850565b92508261363c5761363b613a1f565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000083141615613675576136746139f0565b5b828205905092915050565b600061368b8261387d565b91506136968361387d565b9250826136a6576136a5613a1f565b5b828204905092915050565b60006136bc82613850565b91506136c783613850565b925082637fffffff04821160008413600084131616156136ea576136e96139f0565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000583126000841260008413161615613727576137266139f0565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000582126000841360008412161615613764576137636139f0565b5b82637fffffff0582126000841260008412161615613785576137846139f0565b5b828202905092915050565b600061379b8261387d565b91506137a68361387d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137df576137de6139f0565b5b828202905092915050565b60006137f58261387d565b91506138008361387d565b925082821015613813576138126139f0565b5b828203905092915050565b6000819050919050565b60006138338261385d565b9050919050565b60008115159050919050565b6000819050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156138c15780820151818401526020810190506138a6565b838111156138d0576000848401525b50505050565b60006138e18261387d565b915060008214156138f5576138f46139f0565b5b600182039050919050565b6000600282049050600182168061391857607f821691505b6020821081141561392c5761392b613a4e565b5b50919050565b600061394561394083613ad0565b61381e565b9050919050565b61395582613abf565b810181811067ffffffffffffffff8211171561397457613973613a7d565b5b80604052505050565b60006139888261387d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156139bb576139ba6139f0565b5b600182019050919050565b60006139d182613887565b915060ff8214156139e5576139e46139f0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000613ab88254613932565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f6e6f7420656e6f756768207265736f7563657300000000000000000000000000600082015250565b613b3881613828565b8114613b4357600080fd5b50565b613b4f8161383a565b8114613b5a57600080fd5b50565b613b668161387d565b8114613b7157600080fd5b50565b613b7d81613887565b8114613b8857600080fd5b5056fea26469706673582212200f77349a0ffe1ec247670a8a9a716276257e1aa05e93bd491a9e2eb83d78822564736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 404,
        "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)2502_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)2604_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)2604_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)2613_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)2613_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)2616_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)2616_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmBuildings)2582_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmBuildings)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmBuildings)2582_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)2551_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)2551_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmStatistics)2520_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmStatistics)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmStatistics)2520_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)2558_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)2558_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)2509_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)2509_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)2629_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)2629_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)2625_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)2625_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)2502_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 2448,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)2551_storage)"
          },
          {
            "astId": 2453,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmStatistics",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(RealmStatistics)2520_storage)"
          },
          {
            "astId": 2458,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(RealmBuildings)2582_storage)"
          },
          {
            "astId": 2460,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "baseProductionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 2462,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "maxProductionRate",
            "offset": 1,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 2464,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "sRealms",
            "offset": 2,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2466,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realms",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2468,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 2470,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resources",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2472,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 2474,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "lords",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 2479,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)2616_storage)"
          },
          {
            "astId": 2484,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)2625_storage)"
          },
          {
            "astId": 2489,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)2613_storage)"
          },
          {
            "astId": 2494,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)2604_storage)"
          },
          {
            "astId": 2499,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_struct(TheAges)2509_storage)"
          },
          {
            "astId": 2501,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(BuildingCosts)2604_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 2584,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2587,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 2590,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 2593,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 2595,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 2597,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 2599,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 2601,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 2603,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)2613_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 2607,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 2612,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)2604_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LevelProduction)2616_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 2615,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmBuildings)2582_storage": {
        "encoding": "inplace",
        "label": "struct RealmBuildings",
        "members": [
          {
            "astId": 2565,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "aquaducts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2567,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "temples",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2569,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "castles",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2571,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "markets",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2573,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ports",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2575,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "barracks",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2577,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "farms",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2579,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "shipyard",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2581,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "fishingVillage",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmInfo)2551_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 2522,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2524,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2526,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2528,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2530,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2533,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2535,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 2537,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 2539,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 2541,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 2543,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 2545,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 2550,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)2558_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RealmStatistics)2520_storage": {
        "encoding": "inplace",
        "label": "struct RealmStatistics",
        "members": [
          {
            "astId": 2511,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmDefence",
            "offset": 0,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 2513,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmOffence",
            "offset": 4,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 2515,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmMagic",
            "offset": 8,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 2517,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "foodSupply",
            "offset": 12,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 2519,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "population",
            "offset": 16,
            "slot": "0",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ResourceInfo)2558_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 2553,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2555,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2557,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)2509_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 2504,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2506,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2508,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UpgradeCostLevels)2629_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 2628,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)2625_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 2619,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 2624,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)2629_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}