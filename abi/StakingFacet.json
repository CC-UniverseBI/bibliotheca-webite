{
  "address": "0xDf1c43D715380750703B996491CC0cef80D9E72a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_traits",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_resources",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_orderOf",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_wonder",
          "type": "uint8"
        }
      ],
      "name": "RealmData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lord",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realmStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "RealmStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lord",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realmUnstaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "RealmUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "ResourcesClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "get30DayVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgeClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgeSettled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmId",
          "type": "uint256"
        }
      ],
      "name": "getAllStatistics",
      "outputs": [
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAllTraits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFoodSupply",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmId",
          "type": "uint256"
        }
      ],
      "name": "getHappiness",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHarbours",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPopulation",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRealmAgeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRealmInformation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastupdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRegions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getResourceIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getResourceLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRivers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getWonder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "_traits",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_resources",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8",
          "name": "_orderOf",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_wonder",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_update",
          "type": "bool"
        }
      ],
      "name": "stakeRealm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sTokenId",
          "type": "uint256"
        }
      ],
      "name": "unstakeAndExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "withdrawAllResources",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "withdrawSingleRealmResources",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1435a938c9944b452b780e4615259b2092ed9644f73781510bdfc3bd0337574f",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0xDf1c43D715380750703B996491CC0cef80D9E72a",
    "transactionIndex": 0,
    "gasUsed": "123815541",
    "logsBloom": "0x
    "blockHash": "0xaff46d3bd40799e7eced7256dc4ff93bfaafba162fdb666b6bad3cf6cea5f4d5",
    "transactionHash": "0x1435a938c9944b452b780e4615259b2092ed9644f73781510bdfc3bd0337574f",
    "logs": [],
    "blockNumber": 5769699,
    "cumulativeGasUsed": "97178321",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e2eba280838dd59d2b6d17f95dfd9501",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_traits\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_resources\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_orderOf\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_wonder\",\"type\":\"uint8\"}],\"name\":\"RealmData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realmStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"RealmStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realmUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"RealmUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"ResourcesClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"get30DayVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgeSettled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmId\",\"type\":\"uint256\"}],\"name\":\"getAllStatistics\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAllTraits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getFoodSupply\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmId\",\"type\":\"uint256\"}],\"name\":\"getHappiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHarbours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPopulation\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRealmAgeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRealmInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastupdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRegions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getResourceIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getResourceLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRivers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWonder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"_traits\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_resources\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"_orderOf\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_wonder\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"stakeRealm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sTokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeAndExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"withdrawAllResources\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"withdrawSingleRealmResources\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/StakingFacet.sol\":\"StakingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/StakingFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract StakingFacet {\\n    AppStorage internal s;\\n\\n    event Init(uint256 _tokenId);\\n    event RealmStaked(address _lord, uint256 _realmStaked, uint256 _age);\\n    event RealmUnstaked(address _lord, uint256 _realmUnstaked, uint256 _age);\\n    event ResourcesClaimed(uint256[], uint256[]);\\n    event RealmData(\\n        uint256 _tokenId,\\n        string _name,\\n        uint8[] _traits,\\n        uint8[] _resources,\\n        uint8 _orderOf,\\n        uint8 _wonder\\n    );\\n\\n    function getRealmInformation(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256 lastupdate)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.lastUpdateAt;\\n    }\\n\\n    function stakeRealm(uint256 _tokenId, bool _update)\\n        public\\n        payable\\n        checkRealmOwner(_tokenId)\\n    {\\n        // init contracts\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_tokenId];\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        // mint sRealm\\n        sRealmstoken.mintFromStakingContract(msg.sender, _tokenId);\\n\\n        // transfer realms token\\n        realmstoken.safeTransferFrom(msg.sender, s.treasury, _tokenId);\\n\\n        uint256 currentAge = (block.timestamp - s.genesisTime) / (1 days);\\n\\n        s.theAges[currentAge].settledRealms++;\\n\\n        // if update is false update lastUpdate else set up initial struct and trigger oracle\\n        if (!_update) {\\n            realmInfo.lastUpdateAt = block.timestamp;\\n            realmInfo.vestedTimeUpdatedAt = block.timestamp;\\n            realmInfo.ageSettled = currentAge;\\n            realmInfo.ageClaimed = currentAge;\\n        } else {\\n            // setup realmInfo Struct\\n            realmInfo.lastUpdateAt = block.timestamp;\\n            realmInfo.vestedTimeUpdatedAt = block.timestamp;\\n            realmInfo.ageSettled = currentAge;\\n            realmInfo.ageClaimed = currentAge;\\n            // realmInfo.foodSupply = 100; // set @ base of 100\\n\\n            //check if stats have been set before\\n            if (realmStatistics.foodSupply == 0) {\\n                realmStatistics.foodSupply = 0; // set @ base of 100\\n                realmStatistics.realmDefence = 1;\\n                realmStatistics.realmOffence = 1;\\n                realmStatistics.realmMagic = 1;\\n            }\\n\\n            emit Init(_tokenId);\\n            emit RealmStaked(msg.sender, _tokenId, currentAge);\\n        }\\n    }\\n\\n    function init(\\n        uint256 _tokenId,\\n        string memory _name,\\n        uint8[] memory _traits,\\n        uint8[] memory _resources,\\n        uint8 _orderOf,\\n        uint8 _wonder\\n    ) public {\\n        // require(msg.sender == s.oracle, \\\"Only The Oracle Can Update\\\"); //commented out for testing\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        //Add Name\\n        realmInfo.name = _name;\\n\\n        // Set order\\n        realmInfo.orderOf = _orderOf;\\n\\n        //Set Regions, Cities, Harbors, Rivers\\n        realmInfo.regions = _traits[0];\\n        realmInfo.cities = _traits[1];\\n        realmInfo.harbours = _traits[2];\\n        realmInfo.rivers = _traits[3];\\n\\n        // create resource id array\\n        for (uint8 i = 0; i < _resources.length; i++) {\\n            realmInfo.resourceIds.push(_resources[i]);\\n        }\\n\\n        //Add the resource ids with base level and production rate\\n        for (uint8 i = 0; i < _resources.length; i++) {\\n            realmInfo.resourceInfo[_resources[i]].id = _resources[i];\\n            realmInfo.resourceInfo[_resources[i]].level = 1;\\n            realmInfo.resourceInfo[_resources[i]].production = 10;\\n        }\\n\\n        //Log wonder if wonder != 0\\n        if (_wonder != 0) {\\n            realmInfo.wonders = _wonder;\\n        }\\n        emit RealmData(_tokenId, _name, _traits, _resources, _orderOf, _wonder);\\n    }\\n\\n    function withdrawSingleRealmResources(\\n        uint256 _tokenId,\\n        bytes calldata _calldata\\n    ) public payable checkSRealmOwner(_tokenId) {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        uint256[] memory realmsResourcesOutputs = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        uint256[] memory treasuryResourcesOutputs = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        require(\\n            _getAvailableResources(realmInfo.lastUpdateAt) +\\n                _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt) >\\n                1,\\n            \\\"not enough resouces\\\"\\n        );\\n\\n        uint256 total = _getAvailableResources(realmInfo.lastUpdateAt) +\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt);\\n\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 90) / 10) *\\n                    _getHappiness(_tokenId)) /\\n                100; // replace with resourcesAvailable\\n            treasuryResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 10) / 90) *\\n                    _getHappiness(_tokenId)) /\\n                100; // replace with resourcesAvailable\\n        }\\n\\n        // return the remaining time\\n        realmInfo.lastUpdateAt = _returnTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt)\\n        );\\n        realmInfo.vestedTimeUpdatedAt = _returnTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt)\\n        );\\n\\n        // send to minter and mint\\n        resourceTokens.resourceMinting(\\n            msg.sender,\\n            realmInfo.resourceIds,\\n            realmsResourcesOutputs,\\n            _calldata\\n        );\\n\\n        emit ResourcesClaimed(realmInfo.resourceIds, realmsResourcesOutputs);\\n    }\\n\\n    function _withdrawResources(uint256 _tokenId)\\n        private\\n        checkSRealmOwner(_tokenId)\\n        returns (\\n            uint256[] memory _ids,\\n            uint256[] memory _realmsResourcesOutputs\\n        )\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        _realmsResourcesOutputs = new uint256[](realmInfo.resourceIds.length);\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        uint256 total = _getAvailableResources(realmInfo.lastUpdateAt) +\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt);\\n\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            _realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * 1) * 90) / 10) *\\n                    _getHappiness(_tokenId)) /\\n                100; // replace with resourcesAvailable\\n        }\\n\\n        // return the remaining time\\n        realmInfo.lastUpdateAt = _returnTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt)\\n        );\\n\\n        realmInfo.vestedTimeUpdatedAt = _returnTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt)\\n        );\\n\\n        return (realmInfo.resourceIds, _realmsResourcesOutputs);\\n    }\\n\\n    function withdrawAllResources(bytes calldata _calldata) public payable {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        uint256 tokenBalanceOwner = sRealmstoken.balanceOf(msg.sender);\\n        uint256[] memory _ids;\\n        uint256[] memory _settlerValues;\\n\\n        uint256[] memory _totalIds = new uint256[](22);\\n        uint256[] memory _totalSettlerValues = new uint256[](22);\\n\\n        for (uint256 i = 0; i < tokenBalanceOwner; i++) {\\n            (_ids, _settlerValues) = _withdrawResources(\\n                sRealmstoken.tokenOfOwnerByIndex(msg.sender, i)\\n            );\\n\\n            for (uint256 x = 0; x < _ids.length; x++) {\\n                _totalIds[_ids[x]] = _ids[x];\\n                _totalSettlerValues[_ids[x]] += _settlerValues[x];\\n            }\\n        }\\n        resourceTokens.batchResourceMinting(\\n            msg.sender,\\n            _totalIds,\\n            _totalSettlerValues,\\n            _calldata\\n        );\\n    }\\n\\n    function _getHappiness(uint256 _realmId) internal view returns (uint32) {\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_realmId];\\n        int32 food;\\n\\n        if (realmStatistics.foodSupply < 0) {\\n            food = ((100 * realmStatistics.foodSupply) * 20) / 1000;\\n        } else {\\n            food = 0;\\n        }\\n        int32 happiness = 100 +\\n            ((100 * (realmStatistics.population * 4)) / 1000) +\\n            food;\\n\\n        return uint32(happiness);\\n    }\\n\\n    function getHappiness(uint256 _realmId) public view returns (uint256) {\\n        return _getHappiness(_realmId);\\n    }\\n\\n    function _returnTime(uint256 _lastUpdate, uint256 _resourcesAvailable)\\n        internal\\n        pure\\n        returns (uint256 _time)\\n    {\\n        _time = _lastUpdate + _resourcesAvailable * 1 hours;\\n        return _time;\\n    }\\n\\n    function _getAvailableResources(uint256 _lastUpdate)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - _lastUpdate) / 1 hours;\\n    }\\n\\n    function _getAvailableVestedResources(uint256 _vestedTimeUpdatedAt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 vested;\\n        vested = (block.timestamp - _vestedTimeUpdatedAt) / 1 hours;\\n        if (vested > 31 hours) {\\n            vested = vested - 30 hours;\\n        }\\n        return vested;\\n    }\\n\\n    // TODO: We could add a withdraw here\\n    function unstakeAndExit(uint256 _sTokenId)\\n        public\\n        checkSRealmOwner(_sTokenId)\\n    {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        RealmInfo storage realmInfo = s.realmInfo[_sTokenId];\\n        uint256 currentAge = (block.timestamp - s.genesisTime) / (1 days);\\n        // reset time\\n        realmInfo.lastUpdateAt = 0;\\n        realmInfo.vestedTimeUpdatedAt = 0;\\n        // transfer realm back to owner\\n        realmstoken.safeTransferFrom(s.treasury, msg.sender, _sTokenId);\\n\\n        s.theAges[realmInfo.ageSettled].settledRealms--;\\n\\n        sRealmstoken.burn(_sTokenId);\\n        emit RealmUnstaked(msg.sender, _sTokenId, currentAge);\\n    }\\n\\n    // GETTER FUNCTIONS\\n    function getVestingTime(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return block.timestamp - realmInfo.lastUpdateAt;\\n    }\\n\\n    function get30DayVestingTime(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return block.timestamp - realmInfo.vestedTimeUpdatedAt;\\n    }\\n\\n    function getAllStatistics(uint256 _realmId)\\n        public\\n        view\\n        returns (\\n            int32,\\n            int32,\\n            int32,\\n            int32,\\n            int32\\n        )\\n    {\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_realmId];\\n        return (\\n            realmStatistics.realmDefence,\\n            realmStatistics.realmOffence,\\n            realmStatistics.realmMagic,\\n            realmStatistics.foodSupply,\\n            realmStatistics.population\\n        );\\n    }\\n\\n    function getAllTraits(uint256 _tokenId)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return (\\n            realmInfo.regions,\\n            realmInfo.cities,\\n            realmInfo.harbours,\\n            realmInfo.rivers,\\n            realmInfo.orderOf,\\n            realmInfo.wonders\\n        );\\n    }\\n\\n    function getName(uint256 _tokenId) public view returns (string memory) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.name;\\n    }\\n\\n    function getRegions(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.regions;\\n    }\\n\\n    function getCities(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.cities;\\n    }\\n\\n    function getHarbours(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.harbours;\\n    }\\n\\n    function getRivers(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.rivers;\\n    }\\n\\n    function getResourceIds(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.resourceIds;\\n    }\\n\\n    function getResourceLength(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.resourceIds.length;\\n    }\\n\\n    function getWonder(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.wonders;\\n    }\\n\\n    function getAgeSettled(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.ageSettled;\\n    }\\n\\n    function getAgeClaimed(uint256 _tokenId) public view returns (uint256) {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.ageClaimed;\\n    }\\n\\n    function getRealmAgeInfo(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (getAgeSettled(_tokenId), getAgeClaimed(_tokenId));\\n    }\\n\\n    function getPopulation(uint256 _tokenId) public view returns (int256) {\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_tokenId];\\n        return realmStatistics.population;\\n    }\\n\\n    function getFoodSupply(uint256 _tokenId) public view returns (int256) {\\n        RealmStatistics storage realmStatistics = s.realmStatistics[_tokenId];\\n        return realmStatistics.foodSupply;\\n    }\\n\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xceabd83b68b1d73fcfa3dda93b26f5c2827da86d42ad5d6d671a2bf143ececfc\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    mapping(uint256 => RealmStatistics) realmStatistics;\\n    mapping(uint256 => RealmBuildings) realmBuildings;\\n    uint8 baseProductionRate;\\n    uint8 maxProductionRate;\\n    address sRealms;\\n    address realms;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmStatistics {\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct StatsInfo {\\n    uint8 id;\\n    uint8 value; // level of statistic\\n}\\n\\nstruct RealmBuildings {\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xc165c0821fd3bbe8678ab7a5ec078a6c875b8e01d2c27558f37d551fbdf70eaa\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function productionBuildingsBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x259fdded2348c09c4a61d4b01baf8730cb2102b1ef9a02374b19874400c620ba\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613c52806100206000396000f3fe60806040526004361061014b5760003560e01c80636a589f86116100b65780639fb42cf41161006f5780639fb42cf414610534578063a771303f14610576578063ab67134b14610592578063b47e8c5e146105cf578063da37000b1461060c578063db99740f146106495761014b565b80636a589f861461040b5780636b8ff574146104345780636bd1d84d146104715780637fe4faf8146104b25780638775d442146104ef578063913436241461050b5761014b565b8063322942ee11610108578063322942ee1461029d5780633e383b43146102da578063431f88641461031757806346b9cb8a146103545780635c5081281461039157806361eb6865146103ce5761014b565b806304eaf327146101505780631634a51d1461018d57806319d7151d146101ca578063255a42171461020757806329e0ba66146102445780632f78e37314610260575b600080fd5b34801561015c57600080fd5b5061017760048036038101906101729190612cc0565b610687565b6040516101849190613370565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190612cc0565b6106be565b6040516101c191906132a0565b60405180910390f35b3480156101d657600080fd5b506101f160048036038101906101ec9190612cc0565b6106f6565b6040516101fe9190613370565b60405180910390f35b34801561021357600080fd5b5061022e60048036038101906102299190612cc0565b61072d565b60405161023b9190613370565b60405180910390f35b61025e60048036038101906102599190612d4e565b610754565b005b34801561026c57600080fd5b5061028760048036038101906102829190612cc0565b610e51565b6040516102949190613370565b60405180910390f35b3480156102a957600080fd5b506102c460048036038101906102bf9190612cc0565b610e69565b6040516102d19190613370565b60405180910390f35b3480156102e657600080fd5b5061030160048036038101906102fc9190612cc0565b610e9b565b60405161030e9190613370565b60405180910390f35b34801561032357600080fd5b5061033e60048036038101906103399190612cc0565b610ec2565b60405161034b91906132a0565b60405180910390f35b34801561036057600080fd5b5061037b60048036038101906103769190612cc0565b610efa565b6040516103889190613370565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b39190612cc0565b610f2c565b6040516103c59190613370565b60405180910390f35b3480156103da57600080fd5b506103f560048036038101906103f09190612cc0565b610f56565b6040516104029190613247565b60405180910390f35b34801561041757600080fd5b50610432600480360381019061042d9190612da6565b610fcc565b005b34801561044057600080fd5b5061045b60048036038101906104569190612cc0565b611467565b604051610468919061330e565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190612cc0565b611517565b6040516104a99594939291906132bb565b60405180910390f35b3480156104be57600080fd5b506104d960048036038101906104d49190612cc0565b6115a6565b6040516104e69190613370565b60405180910390f35b61050960048036038101906105049190612c7b565b6115dd565b005b34801561051757600080fd5b50610532600480360381019061052d9190612cc0565b611a9a565b005b34801561054057600080fd5b5061055b60048036038101906105569190612cc0565b611dd2565b60405161056d9695949392919061342a565b60405180910390f35b610590600480360381019061058b9190612d12565b611e9a565b005b34801561059e57600080fd5b506105b960048036038101906105b49190612cc0565b61231b565b6040516105c69190613370565b60405180910390f35b3480156105db57600080fd5b506105f660048036038101906105f19190612cc0565b612352565b6040516106039190613370565b60405180910390f35b34801561061857600080fd5b50610633600480360381019061062e9190612cc0565b612389565b6040516106409190613370565b60405180910390f35b34801561065557600080fd5b50610670600480360381019061066b9190612cc0565b6123b0565b60405161067e929190613401565b60405180910390f35b60008060008001600084815260200190815260200160002090508060060160019054906101000a900460ff1660ff16915050919050565b6000806000600101600084815260200190815260200160002090508060000160109054906101000a900460030b60030b915050919050565b60008060008001600084815260200190815260200160002090508060060160049054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060040154915050919050565b8260008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016107b79190613370565b60206040518083038186803b1580156107cf57600080fd5b505afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190612c52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90613330565b60405180910390fd5b60008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600088815260200190815260200160002090506000816005018054905067ffffffffffffffff8111156108ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561092d5781602001602082028036833780820191505090505b5090506000826005018054905067ffffffffffffffff811115610979577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156109a75781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff8111156109f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a215781602001602082028036833780820191505090505b50905060005b8460050180549050811015610afd57846007016000866005018381548110610a78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16848281518110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610af590613a0e565b915050610a27565b506001610b0d85600201546123ce565b610b1a8660010154612412565b610b249190613651565b11610b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5b90613350565b60405180910390fd5b6000610b7385600201546123ce565b610b808660010154612412565b610b8a9190613651565b905060005b8560050180549050811015610d4d576064610ba98d612434565b63ffffffff16600a605a85898681518110610bed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610bff9190613821565b610c099190613821565b610c139190613711565b610c1d9190613821565b610c279190613711565b848281518110610c60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506064610c778d612434565b63ffffffff16605a600a85898681518110610cbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610ccd9190613821565b610cd79190613821565b610ce19190613711565b610ceb9190613821565b610cf59190613711565b838281518110610d2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610d4590613a0e565b915050610b8f565b50610d688560010154610d638760010154612412565b61250d565b8560010181905550610d8a8560020154610d8587600201546123ce565b61250d565b85600201819055508573ffffffffffffffffffffffffffffffffffffffff16638edf55bf3387600501868e8e6040518663ffffffff1660e01b8152600401610dd695949392919061318b565b600060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b505050507f80622db75391035b375fd650fdd63615c99c66f0610ec81d9acee6ca1e0d927b8560050184604051610e3c929190613269565b60405180910390a15050505050505050505050565b6000610e5c82612434565b63ffffffff169050919050565b6000806000800160008481526020019081526020016000209050806002015442610e93919061387b565b915050919050565b60008060008001600084815260200190815260200160002090508060030154915050919050565b60008060006001016000848152602001908152602001600020905080600001600c9054906101000a900460030b60030b915050919050565b6000806000800160008481526020019081526020016000209050806001015442610f24919061387b565b915050919050565b60008060008001600084815260200190815260200160002090508060050180549050915050919050565b60606000806000016000848152602001908152602001600020905080600501805480602002602001604051908101604052809291908181526020018280548015610fbf57602002820191906000526020600020905b815481526020019060010190808311610fab575b5050505050915050919050565b6000806000016000888152602001908152602001600020905085816000019080519060200190610ffd9291906129fe565b50828160060160056101000a81548160ff021916908360ff16021790555084600081518110611055577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160036101000a81548160ff021916908360ff160217905550846001815181106110b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160006101000a81548160ff021916908360ff16021790555084600281518110611111577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160016101000a81548160ff021916908360ff1602179055508460038151811061116f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160026101000a81548160ff021916908360ff16021790555060005b84518160ff1610156112265781600501858260ff16815181106111e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151908060018154018082558091505060019003906000526020600020016000909160ff16909190915055808061121e90613a57565b915050611196565b5060005b84518160ff1610156113f357848160ff1681518110611272577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826007016000878460ff16815181106112bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506001826007016000878460ff1681518110611334577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff160217905550600a826007016000878460ff16815181106113ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160026101000a81548160ff021916908360ff16021790555080806113eb90613a57565b91505061122a565b5060008260ff161461141d57818160060160046101000a81548160ff021916908360ff1602179055505b7fe3c8f0bd20211d0bc86a10e012946d813c237c180cd4f11e74d1b658b8f5367a8787878787876040516114569695949392919061338b565b60405180910390a150505050505050565b60606000806000016000848152602001908152602001600020905080600001805461149190613991565b80601f01602080910402602001604051908101604052809291908181526020018280546114bd90613991565b801561150a5780601f106114df5761010080835404028352916020019161150a565b820191906000526020600020905b8154815290600101906020018083116114ed57829003601f168201915b5050505050915050919050565b6000806000806000806000600101600088815260200190815260200160002090508060000160009054906101000a900460030b8160000160049054906101000a900460030b8260000160089054906101000a900460030b83600001600c9054906101000a900460030b8460000160109054906101000a900460030b955095509550955095505091939590929450565b60008060008001600084815260200190815260200160002090508060060160009054906101000a900460ff1660ff16915050919050565b60008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161166a91906130dd565b60206040518083038186803b15801561168257600080fd5b505afa158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba9190612ce9565b90506060806000601667ffffffffffffffff811115611702577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117305781602001602082028036833780820191505090505b5090506000601667ffffffffffffffff811115611776577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117a45781602001602082028036833780820191505090505b50905060005b85811015611a1b576118458773ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b81526004016117f09291906131e7565b60206040518083038186803b15801561180857600080fd5b505afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118409190612ce9565b612530565b809550819650505060005b8551811015611a0757858181518110611892577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848783815181106118d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181518110611913577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050848181518110611958577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518387838151811061199a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815181106119d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181516119ed9190613651565b9150818152505080806119ff90613a0e565b915050611850565b508080611a1390613a0e565b9150506117aa565b508673ffffffffffffffffffffffffffffffffffffffff1663c90f75593384848d8d6040518663ffffffff1660e01b8152600401611a5d95949392919061312f565b600060405180830381600087803b158015611a7757600080fd5b505af1158015611a8b573d6000803e3d6000fd5b50505050505050505050505050565b8060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611afd9190613370565b60206040518083038186803b158015611b1557600080fd5b505afa158015611b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4d9190612c52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb190613330565b60405180910390fd5b60008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600087815260200190815260200160002090506000620151806000600e015442611c3c919061387b565b611c469190613711565b905060008260010181905550600082600201819055508373ffffffffffffffffffffffffffffffffffffffff166342842e0e600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338a6040518463ffffffff1660e01b8152600401611cbe939291906130f8565b600060405180830381600087803b158015611cd857600080fd5b505af1158015611cec573d6000803e3d6000fd5b505050506000600d016000836003015481526020019081526020016000206000016000815480929190611d1e90613967565b91905055508273ffffffffffffffffffffffffffffffffffffffff166342966c68886040518263ffffffff1660e01b8152600401611d5c9190613370565b600060405180830381600087803b158015611d7657600080fd5b505af1158015611d8a573d6000803e3d6000fd5b505050507f1d5429148ee8279c8ea448f03ff7cdd042ab3c911ee5c05cb3a5a6d32dace2f2338883604051611dc193929190613210565b60405180910390a150505050505050565b600080600080600080600080600001600089815260200190815260200160002090508060060160039054906101000a900460ff168160060160009054906101000a900460ff168260060160019054906101000a900460ff168360060160029054906101000a900460ff168460060160059054906101000a900460ff168560060160049054906101000a900460ff168560ff1695508460ff1694508360ff1693508260ff1692508160ff1691508060ff1690509650965096509650965096505091939550919395565b8160008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611efd9190613370565b60206040518083038186803b158015611f1557600080fd5b505afa158015611f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4d9190612c52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb190613330565b60405180910390fd5b600080600001600086815260200190815260200160002090506000806001016000878152602001908152602001600020905060008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166321c6ddff338a6040518363ffffffff1660e01b81526004016120799291906131e7565b600060405180830381600087803b15801561209357600080fd5b505af11580156120a7573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6040518463ffffffff1660e01b815260040161210d939291906130f8565b600060405180830381600087803b15801561212757600080fd5b505af115801561213b573d6000803e3d6000fd5b505050506000620151806000600e015442612156919061387b565b6121609190613711565b90506000600d016000828152602001908152602001600020600001600081548092919061218c90613a0e565b9190505550876121bf57428560010181905550428560020181905550808560030181905550808560040181905550612310565b428560010181905550428560020181905550808560030181905550808560040181905550600084600001600c9054906101000a900460030b60030b141561229d57600084600001600c6101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160046101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160086101000a81548163ffffffff021916908360030b63ffffffff1602179055505b7f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c01338896040516122cc9190613370565b60405180910390a17fe254cd0a8f2353c72dad29e55618b11a740a94d3cc510e63a798e3381bb20fd3338a8360405161230793929190613210565b60405180910390a15b505050505050505050565b60008060008001600084815260200190815260200160002090508060060160029054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060060160039054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060010154915050919050565b6000806123bc83610e9b565b6123c58461072d565b91509150915091565b600080610e1083426123e0919061387b565b6123ea9190613711565b90506201b3f0811115612409576201a5e081612406919061387b565b90505b80915050919050565b6000610e108242612423919061387b565b61242d9190613711565b9050919050565b60008060006001016000848152602001908152602001600020905060008082600001600c9054906101000a900460030b60030b12156124ab576103e8601483600001600c9054906101000a900460030b60646124909190613742565b61249a9190613742565b6124a491906136a7565b90506124b0565b600090505b6000816103e860048560000160109054906101000a900460030b6124d49190613742565b60646124e09190613742565b6124ea91906136a7565b60646124f691906135d9565b61250091906135d9565b9050809350505050919050565b6000610e108261251d9190613821565b836125289190613651565b905092915050565b6060808260008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016125969190613370565b60206040518083038186803b1580156125ae57600080fd5b505afa1580156125c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e69190612c52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264a90613330565b60405180910390fd5b600080600001600087815260200190815260200160002090506000816005018054905067ffffffffffffffff8111156126b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156126e35781602001602082028036833780820191505090505b509050816005018054905067ffffffffffffffff81111561272d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561275b5781602001602082028036833780820191505090505b50945060005b8260050180549050811015612837578260070160008460050183815481106127b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16828281518110612818577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061282f90613a0e565b915050612761565b50600061284783600201546123ce565b6128548460010154612412565b61285e9190613651565b905060005b836005018054905081101561295457606461287d8a612434565b63ffffffff16600a605a60018786815181106128c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516128d49190613821565b6128de9190613821565b6128e89190613711565b6128f29190613821565b6128fc9190613711565b878281518110612935577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061294c90613a0e565b915050612863565b5061296f836001015461296a8560010154612412565b61250d565b8360010181905550612991836002015461298c85600201546123ce565b61250d565b83600201819055508260050186818054806020026020016040519081016040528092919081815260200182805480156129e957602002820191906000526020600020905b8154815260200190600101908083116129d5575b50505050509150965096505050505050915091565b828054612a0a90613991565b90600052602060002090601f016020900481019282612a2c5760008555612a73565b82601f10612a4557805160ff1916838001178555612a73565b82800160010185558215612a73579182015b82811115612a72578251825591602001919060010190612a57565b5b509050612a809190612a84565b5090565b5b80821115612a9d576000816000905550600101612a85565b5090565b6000612ab4612aaf846134b0565b61348b565b90508083825260208201905082856020860282011115612ad357600080fd5b60005b85811015612b035781612ae98882612c3d565b845260208401935060208301925050600181019050612ad6565b5050509392505050565b6000612b20612b1b846134dc565b61348b565b905082815260208101848484011115612b3857600080fd5b612b43848285613925565b509392505050565b600081519050612b5a81613bc0565b92915050565b600082601f830112612b7157600080fd5b8135612b81848260208601612aa1565b91505092915050565b600081359050612b9981613bd7565b92915050565b60008083601f840112612bb157600080fd5b8235905067ffffffffffffffff811115612bca57600080fd5b602083019150836001820283011115612be257600080fd5b9250929050565b600082601f830112612bfa57600080fd5b8135612c0a848260208601612b0d565b91505092915050565b600081359050612c2281613bee565b92915050565b600081519050612c3781613bee565b92915050565b600081359050612c4c81613c05565b92915050565b600060208284031215612c6457600080fd5b6000612c7284828501612b4b565b91505092915050565b60008060208385031215612c8e57600080fd5b600083013567ffffffffffffffff811115612ca857600080fd5b612cb485828601612b9f565b92509250509250929050565b600060208284031215612cd257600080fd5b6000612ce084828501612c13565b91505092915050565b600060208284031215612cfb57600080fd5b6000612d0984828501612c28565b91505092915050565b60008060408385031215612d2557600080fd5b6000612d3385828601612c13565b9250506020612d4485828601612b8a565b9150509250929050565b600080600060408486031215612d6357600080fd5b6000612d7186828701612c13565b935050602084013567ffffffffffffffff811115612d8e57600080fd5b612d9a86828701612b9f565b92509250509250925092565b60008060008060008060c08789031215612dbf57600080fd5b6000612dcd89828a01612c13565b965050602087013567ffffffffffffffff811115612dea57600080fd5b612df689828a01612be9565b955050604087013567ffffffffffffffff811115612e1357600080fd5b612e1f89828a01612b60565b945050606087013567ffffffffffffffff811115612e3c57600080fd5b612e4889828a01612b60565b9350506080612e5989828a01612c3d565b92505060a0612e6a89828a01612c3d565b9150509295509295509295565b6000612e8383836130a1565b60208301905092915050565b6000612e9b83836130bf565b60208301905092915050565b612eb0816138b9565b82525050565b6000612ec182613542565b612ecb8185613595565b9350612ed68361350d565b8060005b83811015612f07578151612eee8882612e77565b9750612ef98361356e565b925050600181019050612eda565b5085935050505092915050565b6000612f1f8261354d565b612f298185613595565b9350612f348361351d565b8060005b83811015612f6c57612f4982613b3d565b612f538882612e77565b9750612f5e8361357b565b925050600181019050612f38565b5085935050505092915050565b6000612f8482613558565b612f8e81856135a6565b9350612f9983613532565b8060005b83811015612fca578151612fb18882612e8f565b9750612fbc83613588565b925050600181019050612f9d565b5085935050505092915050565b6000612fe383856135b7565b9350612ff0838584613925565b612ff983613b50565b840190509392505050565b61300d816138d7565b82525050565b61301c816138e1565b82525050565b600061302d82613563565b61303781856135c8565b9350613047818560208601613934565b61305081613b50565b840191505092915050565b60006130686019836135c8565b915061307382613b6e565b602082019050919050565b600061308b6013836135c8565b915061309682613b97565b602082019050919050565b6130aa8161390e565b82525050565b6130b98161390e565b82525050565b6130c881613918565b82525050565b6130d781613918565b82525050565b60006020820190506130f26000830184612ea7565b92915050565b600060608201905061310d6000830186612ea7565b61311a6020830185612ea7565b61312760408301846130b0565b949350505050565b60006080820190506131446000830188612ea7565b81810360208301526131568187612eb6565b9050818103604083015261316a8186612eb6565b9050818103606083015261317f818486612fd7565b90509695505050505050565b60006080820190506131a06000830188612ea7565b81810360208301526131b28187612f14565b905081810360408301526131c68186612eb6565b905081810360608301526131db818486612fd7565b90509695505050505050565b60006040820190506131fc6000830185612ea7565b61320960208301846130b0565b9392505050565b60006060820190506132256000830186612ea7565b61323260208301856130b0565b61323f60408301846130b0565b949350505050565b600060208201905081810360008301526132618184612eb6565b905092915050565b600060408201905081810360008301526132838185612f14565b905081810360208301526132978184612eb6565b90509392505050565b60006020820190506132b56000830184613004565b92915050565b600060a0820190506132d06000830188613013565b6132dd6020830187613013565b6132ea6040830186613013565b6132f76060830185613013565b6133046080830184613013565b9695505050505050565b600060208201905081810360008301526133288184613022565b905092915050565b600060208201905081810360008301526133498161305b565b9050919050565b600060208201905081810360008301526133698161307e565b9050919050565b600060208201905061338560008301846130b0565b92915050565b600060c0820190506133a060008301896130b0565b81810360208301526133b28188613022565b905081810360408301526133c68187612f79565b905081810360608301526133da8186612f79565b90506133e960808301856130ce565b6133f660a08301846130ce565b979650505050505050565b600060408201905061341660008301856130b0565b61342360208301846130b0565b9392505050565b600060c08201905061343f60008301896130b0565b61344c60208301886130b0565b61345960408301876130b0565b61346660608301866130b0565b61347360808301856130b0565b61348060a08301846130b0565b979650505050505050565b60006134956134a6565b90506134a182826139dd565b919050565b6000604051905090565b600067ffffffffffffffff8211156134cb576134ca613b0e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156134f7576134f6613b0e565b5b61350082613b50565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006135e4826138e1565b91506135ef836138e1565b925081637fffffff0383136000831215161561360e5761360d613a81565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000003831260008312161561364657613645613a81565b5b828201905092915050565b600061365c8261390e565b91506136678361390e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561369c5761369b613a81565b5b828201905092915050565b60006136b2826138e1565b91506136bd836138e1565b9250826136cd576136cc613ab0565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000008314161561370657613705613a81565b5b828205905092915050565b600061371c8261390e565b91506137278361390e565b92508261373757613736613ab0565b5b828204905092915050565b600061374d826138e1565b9150613758836138e1565b925082637fffffff048211600084136000841316161561377b5761377a613a81565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000005831260008412600084131616156137b8576137b7613a81565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000005821260008413600084121616156137f5576137f4613a81565b5b82637fffffff058212600084126000841216161561381657613815613a81565b5b828202905092915050565b600061382c8261390e565b91506138378361390e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156138705761386f613a81565b5b828202905092915050565b60006138868261390e565b91506138918361390e565b9250828210156138a4576138a3613a81565b5b828203905092915050565b6000819050919050565b60006138c4826138ee565b9050919050565b60008115159050919050565b6000819050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613952578082015181840152602081019050613937565b83811115613961576000848401525b50505050565b60006139728261390e565b9150600082141561398657613985613a81565b5b600182039050919050565b600060028204905060018216806139a957607f821691505b602082108114156139bd576139bc613adf565b5b50919050565b60006139d66139d183613b61565b6138af565b9050919050565b6139e682613b50565b810181811067ffffffffffffffff82111715613a0557613a04613b0e565b5b80604052505050565b6000613a198261390e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a4c57613a4b613a81565b5b600182019050919050565b6000613a6282613918565b915060ff821415613a7657613a75613a81565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000613b4982546139c3565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f6e6f7420656e6f756768207265736f7563657300000000000000000000000000600082015250565b613bc9816138b9565b8114613bd457600080fd5b50565b613be0816138cb565b8114613beb57600080fd5b50565b613bf78161390e565b8114613c0257600080fd5b50565b613c0e81613918565b8114613c1957600080fd5b5056fea264697066735822122044db963196c5f90805ff45f16a5dcfcd7720ba51622dfdf1a675533dd1182f9e64736f6c63430008030033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80636a589f86116100b65780639fb42cf41161006f5780639fb42cf414610534578063a771303f14610576578063ab67134b14610592578063b47e8c5e146105cf578063da37000b1461060c578063db99740f146106495761014b565b80636a589f861461040b5780636b8ff574146104345780636bd1d84d146104715780637fe4faf8146104b25780638775d442146104ef578063913436241461050b5761014b565b8063322942ee11610108578063322942ee1461029d5780633e383b43146102da578063431f88641461031757806346b9cb8a146103545780635c5081281461039157806361eb6865146103ce5761014b565b806304eaf327146101505780631634a51d1461018d57806319d7151d146101ca578063255a42171461020757806329e0ba66146102445780632f78e37314610260575b600080fd5b34801561015c57600080fd5b5061017760048036038101906101729190612cc0565b610687565b6040516101849190613370565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190612cc0565b6106be565b6040516101c191906132a0565b60405180910390f35b3480156101d657600080fd5b506101f160048036038101906101ec9190612cc0565b6106f6565b6040516101fe9190613370565b60405180910390f35b34801561021357600080fd5b5061022e60048036038101906102299190612cc0565b61072d565b60405161023b9190613370565b60405180910390f35b61025e60048036038101906102599190612d4e565b610754565b005b34801561026c57600080fd5b5061028760048036038101906102829190612cc0565b610e51565b6040516102949190613370565b60405180910390f35b3480156102a957600080fd5b506102c460048036038101906102bf9190612cc0565b610e69565b6040516102d19190613370565b60405180910390f35b3480156102e657600080fd5b5061030160048036038101906102fc9190612cc0565b610e9b565b60405161030e9190613370565b60405180910390f35b34801561032357600080fd5b5061033e60048036038101906103399190612cc0565b610ec2565b60405161034b91906132a0565b60405180910390f35b34801561036057600080fd5b5061037b60048036038101906103769190612cc0565b610efa565b6040516103889190613370565b60405180910390f35b34801561039d57600080fd5b506103b860048036038101906103b39190612cc0565b610f2c565b6040516103c59190613370565b60405180910390f35b3480156103da57600080fd5b506103f560048036038101906103f09190612cc0565b610f56565b6040516104029190613247565b60405180910390f35b34801561041757600080fd5b50610432600480360381019061042d9190612da6565b610fcc565b005b34801561044057600080fd5b5061045b60048036038101906104569190612cc0565b611467565b604051610468919061330e565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190612cc0565b611517565b6040516104a99594939291906132bb565b60405180910390f35b3480156104be57600080fd5b506104d960048036038101906104d49190612cc0565b6115a6565b6040516104e69190613370565b60405180910390f35b61050960048036038101906105049190612c7b565b6115dd565b005b34801561051757600080fd5b50610532600480360381019061052d9190612cc0565b611a9a565b005b34801561054057600080fd5b5061055b60048036038101906105569190612cc0565b611dd2565b60405161056d9695949392919061342a565b60405180910390f35b610590600480360381019061058b9190612d12565b611e9a565b005b34801561059e57600080fd5b506105b960048036038101906105b49190612cc0565b61231b565b6040516105c69190613370565b60405180910390f35b3480156105db57600080fd5b506105f660048036038101906105f19190612cc0565b612352565b6040516106039190613370565b60405180910390f35b34801561061857600080fd5b50610633600480360381019061062e9190612cc0565b612389565b6040516106409190613370565b60405180910390f35b34801561065557600080fd5b50610670600480360381019061066b9190612cc0565b6123b0565b60405161067e929190613401565b60405180910390f35b60008060008001600084815260200190815260200160002090508060060160019054906101000a900460ff1660ff16915050919050565b6000806000600101600084815260200190815260200160002090508060000160109054906101000a900460030b60030b915050919050565b60008060008001600084815260200190815260200160002090508060060160049054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060040154915050919050565b8260008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016107b79190613370565b60206040518083038186803b1580156107cf57600080fd5b505afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190612c52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90613330565b60405180910390fd5b60008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600088815260200190815260200160002090506000816005018054905067ffffffffffffffff8111156108ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561092d5781602001602082028036833780820191505090505b5090506000826005018054905067ffffffffffffffff811115610979577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156109a75781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff8111156109f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a215781602001602082028036833780820191505090505b50905060005b8460050180549050811015610afd57846007016000866005018381548110610a78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16848281518110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610af590613a0e565b915050610a27565b506001610b0d85600201546123ce565b610b1a8660010154612412565b610b249190613651565b11610b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5b90613350565b60405180910390fd5b6000610b7385600201546123ce565b610b808660010154612412565b610b8a9190613651565b905060005b8560050180549050811015610d4d576064610ba98d612434565b63ffffffff16600a605a85898681518110610bed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610bff9190613821565b610c099190613821565b610c139190613711565b610c1d9190613821565b610c279190613711565b848281518110610c60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506064610c778d612434565b63ffffffff16605a600a85898681518110610cbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610ccd9190613821565b610cd79190613821565b610ce19190613711565b610ceb9190613821565b610cf59190613711565b838281518110610d2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610d4590613a0e565b915050610b8f565b50610d688560010154610d638760010154612412565b61250d565b8560010181905550610d8a8560020154610d8587600201546123ce565b61250d565b85600201819055508573ffffffffffffffffffffffffffffffffffffffff16638edf55bf3387600501868e8e6040518663ffffffff1660e01b8152600401610dd695949392919061318b565b600060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b505050507f80622db75391035b375fd650fdd63615c99c66f0610ec81d9acee6ca1e0d927b8560050184604051610e3c929190613269565b60405180910390a15050505050505050505050565b6000610e5c82612434565b63ffffffff169050919050565b6000806000800160008481526020019081526020016000209050806002015442610e93919061387b565b915050919050565b60008060008001600084815260200190815260200160002090508060030154915050919050565b60008060006001016000848152602001908152602001600020905080600001600c9054906101000a900460030b60030b915050919050565b6000806000800160008481526020019081526020016000209050806001015442610f24919061387b565b915050919050565b60008060008001600084815260200190815260200160002090508060050180549050915050919050565b60606000806000016000848152602001908152602001600020905080600501805480602002602001604051908101604052809291908181526020018280548015610fbf57602002820191906000526020600020905b815481526020019060010190808311610fab575b5050505050915050919050565b6000806000016000888152602001908152602001600020905085816000019080519060200190610ffd9291906129fe565b50828160060160056101000a81548160ff021916908360ff16021790555084600081518110611055577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160036101000a81548160ff021916908360ff160217905550846001815181106110b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160006101000a81548160ff021916908360ff16021790555084600281518110611111577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160016101000a81548160ff021916908360ff1602179055508460038151811061116f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160026101000a81548160ff021916908360ff16021790555060005b84518160ff1610156112265781600501858260ff16815181106111e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151908060018154018082558091505060019003906000526020600020016000909160ff16909190915055808061121e90613a57565b915050611196565b5060005b84518160ff1610156113f357848160ff1681518110611272577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826007016000878460ff16815181106112bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506001826007016000878460ff1681518110611334577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff160217905550600a826007016000878460ff16815181106113ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160026101000a81548160ff021916908360ff16021790555080806113eb90613a57565b91505061122a565b5060008260ff161461141d57818160060160046101000a81548160ff021916908360ff1602179055505b7fe3c8f0bd20211d0bc86a10e012946d813c237c180cd4f11e74d1b658b8f5367a8787878787876040516114569695949392919061338b565b60405180910390a150505050505050565b60606000806000016000848152602001908152602001600020905080600001805461149190613991565b80601f01602080910402602001604051908101604052809291908181526020018280546114bd90613991565b801561150a5780601f106114df5761010080835404028352916020019161150a565b820191906000526020600020905b8154815290600101906020018083116114ed57829003601f168201915b5050505050915050919050565b6000806000806000806000600101600088815260200190815260200160002090508060000160009054906101000a900460030b8160000160049054906101000a900460030b8260000160089054906101000a900460030b83600001600c9054906101000a900460030b8460000160109054906101000a900460030b955095509550955095505091939590929450565b60008060008001600084815260200190815260200160002090508060060160009054906101000a900460ff1660ff16915050919050565b60008060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161166a91906130dd565b60206040518083038186803b15801561168257600080fd5b505afa158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba9190612ce9565b90506060806000601667ffffffffffffffff811115611702577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117305781602001602082028036833780820191505090505b5090506000601667ffffffffffffffff811115611776577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117a45781602001602082028036833780820191505090505b50905060005b85811015611a1b576118458773ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b81526004016117f09291906131e7565b60206040518083038186803b15801561180857600080fd5b505afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118409190612ce9565b612530565b809550819650505060005b8551811015611a0757858181518110611892577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848783815181106118d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181518110611913577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050848181518110611958577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518387838151811061199a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815181106119d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181516119ed9190613651565b9150818152505080806119ff90613a0e565b915050611850565b508080611a1390613a0e565b9150506117aa565b508673ffffffffffffffffffffffffffffffffffffffff1663c90f75593384848d8d6040518663ffffffff1660e01b8152600401611a5d95949392919061312f565b600060405180830381600087803b158015611a7757600080fd5b505af1158015611a8b573d6000803e3d6000fd5b50505050505050505050505050565b8060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611afd9190613370565b60206040518083038186803b158015611b1557600080fd5b505afa158015611b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4d9190612c52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb190613330565b60405180910390fd5b60008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600087815260200190815260200160002090506000620151806000600e015442611c3c919061387b565b611c469190613711565b905060008260010181905550600082600201819055508373ffffffffffffffffffffffffffffffffffffffff166342842e0e600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338a6040518463ffffffff1660e01b8152600401611cbe939291906130f8565b600060405180830381600087803b158015611cd857600080fd5b505af1158015611cec573d6000803e3d6000fd5b505050506000600d016000836003015481526020019081526020016000206000016000815480929190611d1e90613967565b91905055508273ffffffffffffffffffffffffffffffffffffffff166342966c68886040518263ffffffff1660e01b8152600401611d5c9190613370565b600060405180830381600087803b158015611d7657600080fd5b505af1158015611d8a573d6000803e3d6000fd5b505050507f1d5429148ee8279c8ea448f03ff7cdd042ab3c911ee5c05cb3a5a6d32dace2f2338883604051611dc193929190613210565b60405180910390a150505050505050565b600080600080600080600080600001600089815260200190815260200160002090508060060160039054906101000a900460ff168160060160009054906101000a900460ff168260060160019054906101000a900460ff168360060160029054906101000a900460ff168460060160059054906101000a900460ff168560060160049054906101000a900460ff168560ff1695508460ff1694508360ff1693508260ff1692508160ff1691508060ff1690509650965096509650965096505091939550919395565b8160008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611efd9190613370565b60206040518083038186803b158015611f1557600080fd5b505afa158015611f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4d9190612c52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb190613330565b60405180910390fd5b600080600001600086815260200190815260200160002090506000806001016000878152602001908152602001600020905060008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166321c6ddff338a6040518363ffffffff1660e01b81526004016120799291906131e7565b600060405180830381600087803b15801561209357600080fd5b505af11580156120a7573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6040518463ffffffff1660e01b815260040161210d939291906130f8565b600060405180830381600087803b15801561212757600080fd5b505af115801561213b573d6000803e3d6000fd5b505050506000620151806000600e015442612156919061387b565b6121609190613711565b90506000600d016000828152602001908152602001600020600001600081548092919061218c90613a0e565b9190505550876121bf57428560010181905550428560020181905550808560030181905550808560040181905550612310565b428560010181905550428560020181905550808560030181905550808560040181905550600084600001600c9054906101000a900460030b60030b141561229d57600084600001600c6101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160006101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160046101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460000160086101000a81548163ffffffff021916908360030b63ffffffff1602179055505b7f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c01338896040516122cc9190613370565b60405180910390a17fe254cd0a8f2353c72dad29e55618b11a740a94d3cc510e63a798e3381bb20fd3338a8360405161230793929190613210565b60405180910390a15b505050505050505050565b60008060008001600084815260200190815260200160002090508060060160029054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060060160039054906101000a900460ff1660ff16915050919050565b60008060008001600084815260200190815260200160002090508060010154915050919050565b6000806123bc83610e9b565b6123c58461072d565b91509150915091565b600080610e1083426123e0919061387b565b6123ea9190613711565b90506201b3f0811115612409576201a5e081612406919061387b565b90505b80915050919050565b6000610e108242612423919061387b565b61242d9190613711565b9050919050565b60008060006001016000848152602001908152602001600020905060008082600001600c9054906101000a900460030b60030b12156124ab576103e8601483600001600c9054906101000a900460030b60646124909190613742565b61249a9190613742565b6124a491906136a7565b90506124b0565b600090505b6000816103e860048560000160109054906101000a900460030b6124d49190613742565b60646124e09190613742565b6124ea91906136a7565b60646124f691906135d9565b61250091906135d9565b9050809350505050919050565b6000610e108261251d9190613821565b836125289190613651565b905092915050565b6060808260008060030160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016125969190613370565b60206040518083038186803b1580156125ae57600080fd5b505afa1580156125c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e69190612c52565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264a90613330565b60405180910390fd5b600080600001600087815260200190815260200160002090506000816005018054905067ffffffffffffffff8111156126b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156126e35781602001602082028036833780820191505090505b509050816005018054905067ffffffffffffffff81111561272d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561275b5781602001602082028036833780820191505090505b50945060005b8260050180549050811015612837578260070160008460050183815481106127b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16828281518110612818577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061282f90613a0e565b915050612761565b50600061284783600201546123ce565b6128548460010154612412565b61285e9190613651565b905060005b836005018054905081101561295457606461287d8a612434565b63ffffffff16600a605a60018786815181106128c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516128d49190613821565b6128de9190613821565b6128e89190613711565b6128f29190613821565b6128fc9190613711565b878281518110612935577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061294c90613a0e565b915050612863565b5061296f836001015461296a8560010154612412565b61250d565b8360010181905550612991836002015461298c85600201546123ce565b61250d565b83600201819055508260050186818054806020026020016040519081016040528092919081815260200182805480156129e957602002820191906000526020600020905b8154815260200190600101908083116129d5575b50505050509150965096505050505050915091565b828054612a0a90613991565b90600052602060002090601f016020900481019282612a2c5760008555612a73565b82601f10612a4557805160ff1916838001178555612a73565b82800160010185558215612a73579182015b82811115612a72578251825591602001919060010190612a57565b5b509050612a809190612a84565b5090565b5b80821115612a9d576000816000905550600101612a85565b5090565b6000612ab4612aaf846134b0565b61348b565b90508083825260208201905082856020860282011115612ad357600080fd5b60005b85811015612b035781612ae98882612c3d565b845260208401935060208301925050600181019050612ad6565b5050509392505050565b6000612b20612b1b846134dc565b61348b565b905082815260208101848484011115612b3857600080fd5b612b43848285613925565b509392505050565b600081519050612b5a81613bc0565b92915050565b600082601f830112612b7157600080fd5b8135612b81848260208601612aa1565b91505092915050565b600081359050612b9981613bd7565b92915050565b60008083601f840112612bb157600080fd5b8235905067ffffffffffffffff811115612bca57600080fd5b602083019150836001820283011115612be257600080fd5b9250929050565b600082601f830112612bfa57600080fd5b8135612c0a848260208601612b0d565b91505092915050565b600081359050612c2281613bee565b92915050565b600081519050612c3781613bee565b92915050565b600081359050612c4c81613c05565b92915050565b600060208284031215612c6457600080fd5b6000612c7284828501612b4b565b91505092915050565b60008060208385031215612c8e57600080fd5b600083013567ffffffffffffffff811115612ca857600080fd5b612cb485828601612b9f565b92509250509250929050565b600060208284031215612cd257600080fd5b6000612ce084828501612c13565b91505092915050565b600060208284031215612cfb57600080fd5b6000612d0984828501612c28565b91505092915050565b60008060408385031215612d2557600080fd5b6000612d3385828601612c13565b9250506020612d4485828601612b8a565b9150509250929050565b600080600060408486031215612d6357600080fd5b6000612d7186828701612c13565b935050602084013567ffffffffffffffff811115612d8e57600080fd5b612d9a86828701612b9f565b92509250509250925092565b60008060008060008060c08789031215612dbf57600080fd5b6000612dcd89828a01612c13565b965050602087013567ffffffffffffffff811115612dea57600080fd5b612df689828a01612be9565b955050604087013567ffffffffffffffff811115612e1357600080fd5b612e1f89828a01612b60565b945050606087013567ffffffffffffffff811115612e3c57600080fd5b612e4889828a01612b60565b9350506080612e5989828a01612c3d565b92505060a0612e6a89828a01612c3d565b9150509295509295509295565b6000612e8383836130a1565b60208301905092915050565b6000612e9b83836130bf565b60208301905092915050565b612eb0816138b9565b82525050565b6000612ec182613542565b612ecb8185613595565b9350612ed68361350d565b8060005b83811015612f07578151612eee8882612e77565b9750612ef98361356e565b925050600181019050612eda565b5085935050505092915050565b6000612f1f8261354d565b612f298185613595565b9350612f348361351d565b8060005b83811015612f6c57612f4982613b3d565b612f538882612e77565b9750612f5e8361357b565b925050600181019050612f38565b5085935050505092915050565b6000612f8482613558565b612f8e81856135a6565b9350612f9983613532565b8060005b83811015612fca578151612fb18882612e8f565b9750612fbc83613588565b925050600181019050612f9d565b5085935050505092915050565b6000612fe383856135b7565b9350612ff0838584613925565b612ff983613b50565b840190509392505050565b61300d816138d7565b82525050565b61301c816138e1565b82525050565b600061302d82613563565b61303781856135c8565b9350613047818560208601613934565b61305081613b50565b840191505092915050565b60006130686019836135c8565b915061307382613b6e565b602082019050919050565b600061308b6013836135c8565b915061309682613b97565b602082019050919050565b6130aa8161390e565b82525050565b6130b98161390e565b82525050565b6130c881613918565b82525050565b6130d781613918565b82525050565b60006020820190506130f26000830184612ea7565b92915050565b600060608201905061310d6000830186612ea7565b61311a6020830185612ea7565b61312760408301846130b0565b949350505050565b60006080820190506131446000830188612ea7565b81810360208301526131568187612eb6565b9050818103604083015261316a8186612eb6565b9050818103606083015261317f818486612fd7565b90509695505050505050565b60006080820190506131a06000830188612ea7565b81810360208301526131b28187612f14565b905081810360408301526131c68186612eb6565b905081810360608301526131db818486612fd7565b90509695505050505050565b60006040820190506131fc6000830185612ea7565b61320960208301846130b0565b9392505050565b60006060820190506132256000830186612ea7565b61323260208301856130b0565b61323f60408301846130b0565b949350505050565b600060208201905081810360008301526132618184612eb6565b905092915050565b600060408201905081810360008301526132838185612f14565b905081810360208301526132978184612eb6565b90509392505050565b60006020820190506132b56000830184613004565b92915050565b600060a0820190506132d06000830188613013565b6132dd6020830187613013565b6132ea6040830186613013565b6132f76060830185613013565b6133046080830184613013565b9695505050505050565b600060208201905081810360008301526133288184613022565b905092915050565b600060208201905081810360008301526133498161305b565b9050919050565b600060208201905081810360008301526133698161307e565b9050919050565b600060208201905061338560008301846130b0565b92915050565b600060c0820190506133a060008301896130b0565b81810360208301526133b28188613022565b905081810360408301526133c68187612f79565b905081810360608301526133da8186612f79565b90506133e960808301856130ce565b6133f660a08301846130ce565b979650505050505050565b600060408201905061341660008301856130b0565b61342360208301846130b0565b9392505050565b600060c08201905061343f60008301896130b0565b61344c60208301886130b0565b61345960408301876130b0565b61346660608301866130b0565b61347360808301856130b0565b61348060a08301846130b0565b979650505050505050565b60006134956134a6565b90506134a182826139dd565b919050565b6000604051905090565b600067ffffffffffffffff8211156134cb576134ca613b0e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156134f7576134f6613b0e565b5b61350082613b50565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006135e4826138e1565b91506135ef836138e1565b925081637fffffff0383136000831215161561360e5761360d613a81565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000003831260008312161561364657613645613a81565b5b828201905092915050565b600061365c8261390e565b91506136678361390e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561369c5761369b613a81565b5b828201905092915050565b60006136b2826138e1565b91506136bd836138e1565b9250826136cd576136cc613ab0565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000008314161561370657613705613a81565b5b828205905092915050565b600061371c8261390e565b91506137278361390e565b92508261373757613736613ab0565b5b828204905092915050565b600061374d826138e1565b9150613758836138e1565b925082637fffffff048211600084136000841316161561377b5761377a613a81565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000005831260008412600084131616156137b8576137b7613a81565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000005821260008413600084121616156137f5576137f4613a81565b5b82637fffffff058212600084126000841216161561381657613815613a81565b5b828202905092915050565b600061382c8261390e565b91506138378361390e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156138705761386f613a81565b5b828202905092915050565b60006138868261390e565b91506138918361390e565b9250828210156138a4576138a3613a81565b5b828203905092915050565b6000819050919050565b60006138c4826138ee565b9050919050565b60008115159050919050565b6000819050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613952578082015181840152602081019050613937565b83811115613961576000848401525b50505050565b60006139728261390e565b9150600082141561398657613985613a81565b5b600182039050919050565b600060028204905060018216806139a957607f821691505b602082108114156139bd576139bc613adf565b5b50919050565b60006139d66139d183613b61565b6138af565b9050919050565b6139e682613b50565b810181811067ffffffffffffffff82111715613a0557613a04613b0e565b5b80604052505050565b6000613a198261390e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a4c57613a4b613a81565b5b600182019050919050565b6000613a6282613918565b915060ff821415613a7657613a75613a81565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000613b4982546139c3565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f6e6f7420656e6f756768207265736f7563657300000000000000000000000000600082015250565b613bc9816138b9565b8114613bd457600080fd5b50565b613be0816138cb565b8114613beb57600080fd5b50565b613bf78161390e565b8114613c0257600080fd5b50565b613c0e81613918565b8114613c1957600080fd5b5056fea264697066735822122044db963196c5f90805ff45f16a5dcfcd7720ba51622dfdf1a675533dd1182f9e64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 186,
        "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)1817_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)1919_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)1919_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1928_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)1928_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)1931_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)1931_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmBuildings)1897_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmBuildings)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmBuildings)1897_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)1866_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)1866_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmStatistics)1835_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmStatistics)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmStatistics)1835_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)1873_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)1873_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)1824_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)1824_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1944_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)1944_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)1940_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)1940_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)1817_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 1763,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)1866_storage)"
          },
          {
            "astId": 1768,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmStatistics",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(RealmStatistics)1835_storage)"
          },
          {
            "astId": 1773,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(RealmBuildings)1897_storage)"
          },
          {
            "astId": 1775,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "baseProductionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 1777,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "maxProductionRate",
            "offset": 1,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 1779,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "sRealms",
            "offset": 2,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1781,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realms",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1783,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1785,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resources",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1787,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1789,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "lords",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1794,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)1931_storage)"
          },
          {
            "astId": 1799,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)1940_storage)"
          },
          {
            "astId": 1804,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1928_storage)"
          },
          {
            "astId": 1809,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1919_storage)"
          },
          {
            "astId": 1814,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_struct(TheAges)1824_storage)"
          },
          {
            "astId": 1816,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(BuildingCosts)1919_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 1899,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1902,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1905,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1908,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1910,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1912,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1914,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1916,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1918,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)1928_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 1922,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1927,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1919_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LevelProduction)1931_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 1930,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmBuildings)1897_storage": {
        "encoding": "inplace",
        "label": "struct RealmBuildings",
        "members": [
          {
            "astId": 1880,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "aquaducts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1882,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "temples",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1884,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "castles",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1886,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "markets",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1888,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ports",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1890,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "barracks",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1892,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "farms",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1894,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "shipyard",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1896,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "fishingVillage",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RealmInfo)1866_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 1837,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1839,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1841,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1843,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1845,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1848,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1850,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1852,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1854,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1856,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1858,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1860,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1865,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)1873_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RealmStatistics)1835_storage": {
        "encoding": "inplace",
        "label": "struct RealmStatistics",
        "members": [
          {
            "astId": 1826,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmDefence",
            "offset": 0,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 1828,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmOffence",
            "offset": 4,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 1830,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmMagic",
            "offset": 8,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 1832,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "foodSupply",
            "offset": 12,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 1834,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "population",
            "offset": 16,
            "slot": "0",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ResourceInfo)1873_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 1868,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1870,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1872,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)1824_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 1819,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1821,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1823,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UpgradeCostLevels)1944_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 1943,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)1940_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 1934,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1939,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1944_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}