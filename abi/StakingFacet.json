{
  "address": "0x3380f13bCb8F325Af6E97b34081048593Dd66a80",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_traits",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_resources",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_orderOf",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_wonder",
          "type": "uint8"
        }
      ],
      "name": "RealmData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lord",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realmStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "RealmStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lord",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realmUnstaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "RealmUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "ResourcesClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmId",
          "type": "uint256"
        }
      ],
      "name": "getHappiness",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRealmInformation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastupdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "_traits",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_resources",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8",
          "name": "_orderOf",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_wonder",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeRealm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sTokenId",
          "type": "uint256"
        }
      ],
      "name": "unstakeAndExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllResources",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "withdrawSingleRealmResources",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a07b1c48ba8b5d5d3d89b09c0ef3c5b91dc662c843fa2fbe7ce3f526f2996fc",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0x3380f13bCb8F325Af6E97b34081048593Dd66a80",
    "transactionIndex": 0,
    "gasUsed": "97647289",
    "logsBloom": "0x
    "blockHash": "0xa05b91e52228df18b4e022efa9e5a3ce3aacef113b443dd0156ccd627f116338",
    "transactionHash": "0x4a07b1c48ba8b5d5d3d89b09c0ef3c5b91dc662c843fa2fbe7ce3f526f2996fc",
    "logs": [],
    "blockNumber": 6098601,
    "cumulativeGasUsed": "76835049",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "60039f01dcf139fe515a0b7241c9068e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_traits\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_resources\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_orderOf\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_wonder\",\"type\":\"uint8\"}],\"name\":\"RealmData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realmStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"RealmStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realmUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"RealmUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"ResourcesClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmId\",\"type\":\"uint256\"}],\"name\":\"getHappiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRealmInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastupdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"_traits\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_resources\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"_orderOf\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_wonder\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeRealm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sTokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeAndExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllResources\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"withdrawSingleRealmResources\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/StakingFacet.sol\":\"StakingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/StakingFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/RealmStorage.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/ResourceUtils.sol\\\";\\nimport \\\"../../shared/interfaces/RealmsToken.sol\\\";\\n\\n//____|#|_|#|____STAKING FACET____|#|_|#|____//\\n// Stakes Realm\\n// Mints Settled Realm (sRealm)\\n// Withdraw resources\\n// Unstake -> Burn sRealm and return Realm token\\n\\ncontract StakingFacet is ResourceUtils {\\n    event Init(uint256 _tokenId);\\n    event RealmStaked(address _lord, uint256 _realmStaked, uint256 _age);\\n    event RealmUnstaked(address _lord, uint256 _realmUnstaked, uint256 _age);\\n    event ResourcesClaimed(uint256[], uint256[]);\\n    event RealmData(\\n        uint256 _tokenId,\\n        string _name,\\n        uint8[] _traits,\\n        uint8[] _resources,\\n        uint8 _orderOf,\\n        uint8 _wonder\\n    );\\n\\n    function getRealmInformation(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256 lastupdate)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.lastUpdateAt;\\n    }\\n\\n    function stakeRealm(uint256 _tokenId)\\n        public\\n        payable\\n        checkRealmOwner(_tokenId)\\n    {\\n        // init contracts\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        // mint sRealm\\n        sRealmstoken.mintFromStakingContract(msg.sender, _tokenId);\\n\\n        // transfer realms token\\n        realmstoken.safeTransferFrom(msg.sender, s.realmsStorage, _tokenId);\\n\\n        uint256 currentAge = (block.timestamp - s.genesisTime) / (1 days);\\n\\n        s.theAges[currentAge].settledRealms++;\\n\\n        // if update is false update lastUpdate else set up initial struct and trigger oracle\\n        if (realmInfo.realmDefence != 0) {\\n            realmInfo.lastUpdateAt = block.timestamp;\\n            realmInfo.vestedTimeUpdatedAt = block.timestamp;\\n            realmInfo.ageSettled = currentAge;\\n            realmInfo.ageClaimed = currentAge;\\n        } else {\\n            // setup realmInfo Struct\\n            realmInfo.lastUpdateAt = block.timestamp;\\n            realmInfo.vestedTimeUpdatedAt = block.timestamp;\\n            realmInfo.ageSettled = currentAge;\\n            realmInfo.ageClaimed = currentAge;\\n            realmInfo.realmDefence = 300;\\n            emit Init(_tokenId);\\n            emit RealmStaked(msg.sender, _tokenId, currentAge);\\n        }\\n    }\\n\\n    function init(\\n        uint256 _tokenId,\\n        string memory _name,\\n        uint8[] memory _traits,\\n        uint8[] memory _resources,\\n        uint8 _orderOf,\\n        uint8 _wonder\\n    ) public {\\n        // require(msg.sender == s.oracle, \\\"Only The Oracle Can Update\\\"); //commented out for testing\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        //Add Name\\n        realmInfo.name = _name;\\n\\n        // Set order\\n        realmInfo.orderOf = _orderOf;\\n\\n        //Set Regions, Cities, Harbors, Rivers\\n        realmInfo.regions = _traits[0];\\n        realmInfo.cities = _traits[1];\\n        realmInfo.harbours = _traits[2];\\n        realmInfo.rivers = _traits[3];\\n\\n        // create resource id array\\n        for (uint256 i = 0; i < _resources.length; i++) {\\n            realmInfo.resourceIds.push(_resources[i]);\\n        }\\n\\n        //Add the resource ids with base level and production rate\\n        for (uint256 i = 0; i < _resources.length; i++) {\\n            realmInfo.resourceInfo[_resources[i]].id = _resources[i];\\n            realmInfo.resourceInfo[_resources[i]].level = 1;\\n            realmInfo.resourceInfo[_resources[i]].production = 100;\\n        }\\n\\n        //Log wonder if wonder != 0\\n        if (_wonder != 0) {\\n            realmInfo.wonders = _wonder;\\n        }\\n        emit RealmData(_tokenId, _name, _traits, _resources, _orderOf, _wonder);\\n    }\\n\\n    function getHappiness(uint256 _realmId) public view returns (uint256) {\\n        return _getHappiness(_realmId);\\n    }\\n\\n    function withdrawSingleRealmResources(\\n        uint256 _tokenId,\\n        bytes calldata _calldata\\n    ) public payable checkSRealmOwner(_tokenId) {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        uint256[] memory realmsResourcesOutputs = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        uint256[] memory treasuryResourcesOutputs = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        // require at least 1 full day\\n        require(\\n            _getAvailableResources(realmInfo.lastUpdateAt) +\\n                _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt) >\\n                1,\\n            \\\"not enough resouces\\\"\\n        );\\n\\n        uint256 total = _getAvailableResources(realmInfo.lastUpdateAt) +\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt);\\n\\n        // get happiness\\n        uint256 happiness = _getHappiness(_tokenId);\\n\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 90) / 100) * happiness) /\\n                100;\\n            treasuryResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 10) / 900) * happiness) /\\n                100;\\n        }\\n\\n        // return the remaining time\\n        realmInfo.lastUpdateAt = _returnTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt)\\n        );\\n        realmInfo.vestedTimeUpdatedAt = _returnTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt)\\n        );\\n\\n        // send to minter and mint\\n        resourceTokens.resourceMinting(\\n            msg.sender,\\n            realmInfo.resourceIds,\\n            realmsResourcesOutputs,\\n            _calldata\\n        );\\n\\n        emit ResourcesClaimed(realmInfo.resourceIds, realmsResourcesOutputs);\\n    }\\n\\n    function _withdrawResources(uint256 _tokenId)\\n        private\\n        checkSRealmOwner(_tokenId)\\n        returns (\\n            uint256[] memory _ids,\\n            uint256[] memory _realmsResourcesOutputs\\n        )\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        _realmsResourcesOutputs = new uint256[](realmInfo.resourceIds.length);\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        uint256 total = _getAvailableResources(realmInfo.lastUpdateAt) +\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt);\\n\\n        uint256 happiness = _getHappiness(_tokenId);\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            _realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 90) / 100) * happiness) /\\n                100; // replace with resourcesAvailable\\n        }\\n\\n        // return the remaining time\\n        realmInfo.lastUpdateAt = _returnTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt)\\n        );\\n\\n        realmInfo.vestedTimeUpdatedAt = _returnTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt)\\n        );\\n\\n        return (realmInfo.resourceIds, _realmsResourcesOutputs);\\n    }\\n\\n    function withdrawAllResources() public payable {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        uint256 tokenBalanceOwner = sRealmstoken.balanceOf(msg.sender);\\n        uint256[] memory _ids;\\n        uint256[] memory _settlerValues;\\n\\n        uint256[] memory _totalIds = new uint256[](23);\\n        uint256[] memory _totalSettlerValues = new uint256[](23);\\n\\n        for (uint256 i = 0; i < tokenBalanceOwner; i++) {\\n            (_ids, _settlerValues) = _withdrawResources(\\n                sRealmstoken.tokenOfOwnerByIndex(msg.sender, i)\\n            );\\n\\n            for (uint256 x = 0; x < _ids.length; x++) {\\n                _totalIds[_ids[x]] = _ids[x];\\n                _totalSettlerValues[_ids[x]] += _settlerValues[x];\\n            }\\n        }\\n        _mintResources(msg.sender, _totalIds, _totalSettlerValues);\\n    }\\n\\n    function unstakeAndExit(uint256 _sTokenId)\\n        public\\n        checkSRealmOwner(_sTokenId)\\n    {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        RealmInfo storage realmInfo = s.realmInfo[_sTokenId];\\n\\n        RealmStorage realmsStorage = RealmStorage(s.realmsStorage);\\n\\n        uint256 currentAge = (block.timestamp - s.genesisTime) / (1 days);\\n        // reset time\\n        realmInfo.lastUpdateAt = 0;\\n        realmInfo.vestedTimeUpdatedAt = 0;\\n        // transfer realm back to owner\\n        realmsStorage.withdraw(_sTokenId, msg.sender);\\n\\n        s.theAges[realmInfo.ageSettled].settledRealms--;\\n\\n        sRealmstoken.burn(_sTokenId);\\n        emit RealmUnstaked(msg.sender, _sTokenId, currentAge);\\n    }\\n}\\n\",\"keccak256\":\"0xdb768a8eae07481bdf1b215c98772a8bf72cc9d4b22dda0794f6a052f0f9ee04\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    address sRealms;\\n    address realms;\\n    address realmsStorage;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n    mapping(uint256 => Raiding) raiding;\\n    mapping(uint256 => RaidingArmy) raidingArmy;\\n    mapping(uint256 => DefendingArmy) defendingArmy;\\n    mapping(uint256 => ArmyUnit) armyUnit;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\nstruct Raiding {\\n    uint256 coolDownTime;\\n    uint256 totalRaids;\\n    uint256 successfulRaids;\\n}\\n\\nstruct RaidingArmy {\\n    uint32 knightsTrained;\\n    uint32 knightsSlayed;\\n    uint32 footSoldiersTrained;\\n    uint32 footSoldiersSlayed;\\n    mapping(uint256 => TrainedArmyUnit) knights;\\n    mapping(uint256 => TrainedArmyUnit) footSoldiers;\\n}\\n\\nstruct DefendingArmy {\\n    uint32 trebuchetsTrained;\\n    uint32 trebuchetsSlayed;\\n    uint32 scorpionsTrained;\\n    uint32 scorpionsSlayed;\\n    mapping(uint256 => TrainedArmyUnit) trebuchets;\\n    mapping(uint256 => TrainedArmyUnit) scorpions;\\n}\\n\\nstruct TrainedArmyUnit {\\n    bool destroyed;\\n    uint256 unitFinished;\\n}\\n\\nstruct ArmyUnit {\\n    string name;\\n    uint256 timeToTrain;\\n    uint32 offence;\\n    uint32 defence;\\n    uint256[] resourceIds;\\n    uint256[] resourceValues;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xdf4eaff003a64be8c2fe375e99c6b5464c22c235404aaa429c2917a21babbac4\"},\"contracts/settling/libraries/Modifiers.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6a04f22a363dcf5c72fd36e2eb64c03f7bbed1d0d098311e2727c992890b4718\"},\"contracts/settling/libraries/ResourceUtils.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/Modifiers.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract ResourceUtils is Modifiers {\\n    function _mintResources(\\n        address _minter,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.resourceMinting(\\n            _minter,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchTransferResources(\\n        address _from,\\n        address _to,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.safeBatchTransferFrom(\\n            _from,\\n            _to,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchBurnResources(\\n        address _from,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.batchBurnResources(_from, _resourceIds, _resourceValues);\\n    }\\n\\n    function _getHappiness(uint256 _realmId) internal view returns (uint32) {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmId];\\n        int32 food;\\n\\n        if (realmInfo.foodSupply < 0) {\\n            food = ((100 * realmInfo.foodSupply) * 20) / 1000;\\n        } else {\\n            food = 0;\\n        }\\n        int32 happiness = 100 +\\n            ((100 * (realmInfo.population * 4)) / 1000) +\\n            food;\\n\\n        return uint32(happiness);\\n    }\\n\\n    function _returnTime(uint256 _lastUpdate, uint256 _resourcesAvailable)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _lastUpdate + _resourcesAvailable * 1 hours;\\n    }\\n\\n    function _getAvailableResources(uint256 _lastUpdate)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - _lastUpdate) / 1 hours;\\n    }\\n\\n    function _getAvailableVestedResources(uint256 _vestedTimeUpdatedAt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 vested;\\n        vested = (block.timestamp - _vestedTimeUpdatedAt) / (1 hours);\\n        if (vested > 14) {\\n            return vested;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194b53dbb1e3ab2086de4432fef34c728b0f47d3c66d275594da87a74a2d147c\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/RealmStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ninterface RealmStorage is IERC721Receiver {\\n    function withdraw(uint256 _tokenId, address _lord) external;\\n}\\n\",\"keccak256\":\"0x844bbd86f3736968e28f3942eec0d07582943b6f3aacc0189e22ab58da7e6532\",\"license\":\"MIT\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchBurnResources(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x827b22a96beba7f58adf4ea7cdbc774d885adb2cd76831688b78884778f39dc0\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612fa9806100206000396000f3fe6080604052600436106100705760003560e01c80638369812e1161004e5780638369812e146100f75780639134362414610113578063a50515b31461013c578063da37000b1461014657610070565b806329e0ba66146100755780632f78e373146100915780636a589f86146100ce575b600080fd5b61008f600480360381019061008a91906121e5565b610183565b005b34801561009d57600080fd5b506100b860048036038101906100b39190612193565b610879565b6040516100c59190612756565b60405180910390f35b3480156100da57600080fd5b506100f560048036038101906100f0919061223d565b610891565b005b610111600480360381019061010c9190612193565b610d17565b005b34801561011f57600080fd5b5061013a60048036038101906101359190612193565b611102565b005b610144611412565b005b34801561015257600080fd5b5061016d60048036038101906101689190612193565b61183b565b60405161017a9190612756565b60405180910390f35b8260008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016101e69190612756565b60206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610236919061216a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a90612716565b60405180910390fd5b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600088815260200190815260200160002090506000816005018054905067ffffffffffffffff81111561032e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561035c5781602001602082028036833780820191505090505b5090506000826005018054905067ffffffffffffffff8111156103a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103d65781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff811115610422577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104505781602001602082028036833780820191505090505b50905060005b846005018054905081101561052c578460080160008660050183815481106104a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff1684828151811061050d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061052490612d7d565b915050610456565b50600161053c8560020154611862565b610549866001015461189d565b61055391906129d6565b11610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90612736565b60405180910390fd5b60006105a28560020154611862565b6105af866001015461189d565b6105b991906129d6565b905060006105c68c6118bf565b63ffffffff16905060005b8660050180549050811015610774576064826064605a868a8681518110610621577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516106339190612ba6565b61063d9190612ba6565b6106479190612a96565b6106519190612ba6565b61065b9190612a96565b858281518110610694577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050606482610384600a868a86815181106106e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516106f49190612ba6565b6106fe9190612ba6565b6107089190612a96565b6107129190612ba6565b61071c9190612a96565b848281518110610755577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061076c90612d7d565b9150506105d1565b5061078f866001015461078a886001015461189d565b611997565b86600101819055506107b186600201546107ac8860020154611862565b611997565b86600201819055508673ffffffffffffffffffffffffffffffffffffffff16638edf55bf3388600501878f8f6040518663ffffffff1660e01b81526004016107fd959493929190612623565b600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b505050507f80622db75391035b375fd650fdd63615c99c66f0610ec81d9acee6ca1e0d927b86600501856040516108639291906126df565b60405180910390a1505050505050505050505050565b6000610884826118bf565b63ffffffff169050919050565b60008060000160008881526020019081526020016000209050858160000190805190602001906108c2929190611f2b565b50828160060160056101000a81548160ff021916908360ff1602179055508460008151811061091a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160036101000a81548160ff021916908360ff16021790555084600181518110610978577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160006101000a81548160ff021916908360ff160217905550846002815181106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160016101000a81548160ff021916908360ff16021790555084600381518110610a34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160026101000a81548160ff021916908360ff16021790555060005b8451811015610ae55781600501858281518110610aa1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151908060018154018082558091505060019003906000526020600020016000909160ff169091909150558080610add90612d7d565b915050610a5b565b5060005b8451811015610ca357848181518110610b2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826008016000878481518110610b72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506001826008016000878481518110610be7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff1602179055506064826008016000878481518110610c5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160026101000a81548160ff021916908360ff1602179055508080610c9b90612d7d565b915050610ae9565b5060008260ff1614610ccd57818160060160046101000a81548160ff021916908360ff1602179055505b7fe3c8f0bd20211d0bc86a10e012946d813c237c180cd4f11e74d1b658b8f5367a878787878787604051610d069695949392919061279a565b60405180910390a150505050505050565b8060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610d7a9190612756565b60206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca919061216a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e90612716565b60405180910390fd5b6000806000016000858152602001908152602001600020905060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166321c6ddff33886040518363ffffffff1660e01b8152600401610edd92919061267f565b600060405180830381600087803b158015610ef757600080fd5b505af1158015610f0b573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b8152600401610f7193929190612594565b600060405180830381600087803b158015610f8b57600080fd5b505af1158015610f9f573d6000803e3d6000fd5b505050506000620151806000600d015442610fba9190612c00565b610fc49190612a96565b90506000600c0160008281526020019081526020016000206000016000815480929190610ff090612d7d565b9190505550600084600601600f9054906101000a900460030b60030b1461103a574284600101819055504284600201819055508084600301819055508084600401819055506110f9565b42846001018190555042846002018190555080846003018190555080846004018190555061012c84600601600f6101000a81548163ffffffff021916908360030b63ffffffff1602179055507f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c01338876040516110b59190612756565b60405180910390a17fe254cd0a8f2353c72dad29e55618b11a740a94d3cc510e63a798e3381bb20fd33388836040516110f0939291906126a8565b60405180910390a15b50505050505050565b8060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016111659190612756565b60206040518083038186803b15801561117d57600080fd5b505afa158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b5919061216a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121990612716565b60405180910390fd5b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000806000016000868152602001908152602001600020905060008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000620151806000600d0154426112a49190612c00565b6112ae9190612a96565b905060008360010181905550600083600201819055508173ffffffffffffffffffffffffffffffffffffffff1662f714ce88336040518363ffffffff1660e01b81526004016112fe929190612771565b600060405180830381600087803b15801561131857600080fd5b505af115801561132c573d6000803e3d6000fd5b505050506000600c01600084600301548152602001908152602001600020600001600081548092919061135e90612cd6565b91905055508373ffffffffffffffffffffffffffffffffffffffff166342966c68886040518263ffffffff1660e01b815260040161139c9190612756565b600060405180830381600087803b1580156113b657600080fd5b505af11580156113ca573d6000803e3d6000fd5b505050507f1d5429148ee8279c8ea448f03ff7cdd042ab3c911ee5c05cb3a5a6d32dace2f2338883604051611401939291906126a8565b60405180910390a150505050505050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114769190612579565b60206040518083038186803b15801561148e57600080fd5b505afa1580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c691906121bc565b90506060806000601767ffffffffffffffff81111561150e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561153c5781602001602082028036833780820191505090505b5090506000601767ffffffffffffffff811115611582577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156115b05781602001602082028036833780820191505090505b50905060005b85811015611827576116518773ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b81526004016115fc92919061267f565b60206040518083038186803b15801561161457600080fd5b505afa158015611628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164c91906121bc565b6119ba565b809550819650505060005b85518110156118135785818151811061169e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848783815181106116e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518151811061171f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050848181518110611764577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838783815181106117a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815181106117e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181516117f991906129d6565b91508181525050808061180b90612d7d565b91505061165c565b50808061181f90612d7d565b9150506115b6565b50611833338383611e8d565b505050505050565b60008060008001600084815260200190815260200160002090508060010154915050919050565b600080610e1083426118749190612c00565b61187e9190612a96565b9050600e8111156118925780915050611898565b60009150505b919050565b6000610e1082426118ae9190612c00565b6118b89190612a96565b9050919050565b600080600080016000848152602001908152602001600020905060008082600601601b9054906101000a900460030b60030b1215611935576103e8601483600601601b9054906101000a900460030b606461191a9190612ac7565b6119249190612ac7565b61192e9190612a2c565b905061193a565b600090505b6000816103e860048560070160009054906101000a900460030b61195e9190612ac7565b606461196a9190612ac7565b6119749190612a2c565b6064611980919061295e565b61198a919061295e565b9050809350505050919050565b6000610e10826119a79190612ba6565b836119b291906129d6565b905092915050565b6060808260008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611a209190612756565b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a70919061216a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad490612716565b60405180910390fd5b600080600001600087815260200190815260200160002090506000816005018054905067ffffffffffffffff811115611b3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611b6d5781602001602082028036833780820191505090505b509050816005018054905067ffffffffffffffff811115611bb7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611be55781602001602082028036833780820191505090505b50945060005b8260050180549050811015611cc157826008016000846005018381548110611c3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16828281518110611ca2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611cb990612d7d565b915050611beb565b506000611cd18360020154611862565b611cde846001015461189d565b611ce891906129d6565b90506000611cf5896118bf565b63ffffffff16905060005b8460050180549050811015611de2576064826064605a86888681518110611d50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611d629190612ba6565b611d6c9190612ba6565b611d769190612a96565b611d809190612ba6565b611d8a9190612a96565b888281518110611dc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611dda90612d7d565b915050611d00565b50611dfd8460010154611df8866001015461189d565b611997565b8460010181905550611e1f8460020154611e1a8660020154611862565b611997565b8460020181905550836005018781805480602002602001604051908101604052809291908181526020018280548015611e7757602002820191906000526020600020905b815481526020019060010190808311611e63575b5050505050915097509750505050505050915091565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638edf55bf8585856040518463ffffffff1660e01b8152600401611ef3939291906125cb565b600060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b5050505050505050565b828054611f3790612d00565b90600052602060002090601f016020900481019282611f595760008555611fa0565b82601f10611f7257805160ff1916838001178555611fa0565b82800160010185558215611fa0579182015b82811115611f9f578251825591602001919060010190611f84565b5b509050611fad9190611fb1565b5090565b5b80821115611fca576000816000905550600101611fb2565b5090565b6000611fe1611fdc84612835565b612810565b9050808382526020820190508285602086028201111561200057600080fd5b60005b8581101561203057816120168882612155565b845260208401935060208301925050600181019050612003565b5050509392505050565b600061204d61204884612861565b612810565b90508281526020810184848401111561206557600080fd5b612070848285612c94565b509392505050565b60008151905061208781612f2e565b92915050565b600082601f83011261209e57600080fd5b81356120ae848260208601611fce565b91505092915050565b60008083601f8401126120c957600080fd5b8235905067ffffffffffffffff8111156120e257600080fd5b6020830191508360018202830111156120fa57600080fd5b9250929050565b600082601f83011261211257600080fd5b813561212284826020860161203a565b91505092915050565b60008135905061213a81612f45565b92915050565b60008151905061214f81612f45565b92915050565b60008135905061216481612f5c565b92915050565b60006020828403121561217c57600080fd5b600061218a84828501612078565b91505092915050565b6000602082840312156121a557600080fd5b60006121b38482850161212b565b91505092915050565b6000602082840312156121ce57600080fd5b60006121dc84828501612140565b91505092915050565b6000806000604084860312156121fa57600080fd5b60006122088682870161212b565b935050602084013567ffffffffffffffff81111561222557600080fd5b612231868287016120b7565b92509250509250925092565b60008060008060008060c0878903121561225657600080fd5b600061226489828a0161212b565b965050602087013567ffffffffffffffff81111561228157600080fd5b61228d89828a01612101565b955050604087013567ffffffffffffffff8111156122aa57600080fd5b6122b689828a0161208d565b945050606087013567ffffffffffffffff8111156122d357600080fd5b6122df89828a0161208d565b93505060806122f089828a01612155565b92505060a061230189828a01612155565b9150509295509295509295565b600061231a838361253d565b60208301905092915050565b6000612332838361255b565b60208301905092915050565b61234781612c3e565b82525050565b6000612358826128c7565b612362818561291a565b935061236d83612892565b8060005b8381101561239e578151612385888261230e565b9750612390836128f3565b925050600181019050612371565b5085935050505092915050565b60006123b6826128d2565b6123c0818561291a565b93506123cb836128a2565b8060005b83811015612403576123e082612e82565b6123ea888261230e565b97506123f583612900565b9250506001810190506123cf565b5085935050505092915050565b600061241b826128dd565b612425818561292b565b9350612430836128b7565b8060005b838110156124615781516124488882612326565b97506124538361290d565b925050600181019050612434565b5085935050505092915050565b600061247a838561293c565b9350612487838584612c94565b61249083612e95565b840190509392505050565b60006124a6826128e8565b6124b0818561294d565b93506124c0818560208601612ca3565b6124c981612e95565b840191505092915050565b60006124e160028361293c565b91506124ec82612eb3565b602082019050919050565b600061250460198361294d565b915061250f82612edc565b602082019050919050565b600061252760138361294d565b915061253282612f05565b602082019050919050565b61254681612c7d565b82525050565b61255581612c7d565b82525050565b61256481612c87565b82525050565b61257381612c87565b82525050565b600060208201905061258e600083018461233e565b92915050565b60006060820190506125a9600083018661233e565b6125b6602083018561233e565b6125c3604083018461254c565b949350505050565b60006080820190506125e0600083018661233e565b81810360208301526125f2818561234d565b90508181036040830152612606818461234d565b90508181036060830152612619816124d4565b9050949350505050565b6000608082019050612638600083018861233e565b818103602083015261264a81876123ab565b9050818103604083015261265e818661234d565b9050818103606083015261267381848661246e565b90509695505050505050565b6000604082019050612694600083018561233e565b6126a1602083018461254c565b9392505050565b60006060820190506126bd600083018661233e565b6126ca602083018561254c565b6126d7604083018461254c565b949350505050565b600060408201905081810360008301526126f981856123ab565b9050818103602083015261270d818461234d565b90509392505050565b6000602082019050818103600083015261272f816124f7565b9050919050565b6000602082019050818103600083015261274f8161251a565b9050919050565b600060208201905061276b600083018461254c565b92915050565b6000604082019050612786600083018561254c565b612793602083018461233e565b9392505050565b600060c0820190506127af600083018961254c565b81810360208301526127c1818861249b565b905081810360408301526127d58187612410565b905081810360608301526127e98186612410565b90506127f8608083018561256a565b61280560a083018461256a565b979650505050505050565b600061281a61282b565b90506128268282612d4c565b919050565b6000604051905090565b600067ffffffffffffffff8211156128505761284f612e53565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561287c5761287b612e53565b5b61288582612e95565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061296982612c50565b915061297483612c50565b925081637fffffff0383136000831215161561299357612992612dc6565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000383126000831216156129cb576129ca612dc6565b5b828201905092915050565b60006129e182612c7d565b91506129ec83612c7d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a2157612a20612dc6565b5b828201905092915050565b6000612a3782612c50565b9150612a4283612c50565b925082612a5257612a51612df5565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000083141615612a8b57612a8a612dc6565b5b828205905092915050565b6000612aa182612c7d565b9150612aac83612c7d565b925082612abc57612abb612df5565b5b828204905092915050565b6000612ad282612c50565b9150612add83612c50565b925082637fffffff0482116000841360008413161615612b0057612aff612dc6565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000583126000841260008413161615612b3d57612b3c612dc6565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000582126000841360008412161615612b7a57612b79612dc6565b5b82637fffffff0582126000841260008412161615612b9b57612b9a612dc6565b5b828202905092915050565b6000612bb182612c7d565b9150612bbc83612c7d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612bf557612bf4612dc6565b5b828202905092915050565b6000612c0b82612c7d565b9150612c1683612c7d565b925082821015612c2957612c28612dc6565b5b828203905092915050565b6000819050919050565b6000612c4982612c5d565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612cc1578082015181840152602081019050612ca6565b83811115612cd0576000848401525b50505050565b6000612ce182612c7d565b91506000821415612cf557612cf4612dc6565b5b600182039050919050565b60006002820490506001821680612d1857607f821691505b60208210811415612d2c57612d2b612e24565b5b50919050565b6000612d45612d4083612ea6565b612c34565b9050919050565b612d5582612e95565b810181811067ffffffffffffffff82111715612d7457612d73612e53565b5b80604052505050565b6000612d8882612c7d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612dbb57612dba612dc6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000612e8e8254612d32565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f6e6f7420656e6f756768207265736f7563657300000000000000000000000000600082015250565b612f3781612c3e565b8114612f4257600080fd5b50565b612f4e81612c7d565b8114612f5957600080fd5b50565b612f6581612c87565b8114612f7057600080fd5b5056fea264697066735822122056abe6ad3d3d22982c8e4973eb3945d9505fe13e9b66c987190f98d4025bfe1964736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80638369812e1161004e5780638369812e146100f75780639134362414610113578063a50515b31461013c578063da37000b1461014657610070565b806329e0ba66146100755780632f78e373146100915780636a589f86146100ce575b600080fd5b61008f600480360381019061008a91906121e5565b610183565b005b34801561009d57600080fd5b506100b860048036038101906100b39190612193565b610879565b6040516100c59190612756565b60405180910390f35b3480156100da57600080fd5b506100f560048036038101906100f0919061223d565b610891565b005b610111600480360381019061010c9190612193565b610d17565b005b34801561011f57600080fd5b5061013a60048036038101906101359190612193565b611102565b005b610144611412565b005b34801561015257600080fd5b5061016d60048036038101906101689190612193565b61183b565b60405161017a9190612756565b60405180910390f35b8260008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016101e69190612756565b60206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610236919061216a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a90612716565b60405180910390fd5b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600088815260200190815260200160002090506000816005018054905067ffffffffffffffff81111561032e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561035c5781602001602082028036833780820191505090505b5090506000826005018054905067ffffffffffffffff8111156103a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103d65781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff811115610422577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104505781602001602082028036833780820191505090505b50905060005b846005018054905081101561052c578460080160008660050183815481106104a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff1684828151811061050d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061052490612d7d565b915050610456565b50600161053c8560020154611862565b610549866001015461189d565b61055391906129d6565b11610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90612736565b60405180910390fd5b60006105a28560020154611862565b6105af866001015461189d565b6105b991906129d6565b905060006105c68c6118bf565b63ffffffff16905060005b8660050180549050811015610774576064826064605a868a8681518110610621577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516106339190612ba6565b61063d9190612ba6565b6106479190612a96565b6106519190612ba6565b61065b9190612a96565b858281518110610694577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050606482610384600a868a86815181106106e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516106f49190612ba6565b6106fe9190612ba6565b6107089190612a96565b6107129190612ba6565b61071c9190612a96565b848281518110610755577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061076c90612d7d565b9150506105d1565b5061078f866001015461078a886001015461189d565b611997565b86600101819055506107b186600201546107ac8860020154611862565b611997565b86600201819055508673ffffffffffffffffffffffffffffffffffffffff16638edf55bf3388600501878f8f6040518663ffffffff1660e01b81526004016107fd959493929190612623565b600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b505050507f80622db75391035b375fd650fdd63615c99c66f0610ec81d9acee6ca1e0d927b86600501856040516108639291906126df565b60405180910390a1505050505050505050505050565b6000610884826118bf565b63ffffffff169050919050565b60008060000160008881526020019081526020016000209050858160000190805190602001906108c2929190611f2b565b50828160060160056101000a81548160ff021916908360ff1602179055508460008151811061091a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160036101000a81548160ff021916908360ff16021790555084600181518110610978577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160006101000a81548160ff021916908360ff160217905550846002815181106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160016101000a81548160ff021916908360ff16021790555084600381518110610a34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160026101000a81548160ff021916908360ff16021790555060005b8451811015610ae55781600501858281518110610aa1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151908060018154018082558091505060019003906000526020600020016000909160ff169091909150558080610add90612d7d565b915050610a5b565b5060005b8451811015610ca357848181518110610b2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826008016000878481518110610b72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506001826008016000878481518110610be7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff1602179055506064826008016000878481518110610c5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160026101000a81548160ff021916908360ff1602179055508080610c9b90612d7d565b915050610ae9565b5060008260ff1614610ccd57818160060160046101000a81548160ff021916908360ff1602179055505b7fe3c8f0bd20211d0bc86a10e012946d813c237c180cd4f11e74d1b658b8f5367a878787878787604051610d069695949392919061279a565b60405180910390a150505050505050565b8060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610d7a9190612756565b60206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca919061216a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e90612716565b60405180910390fd5b6000806000016000858152602001908152602001600020905060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166321c6ddff33886040518363ffffffff1660e01b8152600401610edd92919061267f565b600060405180830381600087803b158015610ef757600080fd5b505af1158015610f0b573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b8152600401610f7193929190612594565b600060405180830381600087803b158015610f8b57600080fd5b505af1158015610f9f573d6000803e3d6000fd5b505050506000620151806000600d015442610fba9190612c00565b610fc49190612a96565b90506000600c0160008281526020019081526020016000206000016000815480929190610ff090612d7d565b9190505550600084600601600f9054906101000a900460030b60030b1461103a574284600101819055504284600201819055508084600301819055508084600401819055506110f9565b42846001018190555042846002018190555080846003018190555080846004018190555061012c84600601600f6101000a81548163ffffffff021916908360030b63ffffffff1602179055507f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c01338876040516110b59190612756565b60405180910390a17fe254cd0a8f2353c72dad29e55618b11a740a94d3cc510e63a798e3381bb20fd33388836040516110f0939291906126a8565b60405180910390a15b50505050505050565b8060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016111659190612756565b60206040518083038186803b15801561117d57600080fd5b505afa158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b5919061216a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611222576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121990612716565b60405180910390fd5b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000806000016000868152602001908152602001600020905060008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000620151806000600d0154426112a49190612c00565b6112ae9190612a96565b905060008360010181905550600083600201819055508173ffffffffffffffffffffffffffffffffffffffff1662f714ce88336040518363ffffffff1660e01b81526004016112fe929190612771565b600060405180830381600087803b15801561131857600080fd5b505af115801561132c573d6000803e3d6000fd5b505050506000600c01600084600301548152602001908152602001600020600001600081548092919061135e90612cd6565b91905055508373ffffffffffffffffffffffffffffffffffffffff166342966c68886040518263ffffffff1660e01b815260040161139c9190612756565b600060405180830381600087803b1580156113b657600080fd5b505af11580156113ca573d6000803e3d6000fd5b505050507f1d5429148ee8279c8ea448f03ff7cdd042ab3c911ee5c05cb3a5a6d32dace2f2338883604051611401939291906126a8565b60405180910390a150505050505050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114769190612579565b60206040518083038186803b15801561148e57600080fd5b505afa1580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c691906121bc565b90506060806000601767ffffffffffffffff81111561150e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561153c5781602001602082028036833780820191505090505b5090506000601767ffffffffffffffff811115611582577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156115b05781602001602082028036833780820191505090505b50905060005b85811015611827576116518773ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b81526004016115fc92919061267f565b60206040518083038186803b15801561161457600080fd5b505afa158015611628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164c91906121bc565b6119ba565b809550819650505060005b85518110156118135785818151811061169e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848783815181106116e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518151811061171f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050848181518110611764577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838783815181106117a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815181106117e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181516117f991906129d6565b91508181525050808061180b90612d7d565b91505061165c565b50808061181f90612d7d565b9150506115b6565b50611833338383611e8d565b505050505050565b60008060008001600084815260200190815260200160002090508060010154915050919050565b600080610e1083426118749190612c00565b61187e9190612a96565b9050600e8111156118925780915050611898565b60009150505b919050565b6000610e1082426118ae9190612c00565b6118b89190612a96565b9050919050565b600080600080016000848152602001908152602001600020905060008082600601601b9054906101000a900460030b60030b1215611935576103e8601483600601601b9054906101000a900460030b606461191a9190612ac7565b6119249190612ac7565b61192e9190612a2c565b905061193a565b600090505b6000816103e860048560070160009054906101000a900460030b61195e9190612ac7565b606461196a9190612ac7565b6119749190612a2c565b6064611980919061295e565b61198a919061295e565b9050809350505050919050565b6000610e10826119a79190612ba6565b836119b291906129d6565b905092915050565b6060808260008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611a209190612756565b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a70919061216a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad490612716565b60405180910390fd5b600080600001600087815260200190815260200160002090506000816005018054905067ffffffffffffffff811115611b3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611b6d5781602001602082028036833780820191505090505b509050816005018054905067ffffffffffffffff811115611bb7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611be55781602001602082028036833780820191505090505b50945060005b8260050180549050811015611cc157826008016000846005018381548110611c3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16828281518110611ca2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611cb990612d7d565b915050611beb565b506000611cd18360020154611862565b611cde846001015461189d565b611ce891906129d6565b90506000611cf5896118bf565b63ffffffff16905060005b8460050180549050811015611de2576064826064605a86888681518110611d50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611d629190612ba6565b611d6c9190612ba6565b611d769190612a96565b611d809190612ba6565b611d8a9190612a96565b888281518110611dc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611dda90612d7d565b915050611d00565b50611dfd8460010154611df8866001015461189d565b611997565b8460010181905550611e1f8460020154611e1a8660020154611862565b611997565b8460020181905550836005018781805480602002602001604051908101604052809291908181526020018280548015611e7757602002820191906000526020600020905b815481526020019060010190808311611e63575b5050505050915097509750505050505050915091565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638edf55bf8585856040518463ffffffff1660e01b8152600401611ef3939291906125cb565b600060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b5050505050505050565b828054611f3790612d00565b90600052602060002090601f016020900481019282611f595760008555611fa0565b82601f10611f7257805160ff1916838001178555611fa0565b82800160010185558215611fa0579182015b82811115611f9f578251825591602001919060010190611f84565b5b509050611fad9190611fb1565b5090565b5b80821115611fca576000816000905550600101611fb2565b5090565b6000611fe1611fdc84612835565b612810565b9050808382526020820190508285602086028201111561200057600080fd5b60005b8581101561203057816120168882612155565b845260208401935060208301925050600181019050612003565b5050509392505050565b600061204d61204884612861565b612810565b90508281526020810184848401111561206557600080fd5b612070848285612c94565b509392505050565b60008151905061208781612f2e565b92915050565b600082601f83011261209e57600080fd5b81356120ae848260208601611fce565b91505092915050565b60008083601f8401126120c957600080fd5b8235905067ffffffffffffffff8111156120e257600080fd5b6020830191508360018202830111156120fa57600080fd5b9250929050565b600082601f83011261211257600080fd5b813561212284826020860161203a565b91505092915050565b60008135905061213a81612f45565b92915050565b60008151905061214f81612f45565b92915050565b60008135905061216481612f5c565b92915050565b60006020828403121561217c57600080fd5b600061218a84828501612078565b91505092915050565b6000602082840312156121a557600080fd5b60006121b38482850161212b565b91505092915050565b6000602082840312156121ce57600080fd5b60006121dc84828501612140565b91505092915050565b6000806000604084860312156121fa57600080fd5b60006122088682870161212b565b935050602084013567ffffffffffffffff81111561222557600080fd5b612231868287016120b7565b92509250509250925092565b60008060008060008060c0878903121561225657600080fd5b600061226489828a0161212b565b965050602087013567ffffffffffffffff81111561228157600080fd5b61228d89828a01612101565b955050604087013567ffffffffffffffff8111156122aa57600080fd5b6122b689828a0161208d565b945050606087013567ffffffffffffffff8111156122d357600080fd5b6122df89828a0161208d565b93505060806122f089828a01612155565b92505060a061230189828a01612155565b9150509295509295509295565b600061231a838361253d565b60208301905092915050565b6000612332838361255b565b60208301905092915050565b61234781612c3e565b82525050565b6000612358826128c7565b612362818561291a565b935061236d83612892565b8060005b8381101561239e578151612385888261230e565b9750612390836128f3565b925050600181019050612371565b5085935050505092915050565b60006123b6826128d2565b6123c0818561291a565b93506123cb836128a2565b8060005b83811015612403576123e082612e82565b6123ea888261230e565b97506123f583612900565b9250506001810190506123cf565b5085935050505092915050565b600061241b826128dd565b612425818561292b565b9350612430836128b7565b8060005b838110156124615781516124488882612326565b97506124538361290d565b925050600181019050612434565b5085935050505092915050565b600061247a838561293c565b9350612487838584612c94565b61249083612e95565b840190509392505050565b60006124a6826128e8565b6124b0818561294d565b93506124c0818560208601612ca3565b6124c981612e95565b840191505092915050565b60006124e160028361293c565b91506124ec82612eb3565b602082019050919050565b600061250460198361294d565b915061250f82612edc565b602082019050919050565b600061252760138361294d565b915061253282612f05565b602082019050919050565b61254681612c7d565b82525050565b61255581612c7d565b82525050565b61256481612c87565b82525050565b61257381612c87565b82525050565b600060208201905061258e600083018461233e565b92915050565b60006060820190506125a9600083018661233e565b6125b6602083018561233e565b6125c3604083018461254c565b949350505050565b60006080820190506125e0600083018661233e565b81810360208301526125f2818561234d565b90508181036040830152612606818461234d565b90508181036060830152612619816124d4565b9050949350505050565b6000608082019050612638600083018861233e565b818103602083015261264a81876123ab565b9050818103604083015261265e818661234d565b9050818103606083015261267381848661246e565b90509695505050505050565b6000604082019050612694600083018561233e565b6126a1602083018461254c565b9392505050565b60006060820190506126bd600083018661233e565b6126ca602083018561254c565b6126d7604083018461254c565b949350505050565b600060408201905081810360008301526126f981856123ab565b9050818103602083015261270d818461234d565b90509392505050565b6000602082019050818103600083015261272f816124f7565b9050919050565b6000602082019050818103600083015261274f8161251a565b9050919050565b600060208201905061276b600083018461254c565b92915050565b6000604082019050612786600083018561254c565b612793602083018461233e565b9392505050565b600060c0820190506127af600083018961254c565b81810360208301526127c1818861249b565b905081810360408301526127d58187612410565b905081810360608301526127e98186612410565b90506127f8608083018561256a565b61280560a083018461256a565b979650505050505050565b600061281a61282b565b90506128268282612d4c565b919050565b6000604051905090565b600067ffffffffffffffff8211156128505761284f612e53565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561287c5761287b612e53565b5b61288582612e95565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061296982612c50565b915061297483612c50565b925081637fffffff0383136000831215161561299357612992612dc6565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000383126000831216156129cb576129ca612dc6565b5b828201905092915050565b60006129e182612c7d565b91506129ec83612c7d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a2157612a20612dc6565b5b828201905092915050565b6000612a3782612c50565b9150612a4283612c50565b925082612a5257612a51612df5565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000083141615612a8b57612a8a612dc6565b5b828205905092915050565b6000612aa182612c7d565b9150612aac83612c7d565b925082612abc57612abb612df5565b5b828204905092915050565b6000612ad282612c50565b9150612add83612c50565b925082637fffffff0482116000841360008413161615612b0057612aff612dc6565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000583126000841260008413161615612b3d57612b3c612dc6565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000582126000841360008412161615612b7a57612b79612dc6565b5b82637fffffff0582126000841260008412161615612b9b57612b9a612dc6565b5b828202905092915050565b6000612bb182612c7d565b9150612bbc83612c7d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612bf557612bf4612dc6565b5b828202905092915050565b6000612c0b82612c7d565b9150612c1683612c7d565b925082821015612c2957612c28612dc6565b5b828203905092915050565b6000819050919050565b6000612c4982612c5d565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612cc1578082015181840152602081019050612ca6565b83811115612cd0576000848401525b50505050565b6000612ce182612c7d565b91506000821415612cf557612cf4612dc6565b5b600182039050919050565b60006002820490506001821680612d1857607f821691505b60208210811415612d2c57612d2b612e24565b5b50919050565b6000612d45612d4083612ea6565b612c34565b9050919050565b612d5582612e95565b810181811067ffffffffffffffff82111715612d7457612d73612e53565b5b80604052505050565b6000612d8882612c7d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612dbb57612dba612dc6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000612e8e8254612d32565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f6e6f7420656e6f756768207265736f7563657300000000000000000000000000600082015250565b612f3781612c3e565b8114612f4257600080fd5b50565b612f4e81612c7d565b8114612f5957600080fd5b50565b612f6581612c87565b8114612f7057600080fd5b5056fea264697066735822122056abe6ad3d3d22982c8e4973eb3945d9505fe13e9b66c987190f98d4025bfe1964736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2487,
        "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)1433_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(ArmyUnit)1618_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ArmyUnit)1618_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)1528_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)1528_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1537_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)1537_storage"
      },
      "t_mapping(t_uint256,t_struct(DefendingArmy)1598_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefendingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(DefendingArmy)1598_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)1540_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)1540_storage"
      },
      "t_mapping(t_uint256,t_struct(Raiding)1560_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raiding)",
        "numberOfBytes": "32",
        "value": "t_struct(Raiding)1560_storage"
      },
      "t_mapping(t_uint256,t_struct(RaidingArmy)1579_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RaidingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(RaidingArmy)1579_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)1499_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)1499_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)1506_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)1506_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)1440_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)1440_storage"
      },
      "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1603_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainedArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(TrainedArmyUnit)1603_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1553_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)1553_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)1549_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)1549_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)1433_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 1371,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)1499_storage)"
          },
          {
            "astId": 1373,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "sRealms",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1375,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realms",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1377,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmsStorage",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1379,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1381,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resources",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1383,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1385,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "lords",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1390,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)1540_storage)"
          },
          {
            "astId": 1395,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)1549_storage)"
          },
          {
            "astId": 1400,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1537_storage)"
          },
          {
            "astId": 1405,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1528_storage)"
          },
          {
            "astId": 1410,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(TheAges)1440_storage)"
          },
          {
            "astId": 1412,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 1417,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "raiding",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(Raiding)1560_storage)"
          },
          {
            "astId": 1422,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "raidingArmy",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(RaidingArmy)1579_storage)"
          },
          {
            "astId": 1427,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "defendingArmy",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(DefendingArmy)1598_storage)"
          },
          {
            "astId": 1432,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "armyUnit",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(ArmyUnit)1618_storage)"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(ArmyUnit)1618_storage": {
        "encoding": "inplace",
        "label": "struct ArmyUnit",
        "members": [
          {
            "astId": 1605,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1607,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "timeToTrain",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1609,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "offence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1611,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "defence",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1614,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1617,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingCosts)1528_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 1508,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1511,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1514,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1517,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1519,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1521,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1523,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1525,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1527,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)1537_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 1531,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1536,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1528_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefendingArmy)1598_storage": {
        "encoding": "inplace",
        "label": "struct DefendingArmy",
        "members": [
          {
            "astId": 1581,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "trebuchetsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1583,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "trebuchetsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1585,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "scorpionsTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1587,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "scorpionsSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1592,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "trebuchets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1603_storage)"
          },
          {
            "astId": 1597,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "scorpions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1603_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LevelProduction)1540_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 1539,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Raiding)1560_storage": {
        "encoding": "inplace",
        "label": "struct Raiding",
        "members": [
          {
            "astId": 1555,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "coolDownTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1557,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "totalRaids",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1559,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "successfulRaids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RaidingArmy)1579_storage": {
        "encoding": "inplace",
        "label": "struct RaidingArmy",
        "members": [
          {
            "astId": 1562,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "knightsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1564,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "knightsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1566,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "footSoldiersTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1568,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "footSoldiersSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1573,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "knights",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1603_storage)"
          },
          {
            "astId": 1578,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "footSoldiers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1603_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RealmInfo)1499_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 1442,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1444,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1446,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1448,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1450,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1453,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1455,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1457,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1459,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1461,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1463,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1465,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1467,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "aquaducts",
            "offset": 6,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1469,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "temples",
            "offset": 7,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1471,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "castles",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1473,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "markets",
            "offset": 9,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1475,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ports",
            "offset": 10,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1477,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "barracks",
            "offset": 11,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1479,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "farms",
            "offset": 12,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1481,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "shipyard",
            "offset": 13,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1483,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "fishingVillage",
            "offset": 14,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1485,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmDefence",
            "offset": 15,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1487,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmOffence",
            "offset": 19,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1489,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmMagic",
            "offset": 23,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1491,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "foodSupply",
            "offset": 27,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1493,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "population",
            "offset": 0,
            "slot": "7",
            "type": "t_int32"
          },
          {
            "astId": 1498,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)1506_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ResourceInfo)1506_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 1501,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1503,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1505,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)1440_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 1435,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1437,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1439,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TrainedArmyUnit)1603_storage": {
        "encoding": "inplace",
        "label": "struct TrainedArmyUnit",
        "members": [
          {
            "astId": 1600,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "destroyed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1602,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "unitFinished",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UpgradeCostLevels)1553_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 1552,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)1549_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 1543,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1548,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1553_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}