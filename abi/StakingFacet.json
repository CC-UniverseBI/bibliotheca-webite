{
  "address": "0x3ac13E8A60c5090842caAE171A954dddFd5E070f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_traits",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_resources",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_orderOf",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_wonder",
          "type": "uint8"
        }
      ],
      "name": "RealmData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lord",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realmStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "RealmStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lord",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_realmUnstaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "RealmUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "ResourcesClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmId",
          "type": "uint256"
        }
      ],
      "name": "getHappiness",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRealmInformation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastupdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8[]",
          "name": "_traits",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_resources",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8",
          "name": "_orderOf",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_wonder",
          "type": "uint8"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_update",
          "type": "bool"
        }
      ],
      "name": "stakeRealm",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sTokenId",
          "type": "uint256"
        }
      ],
      "name": "unstakeAndExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllResources",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "withdrawSingleRealmResources",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x756765a8e8b203e0b95d232e30eaf3d4bef2e84fe54d08f171de30c1c2034cdc",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0x3ac13E8A60c5090842caAE171A954dddFd5E070f",
    "transactionIndex": 0,
    "gasUsed": "99494897",
    "logsBloom": "0x
    "blockHash": "0xb615aa03738687c47ec8e68ebec7a341e562e7f15ead88bd8734ab945d4fd063",
    "transactionHash": "0x756765a8e8b203e0b95d232e30eaf3d4bef2e84fe54d08f171de30c1c2034cdc",
    "logs": [],
    "blockNumber": 5982967,
    "cumulativeGasUsed": "78245197",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d28b83b7f3f302eb1b19a8206f702d25",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_traits\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_resources\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_orderOf\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_wonder\",\"type\":\"uint8\"}],\"name\":\"RealmData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realmStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"RealmStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lord\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_realmUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"RealmUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"ResourcesClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmId\",\"type\":\"uint256\"}],\"name\":\"getHappiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRealmInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastupdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"_traits\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_resources\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8\",\"name\":\"_orderOf\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_wonder\",\"type\":\"uint8\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"stakeRealm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sTokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeAndExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllResources\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"withdrawSingleRealmResources\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/StakingFacet.sol\":\"StakingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/StakingFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/RealmStorage.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/ResourceUtils.sol\\\";\\nimport \\\"../../shared/interfaces/RealmsToken.sol\\\";\\n\\ncontract StakingFacet is ResourceUtils {\\n    event Init(uint256 _tokenId);\\n    event RealmStaked(address _lord, uint256 _realmStaked, uint256 _age);\\n    event RealmUnstaked(address _lord, uint256 _realmUnstaked, uint256 _age);\\n    event ResourcesClaimed(uint256[], uint256[]);\\n    event RealmData(\\n        uint256 _tokenId,\\n        string _name,\\n        uint8[] _traits,\\n        uint8[] _resources,\\n        uint8 _orderOf,\\n        uint8 _wonder\\n    );\\n\\n    function getRealmInformation(uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256 lastupdate)\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        return realmInfo.lastUpdateAt;\\n    }\\n\\n    function stakeRealm(uint256 _tokenId, bool _update)\\n        public\\n        payable\\n        checkRealmOwner(_tokenId)\\n    {\\n        // init contracts\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        // mint sRealm\\n        sRealmstoken.mintFromStakingContract(msg.sender, _tokenId);\\n\\n        // transfer realms token\\n        realmstoken.safeTransferFrom(msg.sender, s.treasury, _tokenId);\\n\\n        uint256 currentAge = (block.timestamp - s.genesisTime) / (1 days);\\n\\n        s.theAges[currentAge].settledRealms++;\\n\\n        // if update is false update lastUpdate else set up initial struct and trigger oracle\\n        if (!_update) {\\n            realmInfo.lastUpdateAt = block.timestamp;\\n            realmInfo.vestedTimeUpdatedAt = block.timestamp;\\n            realmInfo.ageSettled = currentAge;\\n            realmInfo.ageClaimed = currentAge;\\n        } else {\\n            // setup realmInfo Struct\\n            realmInfo.lastUpdateAt = block.timestamp;\\n            realmInfo.vestedTimeUpdatedAt = block.timestamp;\\n            realmInfo.ageSettled = currentAge;\\n            realmInfo.ageClaimed = currentAge;\\n            // realmInfo.foodSupply = 100; // set @ base of 100\\n\\n            //check if stats have been set before\\n            if (realmInfo.foodSupply == 0) {\\n                realmInfo.foodSupply = 0; // set @ base of 100\\n                realmInfo.realmDefence = 1;\\n                realmInfo.realmOffence = 1;\\n                realmInfo.realmMagic = 1;\\n            }\\n\\n            emit Init(_tokenId);\\n            emit RealmStaked(msg.sender, _tokenId, currentAge);\\n        }\\n    }\\n\\n    function init(\\n        uint256 _tokenId,\\n        string memory _name,\\n        uint8[] memory _traits,\\n        uint8[] memory _resources,\\n        uint8 _orderOf,\\n        uint8 _wonder\\n    ) public {\\n        // require(msg.sender == s.oracle, \\\"Only The Oracle Can Update\\\"); //commented out for testing\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        //Add Name\\n        realmInfo.name = _name;\\n\\n        // Set order\\n        realmInfo.orderOf = _orderOf;\\n\\n        //Set Regions, Cities, Harbors, Rivers\\n        realmInfo.regions = _traits[0];\\n        realmInfo.cities = _traits[1];\\n        realmInfo.harbours = _traits[2];\\n        realmInfo.rivers = _traits[3];\\n\\n        // create resource id array\\n        for (uint256 i = 0; i < _resources.length; i++) {\\n            realmInfo.resourceIds.push(_resources[i]);\\n        }\\n\\n        //Add the resource ids with base level and production rate\\n        for (uint256 i = 0; i < _resources.length; i++) {\\n            realmInfo.resourceInfo[_resources[i]].id = _resources[i];\\n            realmInfo.resourceInfo[_resources[i]].level = 1;\\n            realmInfo.resourceInfo[_resources[i]].production = 100;\\n        }\\n\\n        //Log wonder if wonder != 0\\n        if (_wonder != 0) {\\n            realmInfo.wonders = _wonder;\\n        }\\n        emit RealmData(_tokenId, _name, _traits, _resources, _orderOf, _wonder);\\n    }\\n\\n    function getHappiness(uint256 _realmId) public view returns (uint256) {\\n        return _getHappiness(_realmId);\\n    }\\n\\n    function withdrawSingleRealmResources(\\n        uint256 _tokenId,\\n        bytes calldata _calldata\\n    ) public payable checkSRealmOwner(_tokenId) {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        uint256[] memory realmsResourcesOutputs = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        uint256[] memory treasuryResourcesOutputs = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        require(\\n            _getAvailableResources(realmInfo.lastUpdateAt) +\\n                _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt) >\\n                1,\\n            \\\"not enough resouces\\\"\\n        );\\n\\n        uint256 total = _getAvailableResources(realmInfo.lastUpdateAt) +\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt);\\n\\n        uint256 happiness = _getHappiness(_tokenId);\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 90) / 100) * happiness) /\\n                100; // replace with resourcesAvailable\\n            treasuryResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 10) / 900) * happiness) /\\n                100; // replace with resourcesAvailable\\n        }\\n\\n        // return the remaining time\\n        realmInfo.lastUpdateAt = _returnTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt)\\n        );\\n        realmInfo.vestedTimeUpdatedAt = _returnTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt)\\n        );\\n\\n        // send to minter and mint\\n        resourceTokens.resourceMinting(\\n            msg.sender,\\n            realmInfo.resourceIds,\\n            realmsResourcesOutputs,\\n            _calldata\\n        );\\n\\n        emit ResourcesClaimed(realmInfo.resourceIds, realmsResourcesOutputs);\\n    }\\n\\n    function _withdrawResources(uint256 _tokenId)\\n        private\\n        checkSRealmOwner(_tokenId)\\n        returns (\\n            uint256[] memory _ids,\\n            uint256[] memory _realmsResourcesOutputs\\n        )\\n    {\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n\\n        uint256[] memory resourcesProduction = new uint256[](\\n            realmInfo.resourceIds.length\\n        );\\n        _realmsResourcesOutputs = new uint256[](realmInfo.resourceIds.length);\\n\\n        // calculate the resources on the realm and the levels they are at\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            resourcesProduction[i] = realmInfo\\n                .resourceInfo[realmInfo.resourceIds[i]]\\n                .production;\\n        }\\n\\n        uint256 total = _getAvailableResources(realmInfo.lastUpdateAt) +\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt);\\n\\n        uint256 happiness = _getHappiness(_tokenId);\\n        // Calculate total output of the Realm\\n        for (uint256 i = 0; i < realmInfo.resourceIds.length; i++) {\\n            _realmsResourcesOutputs[i] =\\n                ((((resourcesProduction[i] * total) * 90) / 100) * happiness) /\\n                100; // replace with resourcesAvailable\\n        }\\n\\n        // return the remaining time\\n        realmInfo.lastUpdateAt = _returnTime(\\n            realmInfo.lastUpdateAt,\\n            _getAvailableResources(realmInfo.lastUpdateAt)\\n        );\\n\\n        realmInfo.vestedTimeUpdatedAt = _returnTime(\\n            realmInfo.vestedTimeUpdatedAt,\\n            _getAvailableVestedResources(realmInfo.vestedTimeUpdatedAt)\\n        );\\n\\n        return (realmInfo.resourceIds, _realmsResourcesOutputs);\\n    }\\n\\n    function withdrawAllResources() public payable {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        uint256 tokenBalanceOwner = sRealmstoken.balanceOf(msg.sender);\\n        uint256[] memory _ids;\\n        uint256[] memory _settlerValues;\\n\\n        uint256[] memory _totalIds = new uint256[](22);\\n        uint256[] memory _totalSettlerValues = new uint256[](22);\\n\\n        for (uint256 i = 0; i < tokenBalanceOwner; i++) {\\n            (_ids, _settlerValues) = _withdrawResources(\\n                sRealmstoken.tokenOfOwnerByIndex(msg.sender, i)\\n            );\\n\\n            for (uint256 x = 0; x < _ids.length; x++) {\\n                _totalIds[_ids[x]] = _ids[x];\\n                _totalSettlerValues[_ids[x]] += _settlerValues[x];\\n            }\\n        }\\n        _mintResources(msg.sender, _totalIds, _totalSettlerValues);\\n    }\\n\\n    function unstakeAndExit(uint256 _sTokenId)\\n        public\\n        checkSRealmOwner(_sTokenId)\\n    {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        RealmInfo storage realmInfo = s.realmInfo[_sTokenId];\\n\\n        RealmStorage realmsStorage = RealmStorage(s.treasury);\\n\\n        uint256 currentAge = (block.timestamp - s.genesisTime) / (1 days);\\n        // reset time\\n        realmInfo.lastUpdateAt = 0;\\n        realmInfo.vestedTimeUpdatedAt = 0;\\n        // transfer realm back to owner\\n        realmsStorage.withdraw(_sTokenId, msg.sender);\\n\\n        s.theAges[realmInfo.ageSettled].settledRealms--;\\n\\n        sRealmstoken.burn(_sTokenId);\\n        emit RealmUnstaked(msg.sender, _sTokenId, currentAge);\\n    }\\n}\\n\",\"keccak256\":\"0xc99d2a82bdceea61f7d3527ec125742a9f2eab40bef47fde04cd094c37e51c07\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    address sRealms;\\n    address realms;\\n    address realmsStorage;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n    mapping(uint256 => Raiding) raiding;\\n    mapping(uint256 => RaidingArmy) raidingArmy;\\n    mapping(uint256 => DefendingArmy) defendingArmy;\\n    mapping(uint256 => ArmyUnit) armyUnit;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\nstruct Raiding {\\n    uint256 coolDownTime;\\n    uint256 totalRaids;\\n    uint256 successfulRaids;\\n}\\n\\nstruct RaidingArmy {\\n    uint32 knightsTrained;\\n    uint32 knightsSlayed;\\n    uint32 footSoldiersTrained;\\n    uint32 footSoldiersSlayed;\\n    mapping(uint256 => TrainedArmyUnit) knights;\\n    mapping(uint256 => TrainedArmyUnit) footSoldiers;\\n}\\n\\nstruct DefendingArmy {\\n    uint32 trebuchetsTrained;\\n    uint32 trebuchetsSlayed;\\n    uint32 scorpionsTrained;\\n    uint32 scorpionsSlayed;\\n    mapping(uint256 => TrainedArmyUnit) trebuchets;\\n    mapping(uint256 => TrainedArmyUnit) scorpions;\\n}\\n\\nstruct TrainedArmyUnit {\\n    bool destroyed;\\n    uint256 unitFinished;\\n}\\n\\nstruct ArmyUnit {\\n    string name;\\n    uint256 timeToTrain;\\n    uint32 offence;\\n    uint32 defence;\\n    uint256[] resourceIds;\\n    uint256[] resourceValues;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xdf4eaff003a64be8c2fe375e99c6b5464c22c235404aaa429c2917a21babbac4\"},\"contracts/settling/libraries/Modifiers.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6a04f22a363dcf5c72fd36e2eb64c03f7bbed1d0d098311e2727c992890b4718\"},\"contracts/settling/libraries/ResourceUtils.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/Modifiers.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract ResourceUtils is Modifiers {\\n    function _mintResources(\\n        address _minter,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.resourceMinting(\\n            _minter,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchTransferResources(\\n        address _from,\\n        address _to,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.safeBatchTransferFrom(\\n            _from,\\n            _to,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchBurnResources(\\n        address _from,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.batchBurnResources(_from, _resourceIds, _resourceValues);\\n    }\\n\\n    function _getHappiness(uint256 _realmId) internal view returns (uint32) {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmId];\\n        int32 food;\\n\\n        if (realmInfo.foodSupply < 0) {\\n            food = ((100 * realmInfo.foodSupply) * 20) / 1000;\\n        } else {\\n            food = 0;\\n        }\\n        int32 happiness = 100 +\\n            ((100 * (realmInfo.population * 4)) / 1000) +\\n            food;\\n\\n        return uint32(happiness);\\n    }\\n\\n    function _returnTime(uint256 _lastUpdate, uint256 _resourcesAvailable)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _lastUpdate + _resourcesAvailable * 1 hours;\\n    }\\n\\n    function _getAvailableResources(uint256 _lastUpdate)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - _lastUpdate) / 1 hours;\\n    }\\n\\n    function _getAvailableVestedResources(uint256 _vestedTimeUpdatedAt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 vested;\\n        vested = (block.timestamp - _vestedTimeUpdatedAt) / (1 hours);\\n        if (vested > 14) {\\n            return vested;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x194b53dbb1e3ab2086de4432fef34c728b0f47d3c66d275594da87a74a2d147c\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/RealmStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ninterface RealmStorage is IERC721Receiver {\\n    function withdraw(uint256 _tokenId, address _lord) external;\\n}\\n\",\"keccak256\":\"0x844bbd86f3736968e28f3942eec0d07582943b6f3aacc0189e22ab58da7e6532\",\"license\":\"MIT\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchBurnResources(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x827b22a96beba7f58adf4ea7cdbc774d885adb2cd76831688b78884778f39dc0\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613099806100206000396000f3fe6080604052600436106100705760003560e01c8063913436241161004e57806391343624146100f7578063a50515b314610120578063a771303f1461012a578063da37000b1461014657610070565b806329e0ba66146100755780632f78e373146100915780636a589f86146100ce575b600080fd5b61008f600480360381019061008a91906122b2565b610183565b005b34801561009d57600080fd5b506100b860048036038101906100b39190612224565b610879565b6040516100c59190612823565b60405180910390f35b3480156100da57600080fd5b506100f560048036038101906100f0919061230a565b610891565b005b34801561010357600080fd5b5061011e60048036038101906101199190612224565b610d17565b005b610128611027565b005b610144600480360381019061013f9190612276565b611450565b005b34801561015257600080fd5b5061016d60048036038101906101689190612224565b6118b7565b60405161017a9190612823565b60405180910390f35b8260008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016101e69190612823565b60206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023691906121fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a906127e3565b60405180910390fd5b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600088815260200190815260200160002090506000816005018054905067ffffffffffffffff81111561032e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561035c5781602001602082028036833780820191505090505b5090506000826005018054905067ffffffffffffffff8111156103a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103d65781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff811115610422577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104505781602001602082028036833780820191505090505b50905060005b846005018054905081101561052c578460080160008660050183815481106104a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff1684828151811061050d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061052490612e56565b915050610456565b50600161053c85600201546118de565b6105498660010154611919565b6105539190612aa3565b11610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90612803565b60405180910390fd5b60006105a285600201546118de565b6105af8660010154611919565b6105b99190612aa3565b905060006105c68c61193b565b63ffffffff16905060005b8660050180549050811015610774576064826064605a868a8681518110610621577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516106339190612c73565b61063d9190612c73565b6106479190612b63565b6106519190612c73565b61065b9190612b63565b858281518110610694577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050606482610384600a868a86815181106106e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516106f49190612c73565b6106fe9190612c73565b6107089190612b63565b6107129190612c73565b61071c9190612b63565b848281518110610755577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061076c90612e56565b9150506105d1565b5061078f866001015461078a8860010154611919565b611a13565b86600101819055506107b186600201546107ac88600201546118de565b611a13565b86600201819055508673ffffffffffffffffffffffffffffffffffffffff16638edf55bf3388600501878f8f6040518663ffffffff1660e01b81526004016107fd9594939291906126f0565b600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b505050507f80622db75391035b375fd650fdd63615c99c66f0610ec81d9acee6ca1e0d927b86600501856040516108639291906127ac565b60405180910390a1505050505050505050505050565b60006108848261193b565b63ffffffff169050919050565b60008060000160008881526020019081526020016000209050858160000190805190602001906108c2929190611fa7565b50828160060160056101000a81548160ff021916908360ff1602179055508460008151811061091a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160036101000a81548160ff021916908360ff16021790555084600181518110610978577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160006101000a81548160ff021916908360ff160217905550846002815181106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160016101000a81548160ff021916908360ff16021790555084600381518110610a34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160026101000a81548160ff021916908360ff16021790555060005b8451811015610ae55781600501858281518110610aa1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151908060018154018082558091505060019003906000526020600020016000909160ff169091909150558080610add90612e56565b915050610a5b565b5060005b8451811015610ca357848181518110610b2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826008016000878481518110610b72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506001826008016000878481518110610be7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff1602179055506064826008016000878481518110610c5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160026101000a81548160ff021916908360ff1602179055508080610c9b90612e56565b915050610ae9565b5060008260ff1614610ccd57818160060160046101000a81548160ff021916908360ff1602179055505b7fe3c8f0bd20211d0bc86a10e012946d813c237c180cd4f11e74d1b658b8f5367a878787878787604051610d0696959493929190612867565b60405180910390a150505050505050565b8060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610d7a9190612823565b60206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca91906121fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e906127e3565b60405180910390fd5b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000806000016000868152602001908152602001600020905060008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000620151806000600d015442610eb99190612ccd565b610ec39190612b63565b905060008360010181905550600083600201819055508173ffffffffffffffffffffffffffffffffffffffff1662f714ce88336040518363ffffffff1660e01b8152600401610f1392919061283e565b600060405180830381600087803b158015610f2d57600080fd5b505af1158015610f41573d6000803e3d6000fd5b505050506000600c016000846003015481526020019081526020016000206000016000815480929190610f7390612daf565b91905055508373ffffffffffffffffffffffffffffffffffffffff166342966c68886040518263ffffffff1660e01b8152600401610fb19190612823565b600060405180830381600087803b158015610fcb57600080fd5b505af1158015610fdf573d6000803e3d6000fd5b505050507f1d5429148ee8279c8ea448f03ff7cdd042ab3c911ee5c05cb3a5a6d32dace2f233888360405161101693929190612775565b60405180910390a150505050505050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161108b9190612646565b60206040518083038186803b1580156110a357600080fd5b505afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db919061224d565b90506060806000601667ffffffffffffffff811115611123577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156111515781602001602082028036833780820191505090505b5090506000601667ffffffffffffffff811115611197577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156111c55781602001602082028036833780820191505090505b50905060005b8581101561143c576112668773ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b815260040161121192919061274c565b60206040518083038186803b15801561122957600080fd5b505afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611261919061224d565b611a36565b809550819650505060005b8551811015611428578581815181106112b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848783815181106112f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181518110611334577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050848181518110611379577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838783815181106113bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815181106113fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815161140e9190612aa3565b91508181525050808061142090612e56565b915050611271565b50808061143490612e56565b9150506111cb565b50611448338383611f09565b505050505050565b8160008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016114b39190612823565b60206040518083038186803b1580156114cb57600080fd5b505afa1580156114df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150391906121fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611570576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611567906127e3565b60405180910390fd5b6000806000016000868152602001908152602001600020905060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166321c6ddff33896040518363ffffffff1660e01b815260040161161692919061274c565b600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a6040518463ffffffff1660e01b81526004016116aa93929190612661565b600060405180830381600087803b1580156116c457600080fd5b505af11580156116d8573d6000803e3d6000fd5b505050506000620151806000600d0154426116f39190612ccd565b6116fd9190612b63565b90506000600c016000828152602001908152602001600020600001600081548092919061172990612e56565b91905055508661175c574284600101819055504284600201819055508084600301819055508084600401819055506118ad565b428460010181905550428460020181905550808460030181905550808460040181905550600084600601601b9054906101000a900460030b60030b141561183a57600084600601601b6101000a81548163ffffffff021916908360030b63ffffffff160217905550600184600601600f6101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460060160136101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460060160176101000a81548163ffffffff021916908360030b63ffffffff1602179055505b7f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c01338886040516118699190612823565b60405180910390a17fe254cd0a8f2353c72dad29e55618b11a740a94d3cc510e63a798e3381bb20fd33389836040516118a493929190612775565b60405180910390a15b5050505050505050565b60008060008001600084815260200190815260200160002090508060010154915050919050565b600080610e1083426118f09190612ccd565b6118fa9190612b63565b9050600e81111561190e5780915050611914565b60009150505b919050565b6000610e10824261192a9190612ccd565b6119349190612b63565b9050919050565b600080600080016000848152602001908152602001600020905060008082600601601b9054906101000a900460030b60030b12156119b1576103e8601483600601601b9054906101000a900460030b60646119969190612b94565b6119a09190612b94565b6119aa9190612af9565b90506119b6565b600090505b6000816103e860048560070160009054906101000a900460030b6119da9190612b94565b60646119e69190612b94565b6119f09190612af9565b60646119fc9190612a2b565b611a069190612a2b565b9050809350505050919050565b6000610e1082611a239190612c73565b83611a2e9190612aa3565b905092915050565b6060808260008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611a9c9190612823565b60206040518083038186803b158015611ab457600080fd5b505afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aec91906121fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b50906127e3565b60405180910390fd5b600080600001600087815260200190815260200160002090506000816005018054905067ffffffffffffffff811115611bbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611be95781602001602082028036833780820191505090505b509050816005018054905067ffffffffffffffff811115611c33577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c615781602001602082028036833780820191505090505b50945060005b8260050180549050811015611d3d57826008016000846005018381548110611cb8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16828281518110611d1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611d3590612e56565b915050611c67565b506000611d4d83600201546118de565b611d5a8460010154611919565b611d649190612aa3565b90506000611d718961193b565b63ffffffff16905060005b8460050180549050811015611e5e576064826064605a86888681518110611dcc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611dde9190612c73565b611de89190612c73565b611df29190612b63565b611dfc9190612c73565b611e069190612b63565b888281518110611e3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611e5690612e56565b915050611d7c565b50611e798460010154611e748660010154611919565b611a13565b8460010181905550611e9b8460020154611e9686600201546118de565b611a13565b8460020181905550836005018781805480602002602001604051908101604052809291908181526020018280548015611ef357602002820191906000526020600020905b815481526020019060010190808311611edf575b5050505050915097509750505050505050915091565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638edf55bf8585856040518463ffffffff1660e01b8152600401611f6f93929190612698565b600060405180830381600087803b158015611f8957600080fd5b505af1158015611f9d573d6000803e3d6000fd5b5050505050505050565b828054611fb390612dd9565b90600052602060002090601f016020900481019282611fd5576000855561201c565b82601f10611fee57805160ff191683800117855561201c565b8280016001018555821561201c579182015b8281111561201b578251825591602001919060010190612000565b5b509050612029919061202d565b5090565b5b8082111561204657600081600090555060010161202e565b5090565b600061205d61205884612902565b6128dd565b9050808382526020820190508285602086028201111561207c57600080fd5b60005b858110156120ac578161209288826121e6565b84526020840193506020830192505060018101905061207f565b5050509392505050565b60006120c96120c48461292e565b6128dd565b9050828152602081018484840111156120e157600080fd5b6120ec848285612d6d565b509392505050565b60008151905061210381613007565b92915050565b600082601f83011261211a57600080fd5b813561212a84826020860161204a565b91505092915050565b6000813590506121428161301e565b92915050565b60008083601f84011261215a57600080fd5b8235905067ffffffffffffffff81111561217357600080fd5b60208301915083600182028301111561218b57600080fd5b9250929050565b600082601f8301126121a357600080fd5b81356121b38482602086016120b6565b91505092915050565b6000813590506121cb81613035565b92915050565b6000815190506121e081613035565b92915050565b6000813590506121f58161304c565b92915050565b60006020828403121561220d57600080fd5b600061221b848285016120f4565b91505092915050565b60006020828403121561223657600080fd5b6000612244848285016121bc565b91505092915050565b60006020828403121561225f57600080fd5b600061226d848285016121d1565b91505092915050565b6000806040838503121561228957600080fd5b6000612297858286016121bc565b92505060206122a885828601612133565b9150509250929050565b6000806000604084860312156122c757600080fd5b60006122d5868287016121bc565b935050602084013567ffffffffffffffff8111156122f257600080fd5b6122fe86828701612148565b92509250509250925092565b60008060008060008060c0878903121561232357600080fd5b600061233189828a016121bc565b965050602087013567ffffffffffffffff81111561234e57600080fd5b61235a89828a01612192565b955050604087013567ffffffffffffffff81111561237757600080fd5b61238389828a01612109565b945050606087013567ffffffffffffffff8111156123a057600080fd5b6123ac89828a01612109565b93505060806123bd89828a016121e6565b92505060a06123ce89828a016121e6565b9150509295509295509295565b60006123e7838361260a565b60208301905092915050565b60006123ff8383612628565b60208301905092915050565b61241481612d0b565b82525050565b600061242582612994565b61242f81856129e7565b935061243a8361295f565b8060005b8381101561246b57815161245288826123db565b975061245d836129c0565b92505060018101905061243e565b5085935050505092915050565b60006124838261299f565b61248d81856129e7565b93506124988361296f565b8060005b838110156124d0576124ad82612f5b565b6124b788826123db565b97506124c2836129cd565b92505060018101905061249c565b5085935050505092915050565b60006124e8826129aa565b6124f281856129f8565b93506124fd83612984565b8060005b8381101561252e57815161251588826123f3565b9750612520836129da565b925050600181019050612501565b5085935050505092915050565b60006125478385612a09565b9350612554838584612d6d565b61255d83612f6e565b840190509392505050565b6000612573826129b5565b61257d8185612a1a565b935061258d818560208601612d7c565b61259681612f6e565b840191505092915050565b60006125ae600283612a09565b91506125b982612f8c565b602082019050919050565b60006125d1601983612a1a565b91506125dc82612fb5565b602082019050919050565b60006125f4601383612a1a565b91506125ff82612fde565b602082019050919050565b61261381612d56565b82525050565b61262281612d56565b82525050565b61263181612d60565b82525050565b61264081612d60565b82525050565b600060208201905061265b600083018461240b565b92915050565b6000606082019050612676600083018661240b565b612683602083018561240b565b6126906040830184612619565b949350505050565b60006080820190506126ad600083018661240b565b81810360208301526126bf818561241a565b905081810360408301526126d3818461241a565b905081810360608301526126e6816125a1565b9050949350505050565b6000608082019050612705600083018861240b565b81810360208301526127178187612478565b9050818103604083015261272b818661241a565b9050818103606083015261274081848661253b565b90509695505050505050565b6000604082019050612761600083018561240b565b61276e6020830184612619565b9392505050565b600060608201905061278a600083018661240b565b6127976020830185612619565b6127a46040830184612619565b949350505050565b600060408201905081810360008301526127c68185612478565b905081810360208301526127da818461241a565b90509392505050565b600060208201905081810360008301526127fc816125c4565b9050919050565b6000602082019050818103600083015261281c816125e7565b9050919050565b60006020820190506128386000830184612619565b92915050565b60006040820190506128536000830185612619565b612860602083018461240b565b9392505050565b600060c08201905061287c6000830189612619565b818103602083015261288e8188612568565b905081810360408301526128a281876124dd565b905081810360608301526128b681866124dd565b90506128c56080830185612637565b6128d260a0830184612637565b979650505050505050565b60006128e76128f8565b90506128f38282612e25565b919050565b6000604051905090565b600067ffffffffffffffff82111561291d5761291c612f2c565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561294957612948612f2c565b5b61295282612f6e565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612a3682612d29565b9150612a4183612d29565b925081637fffffff03831360008312151615612a6057612a5f612e9f565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000038312600083121615612a9857612a97612e9f565b5b828201905092915050565b6000612aae82612d56565b9150612ab983612d56565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612aee57612aed612e9f565b5b828201905092915050565b6000612b0482612d29565b9150612b0f83612d29565b925082612b1f57612b1e612ece565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000083141615612b5857612b57612e9f565b5b828205905092915050565b6000612b6e82612d56565b9150612b7983612d56565b925082612b8957612b88612ece565b5b828204905092915050565b6000612b9f82612d29565b9150612baa83612d29565b925082637fffffff0482116000841360008413161615612bcd57612bcc612e9f565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000583126000841260008413161615612c0a57612c09612e9f565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000582126000841360008412161615612c4757612c46612e9f565b5b82637fffffff0582126000841260008412161615612c6857612c67612e9f565b5b828202905092915050565b6000612c7e82612d56565b9150612c8983612d56565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cc257612cc1612e9f565b5b828202905092915050565b6000612cd882612d56565b9150612ce383612d56565b925082821015612cf657612cf5612e9f565b5b828203905092915050565b6000819050919050565b6000612d1682612d36565b9050919050565b60008115159050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612d9a578082015181840152602081019050612d7f565b83811115612da9576000848401525b50505050565b6000612dba82612d56565b91506000821415612dce57612dcd612e9f565b5b600182039050919050565b60006002820490506001821680612df157607f821691505b60208210811415612e0557612e04612efd565b5b50919050565b6000612e1e612e1983612f7f565b612d01565b9050919050565b612e2e82612f6e565b810181811067ffffffffffffffff82111715612e4d57612e4c612f2c565b5b80604052505050565b6000612e6182612d56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e9457612e93612e9f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000612f678254612e0b565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f6e6f7420656e6f756768207265736f7563657300000000000000000000000000600082015250565b61301081612d0b565b811461301b57600080fd5b50565b61302781612d1d565b811461303257600080fd5b50565b61303e81612d56565b811461304957600080fd5b50565b61305581612d60565b811461306057600080fd5b5056fea26469706673582212206c83bb8529ebc9f6a7342ed980600278189e25cb968cc733933cd43a1e4bfb3764736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063913436241161004e57806391343624146100f7578063a50515b314610120578063a771303f1461012a578063da37000b1461014657610070565b806329e0ba66146100755780632f78e373146100915780636a589f86146100ce575b600080fd5b61008f600480360381019061008a91906122b2565b610183565b005b34801561009d57600080fd5b506100b860048036038101906100b39190612224565b610879565b6040516100c59190612823565b60405180910390f35b3480156100da57600080fd5b506100f560048036038101906100f0919061230a565b610891565b005b34801561010357600080fd5b5061011e60048036038101906101199190612224565b610d17565b005b610128611027565b005b610144600480360381019061013f9190612276565b611450565b005b34801561015257600080fd5b5061016d60048036038101906101689190612224565b6118b7565b60405161017a9190612823565b60405180910390f35b8260008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016101e69190612823565b60206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023691906121fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a906127e3565b60405180910390fd5b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600088815260200190815260200160002090506000816005018054905067ffffffffffffffff81111561032e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561035c5781602001602082028036833780820191505090505b5090506000826005018054905067ffffffffffffffff8111156103a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103d65781602001602082028036833780820191505090505b5090506000836005018054905067ffffffffffffffff811115610422577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104505781602001602082028036833780820191505090505b50905060005b846005018054905081101561052c578460080160008660050183815481106104a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff1684828151811061050d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061052490612e56565b915050610456565b50600161053c85600201546118de565b6105498660010154611919565b6105539190612aa3565b11610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90612803565b60405180910390fd5b60006105a285600201546118de565b6105af8660010154611919565b6105b99190612aa3565b905060006105c68c61193b565b63ffffffff16905060005b8660050180549050811015610774576064826064605a868a8681518110610621577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516106339190612c73565b61063d9190612c73565b6106479190612b63565b6106519190612c73565b61065b9190612b63565b858281518110610694577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050606482610384600a868a86815181106106e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516106f49190612c73565b6106fe9190612c73565b6107089190612b63565b6107129190612c73565b61071c9190612b63565b848281518110610755577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061076c90612e56565b9150506105d1565b5061078f866001015461078a8860010154611919565b611a13565b86600101819055506107b186600201546107ac88600201546118de565b611a13565b86600201819055508673ffffffffffffffffffffffffffffffffffffffff16638edf55bf3388600501878f8f6040518663ffffffff1660e01b81526004016107fd9594939291906126f0565b600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b505050507f80622db75391035b375fd650fdd63615c99c66f0610ec81d9acee6ca1e0d927b86600501856040516108639291906127ac565b60405180910390a1505050505050505050505050565b60006108848261193b565b63ffffffff169050919050565b60008060000160008881526020019081526020016000209050858160000190805190602001906108c2929190611fa7565b50828160060160056101000a81548160ff021916908360ff1602179055508460008151811061091a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160036101000a81548160ff021916908360ff16021790555084600181518110610978577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160006101000a81548160ff021916908360ff160217905550846002815181106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160016101000a81548160ff021916908360ff16021790555084600381518110610a34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518160060160026101000a81548160ff021916908360ff16021790555060005b8451811015610ae55781600501858281518110610aa1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151908060018154018082558091505060019003906000526020600020016000909160ff169091909150558080610add90612e56565b915050610a5b565b5060005b8451811015610ca357848181518110610b2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826008016000878481518110610b72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055506001826008016000878481518110610be7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160016101000a81548160ff021916908360ff1602179055506064826008016000878481518110610c5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815260200190815260200160002060000160026101000a81548160ff021916908360ff1602179055508080610c9b90612e56565b915050610ae9565b5060008260ff1614610ccd57818160060160046101000a81548160ff021916908360ff1602179055505b7fe3c8f0bd20211d0bc86a10e012946d813c237c180cd4f11e74d1b658b8f5367a878787878787604051610d0696959493929190612867565b60405180910390a150505050505050565b8060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610d7a9190612823565b60206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca91906121fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e906127e3565b60405180910390fd5b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000806000016000868152602001908152602001600020905060008060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000620151806000600d015442610eb99190612ccd565b610ec39190612b63565b905060008360010181905550600083600201819055508173ffffffffffffffffffffffffffffffffffffffff1662f714ce88336040518363ffffffff1660e01b8152600401610f1392919061283e565b600060405180830381600087803b158015610f2d57600080fd5b505af1158015610f41573d6000803e3d6000fd5b505050506000600c016000846003015481526020019081526020016000206000016000815480929190610f7390612daf565b91905055508373ffffffffffffffffffffffffffffffffffffffff166342966c68886040518263ffffffff1660e01b8152600401610fb19190612823565b600060405180830381600087803b158015610fcb57600080fd5b505af1158015610fdf573d6000803e3d6000fd5b505050507f1d5429148ee8279c8ea448f03ff7cdd042ab3c911ee5c05cb3a5a6d32dace2f233888360405161101693929190612775565b60405180910390a150505050505050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161108b9190612646565b60206040518083038186803b1580156110a357600080fd5b505afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db919061224d565b90506060806000601667ffffffffffffffff811115611123577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156111515781602001602082028036833780820191505090505b5090506000601667ffffffffffffffff811115611197577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156111c55781602001602082028036833780820191505090505b50905060005b8581101561143c576112668773ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b815260040161121192919061274c565b60206040518083038186803b15801561122957600080fd5b505afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611261919061224d565b611a36565b809550819650505060005b8551811015611428578581815181106112b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848783815181106112f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181518110611334577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050848181518110611379577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838783815181106113bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815181106113fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815161140e9190612aa3565b91508181525050808061142090612e56565b915050611271565b50808061143490612e56565b9150506111cb565b50611448338383611f09565b505050505050565b8160008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016114b39190612823565b60206040518083038186803b1580156114cb57600080fd5b505afa1580156114df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150391906121fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611570576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611567906127e3565b60405180910390fd5b6000806000016000868152602001908152602001600020905060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166321c6ddff33896040518363ffffffff1660e01b815260040161161692919061274c565b600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166342842e0e33600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a6040518463ffffffff1660e01b81526004016116aa93929190612661565b600060405180830381600087803b1580156116c457600080fd5b505af11580156116d8573d6000803e3d6000fd5b505050506000620151806000600d0154426116f39190612ccd565b6116fd9190612b63565b90506000600c016000828152602001908152602001600020600001600081548092919061172990612e56565b91905055508661175c574284600101819055504284600201819055508084600301819055508084600401819055506118ad565b428460010181905550428460020181905550808460030181905550808460040181905550600084600601601b9054906101000a900460030b60030b141561183a57600084600601601b6101000a81548163ffffffff021916908360030b63ffffffff160217905550600184600601600f6101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460060160136101000a81548163ffffffff021916908360030b63ffffffff16021790555060018460060160176101000a81548163ffffffff021916908360030b63ffffffff1602179055505b7f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c01338886040516118699190612823565b60405180910390a17fe254cd0a8f2353c72dad29e55618b11a740a94d3cc510e63a798e3381bb20fd33389836040516118a493929190612775565b60405180910390a15b5050505050505050565b60008060008001600084815260200190815260200160002090508060010154915050919050565b600080610e1083426118f09190612ccd565b6118fa9190612b63565b9050600e81111561190e5780915050611914565b60009150505b919050565b6000610e10824261192a9190612ccd565b6119349190612b63565b9050919050565b600080600080016000848152602001908152602001600020905060008082600601601b9054906101000a900460030b60030b12156119b1576103e8601483600601601b9054906101000a900460030b60646119969190612b94565b6119a09190612b94565b6119aa9190612af9565b90506119b6565b600090505b6000816103e860048560070160009054906101000a900460030b6119da9190612b94565b60646119e69190612b94565b6119f09190612af9565b60646119fc9190612a2b565b611a069190612a2b565b9050809350505050919050565b6000610e1082611a239190612c73565b83611a2e9190612aa3565b905092915050565b6060808260008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401611a9c9190612823565b60206040518083038186803b158015611ab457600080fd5b505afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aec91906121fb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b50906127e3565b60405180910390fd5b600080600001600087815260200190815260200160002090506000816005018054905067ffffffffffffffff811115611bbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611be95781602001602082028036833780820191505090505b509050816005018054905067ffffffffffffffff811115611c33577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c615781602001602082028036833780820191505090505b50945060005b8260050180549050811015611d3d57826008016000846005018381548110611cb8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160029054906101000a900460ff1660ff16828281518110611d1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611d3590612e56565b915050611c67565b506000611d4d83600201546118de565b611d5a8460010154611919565b611d649190612aa3565b90506000611d718961193b565b63ffffffff16905060005b8460050180549050811015611e5e576064826064605a86888681518110611dcc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611dde9190612c73565b611de89190612c73565b611df29190612b63565b611dfc9190612c73565b611e069190612b63565b888281518110611e3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611e5690612e56565b915050611d7c565b50611e798460010154611e748660010154611919565b611a13565b8460010181905550611e9b8460020154611e9686600201546118de565b611a13565b8460020181905550836005018781805480602002602001604051908101604052809291908181526020018280548015611ef357602002820191906000526020600020905b815481526020019060010190808311611edf575b5050505050915097509750505050505050915091565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638edf55bf8585856040518463ffffffff1660e01b8152600401611f6f93929190612698565b600060405180830381600087803b158015611f8957600080fd5b505af1158015611f9d573d6000803e3d6000fd5b5050505050505050565b828054611fb390612dd9565b90600052602060002090601f016020900481019282611fd5576000855561201c565b82601f10611fee57805160ff191683800117855561201c565b8280016001018555821561201c579182015b8281111561201b578251825591602001919060010190612000565b5b509050612029919061202d565b5090565b5b8082111561204657600081600090555060010161202e565b5090565b600061205d61205884612902565b6128dd565b9050808382526020820190508285602086028201111561207c57600080fd5b60005b858110156120ac578161209288826121e6565b84526020840193506020830192505060018101905061207f565b5050509392505050565b60006120c96120c48461292e565b6128dd565b9050828152602081018484840111156120e157600080fd5b6120ec848285612d6d565b509392505050565b60008151905061210381613007565b92915050565b600082601f83011261211a57600080fd5b813561212a84826020860161204a565b91505092915050565b6000813590506121428161301e565b92915050565b60008083601f84011261215a57600080fd5b8235905067ffffffffffffffff81111561217357600080fd5b60208301915083600182028301111561218b57600080fd5b9250929050565b600082601f8301126121a357600080fd5b81356121b38482602086016120b6565b91505092915050565b6000813590506121cb81613035565b92915050565b6000815190506121e081613035565b92915050565b6000813590506121f58161304c565b92915050565b60006020828403121561220d57600080fd5b600061221b848285016120f4565b91505092915050565b60006020828403121561223657600080fd5b6000612244848285016121bc565b91505092915050565b60006020828403121561225f57600080fd5b600061226d848285016121d1565b91505092915050565b6000806040838503121561228957600080fd5b6000612297858286016121bc565b92505060206122a885828601612133565b9150509250929050565b6000806000604084860312156122c757600080fd5b60006122d5868287016121bc565b935050602084013567ffffffffffffffff8111156122f257600080fd5b6122fe86828701612148565b92509250509250925092565b60008060008060008060c0878903121561232357600080fd5b600061233189828a016121bc565b965050602087013567ffffffffffffffff81111561234e57600080fd5b61235a89828a01612192565b955050604087013567ffffffffffffffff81111561237757600080fd5b61238389828a01612109565b945050606087013567ffffffffffffffff8111156123a057600080fd5b6123ac89828a01612109565b93505060806123bd89828a016121e6565b92505060a06123ce89828a016121e6565b9150509295509295509295565b60006123e7838361260a565b60208301905092915050565b60006123ff8383612628565b60208301905092915050565b61241481612d0b565b82525050565b600061242582612994565b61242f81856129e7565b935061243a8361295f565b8060005b8381101561246b57815161245288826123db565b975061245d836129c0565b92505060018101905061243e565b5085935050505092915050565b60006124838261299f565b61248d81856129e7565b93506124988361296f565b8060005b838110156124d0576124ad82612f5b565b6124b788826123db565b97506124c2836129cd565b92505060018101905061249c565b5085935050505092915050565b60006124e8826129aa565b6124f281856129f8565b93506124fd83612984565b8060005b8381101561252e57815161251588826123f3565b9750612520836129da565b925050600181019050612501565b5085935050505092915050565b60006125478385612a09565b9350612554838584612d6d565b61255d83612f6e565b840190509392505050565b6000612573826129b5565b61257d8185612a1a565b935061258d818560208601612d7c565b61259681612f6e565b840191505092915050565b60006125ae600283612a09565b91506125b982612f8c565b602082019050919050565b60006125d1601983612a1a565b91506125dc82612fb5565b602082019050919050565b60006125f4601383612a1a565b91506125ff82612fde565b602082019050919050565b61261381612d56565b82525050565b61262281612d56565b82525050565b61263181612d60565b82525050565b61264081612d60565b82525050565b600060208201905061265b600083018461240b565b92915050565b6000606082019050612676600083018661240b565b612683602083018561240b565b6126906040830184612619565b949350505050565b60006080820190506126ad600083018661240b565b81810360208301526126bf818561241a565b905081810360408301526126d3818461241a565b905081810360608301526126e6816125a1565b9050949350505050565b6000608082019050612705600083018861240b565b81810360208301526127178187612478565b9050818103604083015261272b818661241a565b9050818103606083015261274081848661253b565b90509695505050505050565b6000604082019050612761600083018561240b565b61276e6020830184612619565b9392505050565b600060608201905061278a600083018661240b565b6127976020830185612619565b6127a46040830184612619565b949350505050565b600060408201905081810360008301526127c68185612478565b905081810360208301526127da818461241a565b90509392505050565b600060208201905081810360008301526127fc816125c4565b9050919050565b6000602082019050818103600083015261281c816125e7565b9050919050565b60006020820190506128386000830184612619565b92915050565b60006040820190506128536000830185612619565b612860602083018461240b565b9392505050565b600060c08201905061287c6000830189612619565b818103602083015261288e8188612568565b905081810360408301526128a281876124dd565b905081810360608301526128b681866124dd565b90506128c56080830185612637565b6128d260a0830184612637565b979650505050505050565b60006128e76128f8565b90506128f38282612e25565b919050565b6000604051905090565b600067ffffffffffffffff82111561291d5761291c612f2c565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561294957612948612f2c565b5b61295282612f6e565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612a3682612d29565b9150612a4183612d29565b925081637fffffff03831360008312151615612a6057612a5f612e9f565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000038312600083121615612a9857612a97612e9f565b5b828201905092915050565b6000612aae82612d56565b9150612ab983612d56565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612aee57612aed612e9f565b5b828201905092915050565b6000612b0482612d29565b9150612b0f83612d29565b925082612b1f57612b1e612ece565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000083141615612b5857612b57612e9f565b5b828205905092915050565b6000612b6e82612d56565b9150612b7983612d56565b925082612b8957612b88612ece565b5b828204905092915050565b6000612b9f82612d29565b9150612baa83612d29565b925082637fffffff0482116000841360008413161615612bcd57612bcc612e9f565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000583126000841260008413161615612c0a57612c09612e9f565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000582126000841360008412161615612c4757612c46612e9f565b5b82637fffffff0582126000841260008412161615612c6857612c67612e9f565b5b828202905092915050565b6000612c7e82612d56565b9150612c8983612d56565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cc257612cc1612e9f565b5b828202905092915050565b6000612cd882612d56565b9150612ce383612d56565b925082821015612cf657612cf5612e9f565b5b828203905092915050565b6000819050919050565b6000612d1682612d36565b9050919050565b60008115159050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612d9a578082015181840152602081019050612d7f565b83811115612da9576000848401525b50505050565b6000612dba82612d56565b91506000821415612dce57612dcd612e9f565b5b600182039050919050565b60006002820490506001821680612df157607f821691505b60208210811415612e0557612e04612efd565b5b50919050565b6000612e1e612e1983612f7f565b612d01565b9050919050565b612e2e82612f6e565b810181811067ffffffffffffffff82111715612e4d57612e4c612f2c565b5b80604052505050565b6000612e6182612d56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e9457612e93612e9f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000612f678254612e0b565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f6e6f7420656e6f756768207265736f7563657300000000000000000000000000600082015250565b61301081612d0b565b811461301b57600080fd5b50565b61302781612d1d565b811461303257600080fd5b50565b61303e81612d56565b811461304957600080fd5b50565b61305581612d60565b811461306057600080fd5b5056fea26469706673582212206c83bb8529ebc9f6a7342ed980600278189e25cb968cc733933cd43a1e4bfb3764736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1474,
        "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)1254_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(ArmyUnit)1439_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ArmyUnit)1439_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)1349_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)1349_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1358_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)1358_storage"
      },
      "t_mapping(t_uint256,t_struct(DefendingArmy)1419_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefendingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(DefendingArmy)1419_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)1361_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)1361_storage"
      },
      "t_mapping(t_uint256,t_struct(Raiding)1381_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raiding)",
        "numberOfBytes": "32",
        "value": "t_struct(Raiding)1381_storage"
      },
      "t_mapping(t_uint256,t_struct(RaidingArmy)1400_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RaidingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(RaidingArmy)1400_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)1320_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)1320_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)1327_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)1327_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)1261_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)1261_storage"
      },
      "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1424_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainedArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(TrainedArmyUnit)1424_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1374_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)1374_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)1370_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)1370_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)1254_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 1192,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)1320_storage)"
          },
          {
            "astId": 1194,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "sRealms",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1196,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realms",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1198,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmsStorage",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1200,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1202,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resources",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1204,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1206,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "lords",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1211,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)1361_storage)"
          },
          {
            "astId": 1216,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)1370_storage)"
          },
          {
            "astId": 1221,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)1358_storage)"
          },
          {
            "astId": 1226,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1349_storage)"
          },
          {
            "astId": 1231,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(TheAges)1261_storage)"
          },
          {
            "astId": 1233,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 1238,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "raiding",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(Raiding)1381_storage)"
          },
          {
            "astId": 1243,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "raidingArmy",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(RaidingArmy)1400_storage)"
          },
          {
            "astId": 1248,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "defendingArmy",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(DefendingArmy)1419_storage)"
          },
          {
            "astId": 1253,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "armyUnit",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(ArmyUnit)1439_storage)"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(ArmyUnit)1439_storage": {
        "encoding": "inplace",
        "label": "struct ArmyUnit",
        "members": [
          {
            "astId": 1426,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1428,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "timeToTrain",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1430,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "offence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1432,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "defence",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1435,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1438,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingCosts)1349_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 1329,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1332,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1335,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1338,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 1340,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1342,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1344,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1346,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 1348,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)1358_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 1352,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1357,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)1349_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefendingArmy)1419_storage": {
        "encoding": "inplace",
        "label": "struct DefendingArmy",
        "members": [
          {
            "astId": 1402,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "trebuchetsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1404,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "trebuchetsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1406,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "scorpionsTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1408,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "scorpionsSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1413,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "trebuchets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1424_storage)"
          },
          {
            "astId": 1418,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "scorpions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1424_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LevelProduction)1361_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 1360,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Raiding)1381_storage": {
        "encoding": "inplace",
        "label": "struct Raiding",
        "members": [
          {
            "astId": 1376,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "coolDownTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1378,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "totalRaids",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1380,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "successfulRaids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RaidingArmy)1400_storage": {
        "encoding": "inplace",
        "label": "struct RaidingArmy",
        "members": [
          {
            "astId": 1383,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "knightsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1385,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "knightsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1387,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "footSoldiersTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1389,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "footSoldiersSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1394,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "knights",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1424_storage)"
          },
          {
            "astId": 1399,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "footSoldiers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)1424_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RealmInfo)1320_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 1263,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1265,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1267,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1269,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1271,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1274,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1276,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1278,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1280,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1282,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1284,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1286,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1288,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "aquaducts",
            "offset": 6,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1290,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "temples",
            "offset": 7,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1292,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "castles",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1294,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "markets",
            "offset": 9,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1296,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ports",
            "offset": 10,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1298,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "barracks",
            "offset": 11,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1300,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "farms",
            "offset": 12,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1302,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "shipyard",
            "offset": 13,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1304,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "fishingVillage",
            "offset": 14,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 1306,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmDefence",
            "offset": 15,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1308,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmOffence",
            "offset": 19,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1310,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "realmMagic",
            "offset": 23,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1312,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "foodSupply",
            "offset": 27,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 1314,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "population",
            "offset": 0,
            "slot": "7",
            "type": "t_int32"
          },
          {
            "astId": 1319,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)1327_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ResourceInfo)1327_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 1322,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1324,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1326,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)1261_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 1256,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1258,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1260,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TrainedArmyUnit)1424_storage": {
        "encoding": "inplace",
        "label": "struct TrainedArmyUnit",
        "members": [
          {
            "astId": 1421,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "destroyed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1423,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "unitFinished",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UpgradeCostLevels)1374_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 1373,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)1370_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 1364,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 1369,
            "contract": "contracts/settling/facets/StakingFacet.sol:StakingFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)1374_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}