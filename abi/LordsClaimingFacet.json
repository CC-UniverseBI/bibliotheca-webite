{
  "address": "0x7EcD12d9Dffd805ba3Fa09b1e922B3732E218F86",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lordsClaimed",
          "type": "uint256"
        }
      ],
      "name": "LordsClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimAllLords",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_realmId",
          "type": "uint256"
        }
      ],
      "name": "claimLords",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeToNextAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd109d399cf131ea5b33a0c1ab7b9965f4cfc557fc49854523be231915cd8bd4",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0x7EcD12d9Dffd805ba3Fa09b1e922B3732E218F86",
    "transactionIndex": 0,
    "gasUsed": "33820315",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x37fd8c5323c2bee09d81c60b0d50afb6353eec920df05c51a6ded50ee38e1de2",
    "transactionHash": "0xdd109d399cf131ea5b33a0c1ab7b9965f4cfc557fc49854523be231915cd8bd4",
    "logs": [],
    "blockNumber": 5982984,
    "cumulativeGasUsed": "26338875",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d8b2bb63233aed491a06ed5388fa0df5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lordsClaimed\",\"type\":\"uint256\"}],\"name\":\"LordsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimAllLords\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_realmId\",\"type\":\"uint256\"}],\"name\":\"claimLords\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToNextAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/LordsClaimingFacet.sol\":\"LordsClaimingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/LordsClaimingFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/LordsToken.sol\\\";\\nimport \\\"../libraries/Modifiers.sol\\\";\\n\\ncontract LordsClaimingFacet is Modifiers {\\n    function _getAgeSupply(uint256 _age)\\n        internal\\n        view\\n        returns (uint256 _lordsAvailable)\\n    {\\n        LordsToken lordsToken = LordsToken(s.lords);\\n\\n        _lordsAvailable = lordsToken.getAgeDistribution(_age);\\n        return _lordsAvailable;\\n    }\\n\\n    function getAge() external view returns (uint256) {\\n        return _getAge();\\n    }\\n\\n    function _getAge() internal view returns (uint256) {\\n        return (block.timestamp - s.genesisTime) / (1 days);\\n    }\\n\\n    function timeToNextAge() external view returns (uint256) {\\n        return ((block.timestamp - s.genesisTime) % (1 days)) - _getAge();\\n    }\\n\\n    function claimLords(uint256 _realmId)\\n        external\\n        payable\\n        checkSRealmOwner(_realmId)\\n    {\\n        require(_getAge() > 0, \\\"AGE_STILL_GENESIS\\\");\\n        LordsToken lordsToken = LordsToken(s.lords);\\n\\n        RealmInfo storage realmInfo = s.realmInfo[_realmId];\\n\\n        uint256 currentAge = _getAge();\\n\\n        uint256 totalEligbleLords;\\n\\n        uint256[] memory totalSettledRealms = new uint256[](currentAge);\\n\\n        uint256 settledInAge;\\n\\n        for (uint256 i = 0; i < currentAge; i++) {\\n            settledInAge += s.theAges[i].settledRealms;\\n            totalSettledRealms[i] = settledInAge;\\n        }\\n\\n        for (uint256 x = realmInfo.ageClaimed; x <= currentAge - 1; x++) {\\n            uint256 supply = _getAgeSupply(x);\\n            totalEligbleLords += supply / totalSettledRealms[x];\\n            totalEligbleLords += supply % totalSettledRealms[x];\\n        }\\n\\n        require(totalEligbleLords > 0, \\\"NO_LORDS_AVAILABLE\\\");\\n\\n        realmInfo.ageClaimed = _getAge();\\n\\n        lordsToken.mint(msg.sender, totalEligbleLords);\\n\\n        emit LordsClaimed(msg.sender, totalEligbleLords);\\n    }\\n\\n    function claimAllLords() external payable {\\n        require(_getAge() > 0, \\\"AGE_STILL_GENESIS\\\");\\n        LordsToken lordsToken = LordsToken(s.lords);\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n\\n        uint256 tokenBalanceOwner = sRealmstoken.balanceOf(msg.sender);\\n\\n        uint256 currentAge = _getAge();\\n\\n        uint256 totalEligbleLords;\\n\\n        uint256[] memory totalSettledRealms = new uint256[](currentAge);\\n\\n        uint256 settledInAge;\\n\\n        for (uint256 i = 0; i < currentAge; i++) {\\n            settledInAge += s.theAges[i].settledRealms;\\n            totalSettledRealms[i] = settledInAge;\\n        }\\n\\n        for (uint256 i = 0; i < tokenBalanceOwner; i++) {\\n            RealmInfo storage realmInfo = s.realmInfo[\\n                sRealmstoken.tokenOfOwnerByIndex(msg.sender, i)\\n            ];\\n\\n            for (uint256 x = realmInfo.ageClaimed; x <= currentAge - 1; x++) {\\n                uint256 supply = _getAgeSupply(x);\\n                totalEligbleLords += supply / totalSettledRealms[x];\\n                totalEligbleLords += supply % totalSettledRealms[x];\\n            }\\n\\n            realmInfo.ageClaimed = _getAge();\\n        }\\n        require(totalEligbleLords > 0, \\\"NO_LORDS_AVAILABLE\\\");\\n\\n        lordsToken.mint(msg.sender, totalEligbleLords);\\n\\n        emit LordsClaimed(msg.sender, totalEligbleLords);\\n    }\\n\\n    event LordsClaimed(address _claimer, uint256 _lordsClaimed);\\n}\\n\",\"keccak256\":\"0xb8ef5bea4d84fafb10b9ce4a4d1b366044278c29aee4e91c7fd2747a8f9a158d\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    address sRealms;\\n    address realms;\\n    address realmsStorage;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n    mapping(uint256 => Raiding) raiding;\\n    mapping(uint256 => RaidingArmy) raidingArmy;\\n    mapping(uint256 => DefendingArmy) defendingArmy;\\n    mapping(uint256 => ArmyUnit) armyUnit;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\nstruct Raiding {\\n    uint256 coolDownTime;\\n    uint256 totalRaids;\\n    uint256 successfulRaids;\\n}\\n\\nstruct RaidingArmy {\\n    uint32 knightsTrained;\\n    uint32 knightsSlayed;\\n    uint32 footSoldiersTrained;\\n    uint32 footSoldiersSlayed;\\n    mapping(uint256 => TrainedArmyUnit) knights;\\n    mapping(uint256 => TrainedArmyUnit) footSoldiers;\\n}\\n\\nstruct DefendingArmy {\\n    uint32 trebuchetsTrained;\\n    uint32 trebuchetsSlayed;\\n    uint32 scorpionsTrained;\\n    uint32 scorpionsSlayed;\\n    mapping(uint256 => TrainedArmyUnit) trebuchets;\\n    mapping(uint256 => TrainedArmyUnit) scorpions;\\n}\\n\\nstruct TrainedArmyUnit {\\n    bool destroyed;\\n    uint256 unitFinished;\\n}\\n\\nstruct ArmyUnit {\\n    string name;\\n    uint256 timeToTrain;\\n    uint32 offence;\\n    uint32 defence;\\n    uint256[] resourceIds;\\n    uint256[] resourceValues;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xdf4eaff003a64be8c2fe375e99c6b5464c22c235404aaa429c2917a21babbac4\"},\"contracts/settling/libraries/Modifiers.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6a04f22a363dcf5c72fd36e2eb64c03f7bbed1d0d098311e2727c992890b4718\"},\"contracts/shared/interfaces/LordsToken.sol\":{\"content\":\"pragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface LordsToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function getAgeDistribution(uint256 _age) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe44d6d1bc24dba0ea482a633969fc8299278c2858fffb05158c4bf487c14c017\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061104a806100206000396000f3fe60806040526004361061003f5760003560e01c8063760fd39314610044578063967e6e651461004e57806397b05b4f1461007957806398fac10714610095575b600080fd5b61004c6100c0565b005b34801561005a57600080fd5b506100636105b0565b6040516100709190610d70565b60405180910390f35b610093600480360381019061008e9190610bf3565b6105bf565b005b3480156100a157600080fd5b506100aa610a71565b6040516100b79190610d70565b60405180910390f35b60006100ca610aa9565b1161010a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010190610d10565b60405180910390fd5b60008060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101979190610ccc565b60206040518083038186803b1580156101af57600080fd5b505afa1580156101c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e79190610c1c565b905060006101f3610aa9565b90506000808267ffffffffffffffff811115610238577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102665781602001602082028036833780820191505090505b509050600080600090505b848110156102f9576000600c016000828152602001908152602001600020600001548261029e9190610d9c565b9150818382815181106102da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806102f190610e93565b915050610271565b5060005b858110156104bd5760008060000160008973ffffffffffffffffffffffffffffffffffffffff16632f745c5933866040518363ffffffff1660e01b8152600401610348929190610ce7565b60206040518083038186803b15801561036057600080fd5b505afa158015610374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103989190610c1c565b815260200190815260200160002090506000816004015490505b6001876103bf9190610e23565b81116104985760006103d082610acf565b905085828151811061040b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518161041e9190610df2565b876104299190610d9c565b9650858281518110610464577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151816104779190610edc565b876104829190610d9c565b965050808061049090610e93565b9150506103b2565b506104a1610aa9565b81600401819055505080806104b590610e93565b9150506102fd565b5060008311610501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f890610d50565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b815260040161053c929190610ce7565b600060405180830381600087803b15801561055657600080fd5b505af115801561056a573d6000803e3d6000fd5b505050507f12170b2044b97de561335471235c37308ebde6a0fc56428462a5f05f460db676338460405161059f929190610ce7565b60405180910390a150505050505050565b60006105ba610aa9565b905090565b8060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016106229190610d70565b60206040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190610bca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690610d30565b60405180910390fd5b60006106e9610aa9565b11610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072090610d10565b60405180910390fd5b60008060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600086815260200190815260200160002090506000610775610aa9565b90506000808267ffffffffffffffff8111156107ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107e85781602001602082028036833780820191505090505b509050600080600090505b8481101561087b576000600c01600082815260200190815260200160002060000154826108209190610d9c565b91508183828151811061085c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061087390610e93565b9150506107f3565b506000856004015490505b6001856108939190610e23565b811161096c5760006108a482610acf565b90508382815181106108df577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151816108f29190610df2565b856108fd9190610d9c565b9450838281518110610938577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518161094b9190610edc565b856109569190610d9c565b945050808061096490610e93565b915050610886565b50600083116109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a790610d50565b60405180910390fd5b6109b8610aa9565b85600401819055508573ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b81526004016109fb929190610ce7565b600060405180830381600087803b158015610a1557600080fd5b505af1158015610a29573d6000803e3d6000fd5b505050507f12170b2044b97de561335471235c37308ebde6a0fc56428462a5f05f460db6763384604051610a5e929190610ce7565b60405180910390a1505050505050505050565b6000610a7b610aa9565b620151806000600d015442610a909190610e23565b610a9a9190610edc565b610aa49190610e23565b905090565b6000620151806000600d015442610ac09190610e23565b610aca9190610df2565b905090565b600080600060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636049585f846040518263ffffffff1660e01b8152600401610b339190610d70565b60206040518083038186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b839190610c1c565b915050919050565b600081519050610b9a81610fe6565b92915050565b600081359050610baf81610ffd565b92915050565b600081519050610bc481610ffd565b92915050565b600060208284031215610bdc57600080fd5b6000610bea84828501610b8b565b91505092915050565b600060208284031215610c0557600080fd5b6000610c1384828501610ba0565b91505092915050565b600060208284031215610c2e57600080fd5b6000610c3c84828501610bb5565b91505092915050565b610c4e81610e57565b82525050565b6000610c61601183610d8b565b9150610c6c82610f6b565b602082019050919050565b6000610c84601983610d8b565b9150610c8f82610f94565b602082019050919050565b6000610ca7601283610d8b565b9150610cb282610fbd565b602082019050919050565b610cc681610e89565b82525050565b6000602082019050610ce16000830184610c45565b92915050565b6000604082019050610cfc6000830185610c45565b610d096020830184610cbd565b9392505050565b60006020820190508181036000830152610d2981610c54565b9050919050565b60006020820190508181036000830152610d4981610c77565b9050919050565b60006020820190508181036000830152610d6981610c9a565b9050919050565b6000602082019050610d856000830184610cbd565b92915050565b600082825260208201905092915050565b6000610da782610e89565b9150610db283610e89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de757610de6610f0d565b5b828201905092915050565b6000610dfd82610e89565b9150610e0883610e89565b925082610e1857610e17610f3c565b5b828204905092915050565b6000610e2e82610e89565b9150610e3983610e89565b925082821015610e4c57610e4b610f0d565b5b828203905092915050565b6000610e6282610e69565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e9e82610e89565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ed157610ed0610f0d565b5b600182019050919050565b6000610ee782610e89565b9150610ef283610e89565b925082610f0257610f01610f3c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4147455f5354494c4c5f47454e45534953000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f4e4f5f4c4f5244535f415641494c41424c450000000000000000000000000000600082015250565b610fef81610e57565b8114610ffa57600080fd5b50565b61100681610e89565b811461101157600080fd5b5056fea26469706673582212207bf23cbe6cd4362d18a0ea72fab786e61af53b16c7d501ebeae753e012d6ec6064736f6c63430008030033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c8063760fd39314610044578063967e6e651461004e57806397b05b4f1461007957806398fac10714610095575b600080fd5b61004c6100c0565b005b34801561005a57600080fd5b506100636105b0565b6040516100709190610d70565b60405180910390f35b610093600480360381019061008e9190610bf3565b6105bf565b005b3480156100a157600080fd5b506100aa610a71565b6040516100b79190610d70565b60405180910390f35b60006100ca610aa9565b1161010a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010190610d10565b60405180910390fd5b60008060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101979190610ccc565b60206040518083038186803b1580156101af57600080fd5b505afa1580156101c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e79190610c1c565b905060006101f3610aa9565b90506000808267ffffffffffffffff811115610238577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102665781602001602082028036833780820191505090505b509050600080600090505b848110156102f9576000600c016000828152602001908152602001600020600001548261029e9190610d9c565b9150818382815181106102da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806102f190610e93565b915050610271565b5060005b858110156104bd5760008060000160008973ffffffffffffffffffffffffffffffffffffffff16632f745c5933866040518363ffffffff1660e01b8152600401610348929190610ce7565b60206040518083038186803b15801561036057600080fd5b505afa158015610374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103989190610c1c565b815260200190815260200160002090506000816004015490505b6001876103bf9190610e23565b81116104985760006103d082610acf565b905085828151811061040b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518161041e9190610df2565b876104299190610d9c565b9650858281518110610464577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151816104779190610edc565b876104829190610d9c565b965050808061049090610e93565b9150506103b2565b506104a1610aa9565b81600401819055505080806104b590610e93565b9150506102fd565b5060008311610501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f890610d50565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b815260040161053c929190610ce7565b600060405180830381600087803b15801561055657600080fd5b505af115801561056a573d6000803e3d6000fd5b505050507f12170b2044b97de561335471235c37308ebde6a0fc56428462a5f05f460db676338460405161059f929190610ce7565b60405180910390a150505050505050565b60006105ba610aa9565b905090565b8060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016106229190610d70565b60206040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190610bca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690610d30565b60405180910390fd5b60006106e9610aa9565b11610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072090610d10565b60405180910390fd5b60008060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600001600086815260200190815260200160002090506000610775610aa9565b90506000808267ffffffffffffffff8111156107ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107e85781602001602082028036833780820191505090505b509050600080600090505b8481101561087b576000600c01600082815260200190815260200160002060000154826108209190610d9c565b91508183828151811061085c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061087390610e93565b9150506107f3565b506000856004015490505b6001856108939190610e23565b811161096c5760006108a482610acf565b90508382815181106108df577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151816108f29190610df2565b856108fd9190610d9c565b9450838281518110610938577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518161094b9190610edc565b856109569190610d9c565b945050808061096490610e93565b915050610886565b50600083116109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a790610d50565b60405180910390fd5b6109b8610aa9565b85600401819055508573ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b81526004016109fb929190610ce7565b600060405180830381600087803b158015610a1557600080fd5b505af1158015610a29573d6000803e3d6000fd5b505050507f12170b2044b97de561335471235c37308ebde6a0fc56428462a5f05f460db6763384604051610a5e929190610ce7565b60405180910390a1505050505050505050565b6000610a7b610aa9565b620151806000600d015442610a909190610e23565b610a9a9190610edc565b610aa49190610e23565b905090565b6000620151806000600d015442610ac09190610e23565b610aca9190610df2565b905090565b600080600060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636049585f846040518263ffffffff1660e01b8152600401610b339190610d70565b60206040518083038186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b839190610c1c565b915050919050565b600081519050610b9a81610fe6565b92915050565b600081359050610baf81610ffd565b92915050565b600081519050610bc481610ffd565b92915050565b600060208284031215610bdc57600080fd5b6000610bea84828501610b8b565b91505092915050565b600060208284031215610c0557600080fd5b6000610c1384828501610ba0565b91505092915050565b600060208284031215610c2e57600080fd5b6000610c3c84828501610bb5565b91505092915050565b610c4e81610e57565b82525050565b6000610c61601183610d8b565b9150610c6c82610f6b565b602082019050919050565b6000610c84601983610d8b565b9150610c8f82610f94565b602082019050919050565b6000610ca7601283610d8b565b9150610cb282610fbd565b602082019050919050565b610cc681610e89565b82525050565b6000602082019050610ce16000830184610c45565b92915050565b6000604082019050610cfc6000830185610c45565b610d096020830184610cbd565b9392505050565b60006020820190508181036000830152610d2981610c54565b9050919050565b60006020820190508181036000830152610d4981610c77565b9050919050565b60006020820190508181036000830152610d6981610c9a565b9050919050565b6000602082019050610d856000830184610cbd565b92915050565b600082825260208201905092915050565b6000610da782610e89565b9150610db283610e89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de757610de6610f0d565b5b828201905092915050565b6000610dfd82610e89565b9150610e0883610e89565b925082610e1857610e17610f3c565b5b828204905092915050565b6000610e2e82610e89565b9150610e3983610e89565b925082821015610e4c57610e4b610f0d565b5b828203905092915050565b6000610e6282610e69565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e9e82610e89565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ed157610ed0610f0d565b5b600182019050919050565b6000610ee782610e89565b9150610ef283610e89565b925082610f0257610f01610f3c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4147455f5354494c4c5f47454e45534953000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f4e4f5f4c4f5244535f415641494c41424c450000000000000000000000000000600082015250565b610fef81610e57565b8114610ffa57600080fd5b50565b61100681610e89565b811461101157600080fd5b5056fea26469706673582212207bf23cbe6cd4362d18a0ea72fab786e61af53b16c7d501ebeae753e012d6ec6064736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6300,
        "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)5246_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(ArmyUnit)5431_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ArmyUnit)5431_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)5341_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)5350_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)5350_storage"
      },
      "t_mapping(t_uint256,t_struct(DefendingArmy)5411_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefendingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(DefendingArmy)5411_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)5353_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)5353_storage"
      },
      "t_mapping(t_uint256,t_struct(Raiding)5373_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raiding)",
        "numberOfBytes": "32",
        "value": "t_struct(Raiding)5373_storage"
      },
      "t_mapping(t_uint256,t_struct(RaidingArmy)5392_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RaidingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(RaidingArmy)5392_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)5312_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)5312_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)5319_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)5319_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)5253_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)5253_storage"
      },
      "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainedArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(TrainedArmyUnit)5416_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)5366_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)5366_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)5362_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)5362_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)5246_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 5184,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)5312_storage)"
          },
          {
            "astId": 5186,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "sRealms",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5188,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "realms",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5190,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "realmsStorage",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5192,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5194,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "resources",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5196,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5198,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "lords",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 5203,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)5353_storage)"
          },
          {
            "astId": 5208,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)5362_storage)"
          },
          {
            "astId": 5213,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)5350_storage)"
          },
          {
            "astId": 5218,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)"
          },
          {
            "astId": 5223,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(TheAges)5253_storage)"
          },
          {
            "astId": 5225,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 5230,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "raiding",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(Raiding)5373_storage)"
          },
          {
            "astId": 5235,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "raidingArmy",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(RaidingArmy)5392_storage)"
          },
          {
            "astId": 5240,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "defendingArmy",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(DefendingArmy)5411_storage)"
          },
          {
            "astId": 5245,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "armyUnit",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(ArmyUnit)5431_storage)"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(ArmyUnit)5431_storage": {
        "encoding": "inplace",
        "label": "struct ArmyUnit",
        "members": [
          {
            "astId": 5418,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5420,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "timeToTrain",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5422,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "offence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5424,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "defence",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5427,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5430,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingCosts)5341_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 5321,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5324,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5327,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5330,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5332,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5334,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5336,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5338,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5340,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)5350_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 5344,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5349,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)5341_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefendingArmy)5411_storage": {
        "encoding": "inplace",
        "label": "struct DefendingArmy",
        "members": [
          {
            "astId": 5394,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "trebuchetsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5396,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "trebuchetsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5398,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "scorpionsTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5400,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "scorpionsSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5405,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "trebuchets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          },
          {
            "astId": 5410,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "scorpions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LevelProduction)5353_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 5352,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Raiding)5373_storage": {
        "encoding": "inplace",
        "label": "struct Raiding",
        "members": [
          {
            "astId": 5368,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "coolDownTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5370,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "totalRaids",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5372,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "successfulRaids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RaidingArmy)5392_storage": {
        "encoding": "inplace",
        "label": "struct RaidingArmy",
        "members": [
          {
            "astId": 5375,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "knightsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5377,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "knightsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5379,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "footSoldiersTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5381,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "footSoldiersSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5386,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "knights",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          },
          {
            "astId": 5391,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "footSoldiers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5416_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RealmInfo)5312_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 5255,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5257,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5259,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5261,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5263,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5266,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5268,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5270,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5272,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5274,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5276,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5278,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5280,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "aquaducts",
            "offset": 6,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5282,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "temples",
            "offset": 7,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5284,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "castles",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5286,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "markets",
            "offset": 9,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5288,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "ports",
            "offset": 10,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5290,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "barracks",
            "offset": 11,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5292,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "farms",
            "offset": 12,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5294,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "shipyard",
            "offset": 13,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5296,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "fishingVillage",
            "offset": 14,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5298,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "realmDefence",
            "offset": 15,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5300,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "realmOffence",
            "offset": 19,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5302,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "realmMagic",
            "offset": 23,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5304,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "foodSupply",
            "offset": 27,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5306,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "population",
            "offset": 0,
            "slot": "7",
            "type": "t_int32"
          },
          {
            "astId": 5311,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)5319_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ResourceInfo)5319_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 5314,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5316,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5318,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)5253_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 5248,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5250,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5252,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TrainedArmyUnit)5416_storage": {
        "encoding": "inplace",
        "label": "struct TrainedArmyUnit",
        "members": [
          {
            "astId": 5413,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "destroyed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5415,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "unitFinished",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UpgradeCostLevels)5366_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 5365,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)5362_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 5356,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5361,
            "contract": "contracts/settling/facets/LordsClaimingFacet.sol:LordsClaimingFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)5366_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}