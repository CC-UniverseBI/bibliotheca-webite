{
  "address": "0x51a0c1AaD11651E107CAC6D28FE43e1C1a97367B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "name": "BuiltUnits",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_quantity",
          "type": "uint32"
        },
        {
          "internalType": "uint256[]",
          "name": "_resourceIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_resourceValues",
          "type": "uint256[]"
        }
      ],
      "name": "buildDefenceArmy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_quantity",
          "type": "uint32"
        },
        {
          "internalType": "uint256[]",
          "name": "_resourceIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_resourceValues",
          "type": "uint256[]"
        }
      ],
      "name": "buildRaidingArmy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDefensiveArmy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRaidingArmy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unitId",
          "type": "uint256"
        }
      ],
      "name": "getUnitCost",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x862a6072c2545b16f7f52dfe1e152fbd02cde9ef687f1912ceb196e2e3afad94",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0x51a0c1AaD11651E107CAC6D28FE43e1C1a97367B",
    "transactionIndex": 0,
    "gasUsed": "353008",
    "logsBloom": "0x
    "blockHash": "0xa7195b5ec1051adc331d4986b185361adb0741da3780f198046c4509a5faa9be",
    "transactionHash": "0x862a6072c2545b16f7f52dfe1e152fbd02cde9ef687f1912ceb196e2e3afad94",
    "logs": [],
    "blockNumber": 6234317,
    "cumulativeGasUsed": "351413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "699e32f8cda4da9a3cbda3693f269e19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"name\":\"BuiltUnits\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_quantity\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_resourceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_resourceValues\",\"type\":\"uint256[]\"}],\"name\":\"buildDefenceArmy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_quantity\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_resourceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_resourceValues\",\"type\":\"uint256[]\"}],\"name\":\"buildRaidingArmy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDefensiveArmy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRaidingArmy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unitId\",\"type\":\"uint256\"}],\"name\":\"getUnitCost\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buildRaidingArmy(uint256,uint32,uint32,uint256[],uint256[])\":{\"params\":{\"_id\":\"Id of Unit\",\"_quantity\":\"Quantity of units to train\",\"_resourceIds\":\"Resources to spend on units\",\"_resourceValues\":\"Resource values to spend\",\"_tokenId\":\"Id of realm\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buildRaidingArmy(uint256,uint32,uint32,uint256[],uint256[])\":{\"notice\":\"Builds Army\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/settling/facets/ArmyTrainingFacet.sol\":\"ArmyTrainingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/settling/facets/ArmyTrainingFacet.sol\":{\"content\":\"// StakingFacet-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"../libraries/ResourceUtils.sol\\\";\\n\\ncontract ArmyTrainingFacet is ResourceUtils {\\n    event BuiltUnits(uint256 tokenId, uint32 id, uint32 quantity);\\n\\n    /**\\n     * @notice Builds Army\\n     * @param _tokenId     Id of realm\\n     * @param _id       Id of Unit\\n     * @param _quantity      Quantity of units to train\\n     * @param _resourceIds  Resources to spend on units\\n     * @param _resourceValues  Resource values to spend\\n     */\\n    function buildRaidingArmy(\\n        uint256 _tokenId,\\n        uint32 _id,\\n        uint32 _quantity,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) external payable checkSRealmOwner(_tokenId) {\\n        require(_id == 0 || _id == 1, \\\"Wrong unit\\\");\\n        RaidingArmy storage raidingArmy = s.raidingArmy[_tokenId];\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        ArmyUnit memory armyUnit = s.armyUnit[_id];\\n\\n        require(_quantity > 0, \\\"MUST TRAIN MORE THAN 1\\\");\\n\\n        for (uint256 i = 0; i < armyUnit.resourceIds.length; i++) {\\n            require(\\n                _resourceIds[i] == armyUnit.resourceIds[i],\\n                \\\"Incorrect resource\\\"\\n            );\\n            require(\\n                _resourceValues[i] * _quantity ==\\n                    armyUnit.resourceValues[i] * _quantity,\\n                \\\"Incorrect resources values\\\"\\n            );\\n        }\\n        // checks castles are available\\n        uint256 totalPossibleUnits = realmInfo.castles *\\n            5 +\\n            realmInfo.barracks *\\n            2;\\n\\n        require(\\n            (raidingArmy.knightsTrained - raidingArmy.knightsSlayed) +\\n                (raidingArmy.footSoldiersTrained -\\n                    raidingArmy.footSoldiersSlayed) +\\n                _quantity <=\\n                totalPossibleUnits,\\n            \\\"NO_SPACE_FOR_UNIT\\\"\\n        );\\n\\n        if (_id == 0) {\\n            raidingArmy.knightsTrained += _quantity;\\n            for (uint256 i = 0; i < _quantity; i++) {\\n                uint256 lastUnitBuiltTime = raidingArmy\\n                    .knights[raidingArmy.knightsTrained]\\n                    .unitFinished > block.timestamp\\n                    ? raidingArmy\\n                        .knights[raidingArmy.knightsTrained]\\n                        .unitFinished\\n                    : block.timestamp;\\n\\n                raidingArmy\\n                    .knights[raidingArmy.knightsTrained + 1]\\n                    .unitFinished = lastUnitBuiltTime + 4 hours;\\n            }\\n        } else if (_id == 1) {\\n            raidingArmy.footSoldiersTrained += _quantity;\\n            for (uint256 i = 0; i < _quantity; i++) {\\n                uint256 lastUnitBuiltTime = raidingArmy\\n                    .footSoldiers[raidingArmy.footSoldiersTrained]\\n                    .unitFinished > block.timestamp\\n                    ? raidingArmy\\n                        .footSoldiers[raidingArmy.footSoldiersTrained]\\n                        .unitFinished\\n                    : block.timestamp;\\n\\n                raidingArmy\\n                    .footSoldiers[raidingArmy.footSoldiersTrained + 1]\\n                    .unitFinished = lastUnitBuiltTime + 2 hours;\\n            }\\n        }\\n\\n        _batchBurnResources(msg.sender, _resourceIds, _resourceValues);\\n        emit BuiltUnits(_tokenId, _id, _quantity);\\n    }\\n\\n    function buildDefenceArmy(\\n        uint256 _tokenId,\\n        uint32 _id,\\n        uint32 _quantity,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) external payable checkSRealmOwner(_tokenId) {\\n        require(_id == 2 || _id == 3, \\\"Wrong unit\\\");\\n\\n        DefendingArmy storage defendingArmy = s.defendingArmy[_tokenId];\\n        RealmInfo storage realmInfo = s.realmInfo[_tokenId];\\n        ArmyUnit memory armyUnit = s.armyUnit[_id];\\n\\n        require(_quantity > 0, \\\"MUST TRAIN MORE THAN 1\\\");\\n\\n        for (uint256 i = 0; i < armyUnit.resourceIds.length; i++) {\\n            require(\\n                _resourceIds[i] == armyUnit.resourceIds[i],\\n                \\\"Incorrect resource\\\"\\n            );\\n            require(\\n                _resourceValues[i] * _quantity ==\\n                    armyUnit.resourceValues[i] * _quantity,\\n                \\\"Incorrect resources values\\\"\\n            );\\n        }\\n        // checks castles are available\\n        uint256 totalPossibleUnits = realmInfo.castles *\\n            5 +\\n            realmInfo.barracks *\\n            2;\\n\\n        require(\\n            (defendingArmy.trebuchetsTrained - defendingArmy.trebuchetsSlayed) +\\n                (defendingArmy.scorpionsTrained -\\n                    defendingArmy.scorpionsSlayed) +\\n                _quantity <=\\n                totalPossibleUnits,\\n            \\\"NO_SPACE_FOR_UNIT\\\"\\n        );\\n\\n        if (_id == 2) {\\n            defendingArmy.trebuchetsTrained += _quantity;\\n            for (uint256 i = 0; i < _quantity; i++) {\\n                uint256 lastUnitBuiltTime = defendingArmy\\n                    .trebuchets[defendingArmy.trebuchetsTrained]\\n                    .unitFinished > block.timestamp\\n                    ? defendingArmy\\n                        .trebuchets[defendingArmy.trebuchetsTrained]\\n                        .unitFinished\\n                    : block.timestamp;\\n\\n                defendingArmy\\n                    .trebuchets[defendingArmy.trebuchetsTrained + 1]\\n                    .unitFinished = lastUnitBuiltTime + 8 hours;\\n            }\\n        } else if (_id == 3) {\\n            defendingArmy.scorpionsTrained += _quantity;\\n            for (uint256 i = 0; i < _quantity; i++) {\\n                uint256 lastUnitBuiltTime = defendingArmy\\n                    .scorpions[defendingArmy.scorpionsTrained]\\n                    .unitFinished > block.timestamp\\n                    ? defendingArmy\\n                        .scorpions[defendingArmy.scorpionsTrained]\\n                        .unitFinished\\n                    : block.timestamp;\\n\\n                defendingArmy\\n                    .scorpions[defendingArmy.scorpionsTrained + 1]\\n                    .unitFinished = lastUnitBuiltTime + 3 hours;\\n            }\\n        }\\n\\n        _batchBurnResources(msg.sender, _resourceIds, _resourceValues);\\n        emit BuiltUnits(_tokenId, _id, _quantity);\\n    }\\n\\n    function getUnitCost(uint256 _unitId)\\n        public\\n        view\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        ArmyUnit memory armyUnit = s.armyUnit[_unitId];\\n\\n        return (armyUnit.resourceIds, armyUnit.resourceValues);\\n    }\\n\\n    function getRaidingArmy(uint256 _tokenId)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        RaidingArmy storage raidingArmy = s.raidingArmy[_tokenId];\\n        DefendingArmy storage defendingArmy = s.defendingArmy[_tokenId];\\n        return (\\n            raidingArmy.knightsTrained - raidingArmy.knightsSlayed,\\n            raidingArmy.knights[raidingArmy.knightsTrained].unitFinished,\\n            raidingArmy.footSoldiersTrained - raidingArmy.footSoldiersSlayed,\\n            raidingArmy\\n                .footSoldiers[raidingArmy.footSoldiersTrained]\\n                .unitFinished,\\n            defendingArmy.trebuchetsTrained - defendingArmy.trebuchetsSlayed,\\n            defendingArmy\\n                .trebuchets[defendingArmy.trebuchetsTrained]\\n                .unitFinished,\\n            defendingArmy.scorpionsTrained - defendingArmy.scorpionsSlayed,\\n            defendingArmy.scorpions[defendingArmy.scorpionsTrained].unitFinished\\n        );\\n    }\\n\\n    function getDefensiveArmy(uint256 _tokenId)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        DefendingArmy storage defendingArmy = s.defendingArmy[_tokenId];\\n\\n        return (\\n            defendingArmy.trebuchetsTrained - defendingArmy.trebuchetsSlayed,\\n            defendingArmy\\n                .trebuchets[defendingArmy.trebuchetsTrained]\\n                .unitFinished,\\n            defendingArmy.scorpionsTrained - defendingArmy.scorpionsSlayed,\\n            defendingArmy.scorpions[defendingArmy.scorpionsTrained].unitFinished\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa17cbfa3ee58238e5ecd3cda578005b7f00606ec6bdc0220cf41bd77c319493d\"},\"contracts/settling/libraries/LibAppStorage.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nstruct AppStorage {\\n    mapping(uint256 => RealmInfo) realmInfo;\\n    address sRealms;\\n    address realms;\\n    address realmsStorage;\\n    address treasury;\\n    address resources;\\n    address oracle;\\n    address lords;\\n    mapping(uint256 => LevelProduction) levelProduction;\\n    mapping(uint256 => UpgradeCosts) upgradeCosts;\\n    mapping(uint256 => BuildingUpgradeCosts) buildingUpgradeCosts;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n    mapping(uint256 => TheAges) theAges;\\n    uint256 genesisTime;\\n    mapping(uint256 => Raiding) raiding;\\n    mapping(uint256 => RaidingArmy) raidingArmy;\\n    mapping(uint256 => DefendingArmy) defendingArmy;\\n    mapping(uint256 => ArmyUnit) armyUnit;\\n}\\n\\nstruct TheAges {\\n    uint256 settledRealms;\\n    uint256 ageStart;\\n    uint256 ageFinish;\\n}\\n\\nstruct RealmInfo {\\n    string name;\\n    uint256 lastUpdateAt;\\n    uint256 vestedTimeUpdatedAt;\\n    uint256 ageSettled;\\n    uint256 ageClaimed;\\n    uint256[] resourceIds;\\n    uint8 cities;\\n    uint8 harbours;\\n    uint8 rivers;\\n    uint8 regions;\\n    uint8 wonders;\\n    uint8 orderOf;\\n    uint8 aquaducts;\\n    uint8 temples;\\n    uint8 castles;\\n    uint8 markets;\\n    uint8 ports;\\n    uint8 barracks;\\n    uint8 farms;\\n    uint8 shipyard;\\n    uint8 fishingVillage;\\n    int32 realmDefence;\\n    int32 realmOffence;\\n    int32 realmMagic;\\n    int32 foodSupply;\\n    int32 population;\\n    mapping(uint256 => ResourceInfo) resourceInfo;\\n}\\n\\nstruct ResourceInfo {\\n    uint8 id;\\n    uint8 level; // level of resource production\\n    uint8 production;\\n}\\n\\nstruct BuildingCosts {\\n    string name;\\n    uint32[] resourceIds;\\n    uint32[] resourceValues;\\n    uint32[] requirements;\\n    int32 defence;\\n    int32 offence;\\n    int32 magic;\\n    int32 population;\\n    int32 food;\\n}\\n\\nstruct BuildingUpgradeCosts {\\n    uint8[] realmBuildings;\\n    mapping(uint256 => BuildingCosts) buildingCosts;\\n}\\n\\nstruct LevelProduction {\\n    uint8 output;\\n}\\nstruct UpgradeCosts {\\n    uint8[] resourceIds;\\n    mapping(uint256 => UpgradeCostLevels) upgradeCostLevels;\\n}\\n\\nstruct UpgradeCostLevels {\\n    uint256[] value;\\n}\\nstruct Raiding {\\n    uint256 coolDownTime;\\n    uint256 totalRaids;\\n    uint256 successfulRaids;\\n}\\n\\nstruct RaidingArmy {\\n    uint32 knightsTrained;\\n    uint32 knightsSlayed;\\n    uint32 footSoldiersTrained;\\n    uint32 footSoldiersSlayed;\\n    mapping(uint256 => TrainedArmyUnit) knights;\\n    mapping(uint256 => TrainedArmyUnit) footSoldiers;\\n}\\n\\nstruct DefendingArmy {\\n    uint32 trebuchetsTrained;\\n    uint32 trebuchetsSlayed;\\n    uint32 scorpionsTrained;\\n    uint32 scorpionsSlayed;\\n    mapping(uint256 => TrainedArmyUnit) trebuchets;\\n    mapping(uint256 => TrainedArmyUnit) scorpions;\\n}\\n\\nstruct TrainedArmyUnit {\\n    bool destroyed;\\n    uint256 unitFinished;\\n}\\n\\nstruct ArmyUnit {\\n    string name;\\n    uint256 timeToTrain;\\n    uint32 offence;\\n    uint32 defence;\\n    uint256[] resourceIds;\\n    uint256[] resourceValues;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xdf4eaff003a64be8c2fe375e99c6b5464c22c235404aaa429c2917a21babbac4\"},\"contracts/settling/libraries/Modifiers.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier checkSRealmOwner(uint256 _tokenId) {\\n        SRealmsToken sRealmstoken = SRealmsToken(s.sRealms);\\n        require(\\n            msg.sender == sRealmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n    modifier checkRealmOwner(uint256 _tokenId) {\\n        RealmsToken realmstoken = RealmsToken(s.realms);\\n        require(\\n            msg.sender == realmstoken.ownerOf(_tokenId),\\n            \\\"You do not own this Realm\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x6a04f22a363dcf5c72fd36e2eb64c03f7bbed1d0d098311e2727c992890b4718\"},\"contracts/settling/libraries/ResourceUtils.sol\":{\"content\":\"import \\\"../../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../../shared/interfaces/SRealmsToken.sol\\\";\\nimport \\\"../libraries/LibAppStorage.sol\\\";\\nimport \\\"../libraries/Modifiers.sol\\\";\\nimport \\\"../../shared/interfaces/ResourcesIERC1155MintBurn.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract ResourceUtils is Modifiers {\\n    function _mintResources(\\n        address _minter,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.resourceMinting(\\n            _minter,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchTransferResources(\\n        address _from,\\n        address _to,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.safeBatchTransferFrom(\\n            _from,\\n            _to,\\n            _resourceIds,\\n            _resourceValues,\\n            \\\"0x\\\"\\n        );\\n    }\\n\\n    function _batchBurnResources(\\n        address _from,\\n        uint256[] memory _resourceIds,\\n        uint256[] memory _resourceValues\\n    ) internal {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        resourceTokens.batchBurnResources(_from, _resourceIds, _resourceValues);\\n    }\\n\\n    function _balanceOf(address _owner, uint256 _resourceId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        ResourcesIERC1155MintBurn resourceTokens = ResourcesIERC1155MintBurn(\\n            s.resources\\n        );\\n        return resourceTokens.balanceOf(_owner, _resourceId);\\n    }\\n\\n    function _blockTimestamp() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp); // truncation is desired\\n    }\\n\\n    function _getHappiness(uint256 _realmId) internal view returns (uint32) {\\n        RealmInfo storage realmInfo = s.realmInfo[_realmId];\\n        int32 food;\\n\\n        if (realmInfo.foodSupply > 0) {\\n            food = ((100 * realmInfo.foodSupply) * 20) / 1000;\\n        } else {\\n            food = 0;\\n        }\\n        int32 happiness = 100 +\\n            ((100 * (realmInfo.population * 4)) / 1000) +\\n            food;\\n\\n        return uint32(happiness);\\n    }\\n\\n    function _returnTime(uint256 _lastUpdate, uint256 _resourcesAvailable)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _lastUpdate + _resourcesAvailable * 1 hours;\\n    }\\n\\n    function _getAvailableResources(uint256 _lastUpdate)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (block.timestamp - _lastUpdate) / 1 hours;\\n    }\\n\\n    function _getAvailableVestedResources(uint256 _vestedTimeUpdatedAt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 vested;\\n        vested = (block.timestamp - _vestedTimeUpdatedAt) / (1 hours);\\n        if (vested > 14) {\\n            return vested;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2513d7443d6775eb99c0277886b78462659f1bb2033253ac1949548adc84407b\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"},\"contracts/shared/interfaces/ResourcesIERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * Recommended interface for public facing minting and burning functions.\\n * These public methods should have restricted access.\\n */\\ninterface ResourcesIERC1155MintBurn is IERC1155 {\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @dev Mint _amount of tokens of a given id if not frozen and if max supply not exceeded\\n     * @param _to     The address to mint tokens to.\\n     * @param _id     Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data   Byte array of data to pass to recipient if it's a contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev Mint tokens for each ids in _ids\\n     * @param _to      The address to mint tokens to.\\n     * @param _ids     Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data    Byte array of data to pass to recipient if it's a contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /***************************************|\\n  |        Public Minting Functions       |\\n  |______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchBurnResources(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x827b22a96beba7f58adf4ea7cdbc774d885adb2cd76831688b78884778f39dc0\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/SRealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface SRealmsToken is IERC721Enumerable {\\n    function changeDiamondAddress(address _newDiamondAddress) external;\\n\\n    function mintFromStakingContract(address to, uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x721727d42568f1b4735d518e01aaa23f2cb6fe590009dcb402a63e9105c034df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124a4806100206000396000f3fe60806040526004361061004a5760003560e01c80634fd062621461004f578063b7283f411461008f578063c19cfd6b146100cd578063cca32e8314610111578063df04ae0c1461012d575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190611ac0565b610149565b6040516100869493929190611e6b565b60405180910390f35b34801561009b57600080fd5b506100b660048036038101906100b19190611ac0565b610258565b6040516100c4929190611d59565b60405180910390f35b3480156100d957600080fd5b506100f460048036038101906100ef9190611ac0565b61042b565b604051610108989796959493929190611eb0565b60405180910390f35b61012b60048036038101906101269190611ae9565b610646565b005b61014760048036038101906101429190611ae9565b610fb5565b005b600080600080600080601001600087815260200190815260200160002090508060000160049054906101000a900463ffffffff168160000160009054906101000a900463ffffffff1661019c919061215c565b8160010160008360000160009054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015482600001600c9054906101000a900463ffffffff168360000160089054906101000a900463ffffffff16610203919061215c565b8360020160008560000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101548363ffffffff1693508163ffffffff1691509450945094509450509193509193565b60608060008060110160008581526020019081526020016000206040518060c001604052908160008201805461028d906121e9565b80601f01602080910402602001604051908101604052809291908181526020018280546102b9906121e9565b80156103065780601f106102db57610100808354040283529160200191610306565b820191906000526020600020905b8154815290600101906020018083116102e957829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156103b457602002820191906000526020600020905b8154815260200190600101908083116103a0575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561040c57602002820191906000526020600020905b8154815260200190600101908083116103f8575b505050505081525050905080608001518160a001519250925050915091565b600080600080600080600080600080600f0160008b8152602001908152602001600020905060008060100160008c815260200190815260200160002090508160000160049054906101000a900463ffffffff168260000160009054906101000a900463ffffffff1661049d919061215c565b8260010160008460000160009054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015483600001600c9054906101000a900463ffffffff168460000160089054906101000a900463ffffffff16610504919061215c565b8460020160008660000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101548460000160049054906101000a900463ffffffff168560000160009054906101000a900463ffffffff1661056b919061215c565b8560010160008760000160009054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015486600001600c9054906101000a900463ffffffff168760000160089054906101000a900463ffffffff166105d2919061215c565b8760020160008960000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101548763ffffffff1697508563ffffffff1695508363ffffffff1693508163ffffffff169150995099509950995099509950995099505050919395975091939597565b8460008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016106a99190611e50565b60206040518083038186803b1580156106c157600080fd5b505afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f99190611a97565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90611db0565b60405180910390fd5b60008663ffffffff161480610781575060018663ffffffff16145b6107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b790611e10565b60405180910390fd5b600080600f016000898152602001908152602001600020905060008060000160008a8152602001908152602001600020905060008060110160008a63ffffffff1681526020019081526020016000206040518060c001604052908160008201805461082a906121e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610856906121e9565b80156108a35780601f10610878576101008083540402835291602001916108a3565b820191906000526020600020905b81548152906001019060200180831161088657829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561095157602002820191906000526020600020905b81548152602001906001019080831161093d575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156109a957602002820191906000526020600020905b815481526020019060010190808311610995575b505050505081525050905060008863ffffffff16116109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490611df0565b60405180910390fd5b60005b816080015151811015610bce5781608001518181518110610a4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151888281518110610a8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca90611dd0565b60405180910390fd5b8863ffffffff168260a001518281518110610b17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610b2991906120c7565b8963ffffffff16888381518110610b69577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610b7b91906120c7565b14610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290611e30565b60405180910390fd5b8080610bc69061224c565b915050610a00565b506000600283600601600b9054906101000a900460ff16610bef9190612121565b60058460060160089054906101000a900460ff16610c0d9190612121565b610c179190612090565b60ff169050808985600001600c9054906101000a900463ffffffff168660000160089054906101000a900463ffffffff16610c52919061215c565b8660000160049054906101000a900463ffffffff168760000160009054906101000a900463ffffffff16610c86919061215c565b610c909190612056565b610c9a9190612056565b63ffffffff161115610ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd890611d90565b60405180910390fd5b60008a63ffffffff161415610e2357888460000160008282829054906101000a900463ffffffff16610d139190612056565b92506101000a81548163ffffffff021916908363ffffffff16021790555060005b8963ffffffff16811015610e1d576000428660010160008860000160009054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015411610d835742610db7565b8560010160008760000160009054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101545b905061384081610dc79190612000565b86600101600060018960000160009054906101000a900463ffffffff16610dee9190612056565b63ffffffff16815260200190815260200160002060010181905550508080610e159061224c565b915050610d34565b50610f62565b60018a63ffffffff161415610f6157888460000160088282829054906101000a900463ffffffff16610e559190612056565b92506101000a81548163ffffffff021916908363ffffffff16021790555060005b8963ffffffff16811015610f5f576000428660020160008860000160089054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015411610ec55742610ef9565b8560020160008760000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101545b9050611c2081610f099190612000565b86600201600060018960000160089054906101000a900463ffffffff16610f309190612056565b63ffffffff16815260200190815260200160002060010181905550508080610f579061224c565b915050610e76565b505b5b610f6d338989611924565b7ff297cff0efcfb1a479905204a023125120e8d59627eae7e22963e3c94d1ff8708b8b8b604051610fa093929190611f2e565b60405180910390a15050505050505050505050565b8460008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016110189190611e50565b60206040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110689190611a97565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cc90611db0565b60405180910390fd5b60028663ffffffff1614806110f0575060038663ffffffff16145b61112f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112690611e10565b60405180910390fd5b6000806010016000898152602001908152602001600020905060008060000160008a8152602001908152602001600020905060008060110160008a63ffffffff1681526020019081526020016000206040518060c0016040529081600082018054611199906121e9565b80601f01602080910402602001604051908101604052809291908181526020018280546111c5906121e9565b80156112125780601f106111e757610100808354040283529160200191611212565b820191906000526020600020905b8154815290600101906020018083116111f557829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156112c057602002820191906000526020600020905b8154815260200190600101908083116112ac575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561131857602002820191906000526020600020905b815481526020019060010190808311611304575b505050505081525050905060008863ffffffff161161136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136390611df0565b60405180910390fd5b60005b81608001515181101561153d57816080015181815181106113b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518882815181106113fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114611442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143990611dd0565b60405180910390fd5b8863ffffffff168260a001518281518110611486577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161149891906120c7565b8963ffffffff168883815181106114d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516114ea91906120c7565b1461152a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152190611e30565b60405180910390fd5b80806115359061224c565b91505061136f565b506000600283600601600b9054906101000a900460ff1661155e9190612121565b60058460060160089054906101000a900460ff1661157c9190612121565b6115869190612090565b60ff169050808985600001600c9054906101000a900463ffffffff168660000160089054906101000a900463ffffffff166115c1919061215c565b8660000160049054906101000a900463ffffffff168760000160009054906101000a900463ffffffff166115f5919061215c565b6115ff9190612056565b6116099190612056565b63ffffffff161115611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164790611d90565b60405180910390fd5b60028a63ffffffff16141561179257888460000160008282829054906101000a900463ffffffff166116829190612056565b92506101000a81548163ffffffff021916908363ffffffff16021790555060005b8963ffffffff1681101561178c576000428660010160008860000160009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002060010154116116f25742611726565b8560010160008760000160009054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101545b9050617080816117369190612000565b86600101600060018960000160009054906101000a900463ffffffff1661175d9190612056565b63ffffffff168152602001908152602001600020600101819055505080806117849061224c565b9150506116a3565b506118d1565b60038a63ffffffff1614156118d057888460000160088282829054906101000a900463ffffffff166117c49190612056565b92506101000a81548163ffffffff021916908363ffffffff16021790555060005b8963ffffffff168110156118ce576000428660020160008860000160089054906101000a900463ffffffff1663ffffffff16815260200190815260200160002060010154116118345742611868565b8560020160008760000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101545b9050612a30816118789190612000565b86600201600060018960000160089054906101000a900463ffffffff1661189f9190612056565b63ffffffff168152602001908152602001600020600101819055505080806118c69061224c565b9150506117e5565b505b5b6118dc338989611924565b7ff297cff0efcfb1a479905204a023125120e8d59627eae7e22963e3c94d1ff8708b8b8b60405161190f93929190611f2e565b60405180910390a15050505050505050505050565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638a5d94468585856040518463ffffffff1660e01b815260040161198a93929190611d14565b600060405180830381600087803b1580156119a457600080fd5b505af11580156119b8573d6000803e3d6000fd5b5050505050505050565b60006119d56119d084611f8a565b611f65565b905080838252602082019050828560208602820111156119f457600080fd5b60005b85811015611a245781611a0a8882611a6d565b8452602084019350602083019250506001810190506119f7565b5050509392505050565b600081519050611a3d81612429565b92915050565b600082601f830112611a5457600080fd5b8135611a648482602086016119c2565b91505092915050565b600081359050611a7c81612440565b92915050565b600081359050611a9181612457565b92915050565b600060208284031215611aa957600080fd5b6000611ab784828501611a2e565b91505092915050565b600060208284031215611ad257600080fd5b6000611ae084828501611a6d565b91505092915050565b600080600080600060a08688031215611b0157600080fd5b6000611b0f88828901611a6d565b9550506020611b2088828901611a82565b9450506040611b3188828901611a82565b935050606086013567ffffffffffffffff811115611b4e57600080fd5b611b5a88828901611a43565b925050608086013567ffffffffffffffff811115611b7757600080fd5b611b8388828901611a43565b9150509295509295909350565b6000611b9c8383611ce7565b60208301905092915050565b611bb181612190565b82525050565b6000611bc282611fc6565b611bcc8185611fde565b9350611bd783611fb6565b8060005b83811015611c08578151611bef8882611b90565b9750611bfa83611fd1565b925050600181019050611bdb565b5085935050505092915050565b6000611c22601183611fef565b9150611c2d82612333565b602082019050919050565b6000611c45601983611fef565b9150611c508261235c565b602082019050919050565b6000611c68601283611fef565b9150611c7382612385565b602082019050919050565b6000611c8b601683611fef565b9150611c96826123ae565b602082019050919050565b6000611cae600a83611fef565b9150611cb9826123d7565b602082019050919050565b6000611cd1601a83611fef565b9150611cdc82612400565b602082019050919050565b611cf0816121c2565b82525050565b611cff816121c2565b82525050565b611d0e816121cc565b82525050565b6000606082019050611d296000830186611ba8565b8181036020830152611d3b8185611bb7565b90508181036040830152611d4f8184611bb7565b9050949350505050565b60006040820190508181036000830152611d738185611bb7565b90508181036020830152611d878184611bb7565b90509392505050565b60006020820190508181036000830152611da981611c15565b9050919050565b60006020820190508181036000830152611dc981611c38565b9050919050565b60006020820190508181036000830152611de981611c5b565b9050919050565b60006020820190508181036000830152611e0981611c7e565b9050919050565b60006020820190508181036000830152611e2981611ca1565b9050919050565b60006020820190508181036000830152611e4981611cc4565b9050919050565b6000602082019050611e656000830184611cf6565b92915050565b6000608082019050611e806000830187611cf6565b611e8d6020830186611cf6565b611e9a6040830185611cf6565b611ea76060830184611cf6565b95945050505050565b600061010082019050611ec6600083018b611cf6565b611ed3602083018a611cf6565b611ee06040830189611cf6565b611eed6060830188611cf6565b611efa6080830187611cf6565b611f0760a0830186611cf6565b611f1460c0830185611cf6565b611f2160e0830184611cf6565b9998505050505050505050565b6000606082019050611f436000830186611cf6565b611f506020830185611d05565b611f5d6040830184611d05565b949350505050565b6000611f6f611f80565b9050611f7b828261221b565b919050565b6000604051905090565b600067ffffffffffffffff821115611fa557611fa46122f3565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061200b826121c2565b9150612016836121c2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561204b5761204a612295565b5b828201905092915050565b6000612061826121cc565b915061206c836121cc565b92508263ffffffff0382111561208557612084612295565b5b828201905092915050565b600061209b826121dc565b91506120a6836121dc565b92508260ff038211156120bc576120bb612295565b5b828201905092915050565b60006120d2826121c2565b91506120dd836121c2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561211657612115612295565b5b828202905092915050565b600061212c826121dc565b9150612137836121dc565b92508160ff048311821515161561215157612150612295565b5b828202905092915050565b6000612167826121cc565b9150612172836121cc565b92508282101561218557612184612295565b5b828203905092915050565b600061219b826121a2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000600282049050600182168061220157607f821691505b60208210811415612215576122146122c4565b5b50919050565b61222482612322565b810181811067ffffffffffffffff82111715612243576122426122f3565b5b80604052505050565b6000612257826121c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561228a57612289612295565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e4f5f53504143455f464f525f554e4954000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f496e636f7272656374207265736f757263650000000000000000000000000000600082015250565b7f4d55535420545241494e204d4f5245205448414e203100000000000000000000600082015250565b7f57726f6e6720756e697400000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f75726365732076616c756573000000000000600082015250565b61243281612190565b811461243d57600080fd5b50565b612449816121c2565b811461245457600080fd5b50565b612460816121cc565b811461246b57600080fd5b5056fea26469706673582212201da3ec688539897a3ca88eea12101f08c167636d387dcfe52de97c2bf640bd2a64736f6c63430008030033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80634fd062621461004f578063b7283f411461008f578063c19cfd6b146100cd578063cca32e8314610111578063df04ae0c1461012d575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190611ac0565b610149565b6040516100869493929190611e6b565b60405180910390f35b34801561009b57600080fd5b506100b660048036038101906100b19190611ac0565b610258565b6040516100c4929190611d59565b60405180910390f35b3480156100d957600080fd5b506100f460048036038101906100ef9190611ac0565b61042b565b604051610108989796959493929190611eb0565b60405180910390f35b61012b60048036038101906101269190611ae9565b610646565b005b61014760048036038101906101429190611ae9565b610fb5565b005b600080600080600080601001600087815260200190815260200160002090508060000160049054906101000a900463ffffffff168160000160009054906101000a900463ffffffff1661019c919061215c565b8160010160008360000160009054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015482600001600c9054906101000a900463ffffffff168360000160089054906101000a900463ffffffff16610203919061215c565b8360020160008560000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101548363ffffffff1693508163ffffffff1691509450945094509450509193509193565b60608060008060110160008581526020019081526020016000206040518060c001604052908160008201805461028d906121e9565b80601f01602080910402602001604051908101604052809291908181526020018280546102b9906121e9565b80156103065780601f106102db57610100808354040283529160200191610306565b820191906000526020600020905b8154815290600101906020018083116102e957829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156103b457602002820191906000526020600020905b8154815260200190600101908083116103a0575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561040c57602002820191906000526020600020905b8154815260200190600101908083116103f8575b505050505081525050905080608001518160a001519250925050915091565b600080600080600080600080600080600f0160008b8152602001908152602001600020905060008060100160008c815260200190815260200160002090508160000160049054906101000a900463ffffffff168260000160009054906101000a900463ffffffff1661049d919061215c565b8260010160008460000160009054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015483600001600c9054906101000a900463ffffffff168460000160089054906101000a900463ffffffff16610504919061215c565b8460020160008660000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101548460000160049054906101000a900463ffffffff168560000160009054906101000a900463ffffffff1661056b919061215c565b8560010160008760000160009054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015486600001600c9054906101000a900463ffffffff168760000160089054906101000a900463ffffffff166105d2919061215c565b8760020160008960000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101548763ffffffff1697508563ffffffff1695508363ffffffff1693508163ffffffff169150995099509950995099509950995099505050919395975091939597565b8460008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016106a99190611e50565b60206040518083038186803b1580156106c157600080fd5b505afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f99190611a97565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90611db0565b60405180910390fd5b60008663ffffffff161480610781575060018663ffffffff16145b6107c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b790611e10565b60405180910390fd5b600080600f016000898152602001908152602001600020905060008060000160008a8152602001908152602001600020905060008060110160008a63ffffffff1681526020019081526020016000206040518060c001604052908160008201805461082a906121e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610856906121e9565b80156108a35780601f10610878576101008083540402835291602001916108a3565b820191906000526020600020905b81548152906001019060200180831161088657829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561095157602002820191906000526020600020905b81548152602001906001019080831161093d575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156109a957602002820191906000526020600020905b815481526020019060010190808311610995575b505050505081525050905060008863ffffffff16116109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f490611df0565b60405180910390fd5b60005b816080015151811015610bce5781608001518181518110610a4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151888281518110610a8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca90611dd0565b60405180910390fd5b8863ffffffff168260a001518281518110610b17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610b2991906120c7565b8963ffffffff16888381518110610b69577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610b7b91906120c7565b14610bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb290611e30565b60405180910390fd5b8080610bc69061224c565b915050610a00565b506000600283600601600b9054906101000a900460ff16610bef9190612121565b60058460060160089054906101000a900460ff16610c0d9190612121565b610c179190612090565b60ff169050808985600001600c9054906101000a900463ffffffff168660000160089054906101000a900463ffffffff16610c52919061215c565b8660000160049054906101000a900463ffffffff168760000160009054906101000a900463ffffffff16610c86919061215c565b610c909190612056565b610c9a9190612056565b63ffffffff161115610ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd890611d90565b60405180910390fd5b60008a63ffffffff161415610e2357888460000160008282829054906101000a900463ffffffff16610d139190612056565b92506101000a81548163ffffffff021916908363ffffffff16021790555060005b8963ffffffff16811015610e1d576000428660010160008860000160009054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015411610d835742610db7565b8560010160008760000160009054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101545b905061384081610dc79190612000565b86600101600060018960000160009054906101000a900463ffffffff16610dee9190612056565b63ffffffff16815260200190815260200160002060010181905550508080610e159061224c565b915050610d34565b50610f62565b60018a63ffffffff161415610f6157888460000160088282829054906101000a900463ffffffff16610e559190612056565b92506101000a81548163ffffffff021916908363ffffffff16021790555060005b8963ffffffff16811015610f5f576000428660020160008860000160089054906101000a900463ffffffff1663ffffffff1681526020019081526020016000206001015411610ec55742610ef9565b8560020160008760000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101545b9050611c2081610f099190612000565b86600201600060018960000160089054906101000a900463ffffffff16610f309190612056565b63ffffffff16815260200190815260200160002060010181905550508080610f579061224c565b915050610e76565b505b5b610f6d338989611924565b7ff297cff0efcfb1a479905204a023125120e8d59627eae7e22963e3c94d1ff8708b8b8b604051610fa093929190611f2e565b60405180910390a15050505050505050505050565b8460008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016110189190611e50565b60206040518083038186803b15801561103057600080fd5b505afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110689190611a97565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cc90611db0565b60405180910390fd5b60028663ffffffff1614806110f0575060038663ffffffff16145b61112f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112690611e10565b60405180910390fd5b6000806010016000898152602001908152602001600020905060008060000160008a8152602001908152602001600020905060008060110160008a63ffffffff1681526020019081526020016000206040518060c0016040529081600082018054611199906121e9565b80601f01602080910402602001604051908101604052809291908181526020018280546111c5906121e9565b80156112125780601f106111e757610100808354040283529160200191611212565b820191906000526020600020905b8154815290600101906020018083116111f557829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156112c057602002820191906000526020600020905b8154815260200190600101908083116112ac575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561131857602002820191906000526020600020905b815481526020019060010190808311611304575b505050505081525050905060008863ffffffff161161136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136390611df0565b60405180910390fd5b60005b81608001515181101561153d57816080015181815181106113b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518882815181106113fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114611442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143990611dd0565b60405180910390fd5b8863ffffffff168260a001518281518110611486577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161149891906120c7565b8963ffffffff168883815181106114d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516114ea91906120c7565b1461152a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152190611e30565b60405180910390fd5b80806115359061224c565b91505061136f565b506000600283600601600b9054906101000a900460ff1661155e9190612121565b60058460060160089054906101000a900460ff1661157c9190612121565b6115869190612090565b60ff169050808985600001600c9054906101000a900463ffffffff168660000160089054906101000a900463ffffffff166115c1919061215c565b8660000160049054906101000a900463ffffffff168760000160009054906101000a900463ffffffff166115f5919061215c565b6115ff9190612056565b6116099190612056565b63ffffffff161115611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164790611d90565b60405180910390fd5b60028a63ffffffff16141561179257888460000160008282829054906101000a900463ffffffff166116829190612056565b92506101000a81548163ffffffff021916908363ffffffff16021790555060005b8963ffffffff1681101561178c576000428660010160008860000160009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002060010154116116f25742611726565b8560010160008760000160009054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101545b9050617080816117369190612000565b86600101600060018960000160009054906101000a900463ffffffff1661175d9190612056565b63ffffffff168152602001908152602001600020600101819055505080806117849061224c565b9150506116a3565b506118d1565b60038a63ffffffff1614156118d057888460000160088282829054906101000a900463ffffffff166117c49190612056565b92506101000a81548163ffffffff021916908363ffffffff16021790555060005b8963ffffffff168110156118ce576000428660020160008860000160089054906101000a900463ffffffff1663ffffffff16815260200190815260200160002060010154116118345742611868565b8560020160008760000160089054906101000a900463ffffffff1663ffffffff168152602001908152602001600020600101545b9050612a30816118789190612000565b86600201600060018960000160089054906101000a900463ffffffff1661189f9190612056565b63ffffffff168152602001908152602001600020600101819055505080806118c69061224c565b9150506117e5565b505b5b6118dc338989611924565b7ff297cff0efcfb1a479905204a023125120e8d59627eae7e22963e3c94d1ff8708b8b8b60405161190f93929190611f2e565b60405180910390a15050505050505050505050565b60008060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638a5d94468585856040518463ffffffff1660e01b815260040161198a93929190611d14565b600060405180830381600087803b1580156119a457600080fd5b505af11580156119b8573d6000803e3d6000fd5b5050505050505050565b60006119d56119d084611f8a565b611f65565b905080838252602082019050828560208602820111156119f457600080fd5b60005b85811015611a245781611a0a8882611a6d565b8452602084019350602083019250506001810190506119f7565b5050509392505050565b600081519050611a3d81612429565b92915050565b600082601f830112611a5457600080fd5b8135611a648482602086016119c2565b91505092915050565b600081359050611a7c81612440565b92915050565b600081359050611a9181612457565b92915050565b600060208284031215611aa957600080fd5b6000611ab784828501611a2e565b91505092915050565b600060208284031215611ad257600080fd5b6000611ae084828501611a6d565b91505092915050565b600080600080600060a08688031215611b0157600080fd5b6000611b0f88828901611a6d565b9550506020611b2088828901611a82565b9450506040611b3188828901611a82565b935050606086013567ffffffffffffffff811115611b4e57600080fd5b611b5a88828901611a43565b925050608086013567ffffffffffffffff811115611b7757600080fd5b611b8388828901611a43565b9150509295509295909350565b6000611b9c8383611ce7565b60208301905092915050565b611bb181612190565b82525050565b6000611bc282611fc6565b611bcc8185611fde565b9350611bd783611fb6565b8060005b83811015611c08578151611bef8882611b90565b9750611bfa83611fd1565b925050600181019050611bdb565b5085935050505092915050565b6000611c22601183611fef565b9150611c2d82612333565b602082019050919050565b6000611c45601983611fef565b9150611c508261235c565b602082019050919050565b6000611c68601283611fef565b9150611c7382612385565b602082019050919050565b6000611c8b601683611fef565b9150611c96826123ae565b602082019050919050565b6000611cae600a83611fef565b9150611cb9826123d7565b602082019050919050565b6000611cd1601a83611fef565b9150611cdc82612400565b602082019050919050565b611cf0816121c2565b82525050565b611cff816121c2565b82525050565b611d0e816121cc565b82525050565b6000606082019050611d296000830186611ba8565b8181036020830152611d3b8185611bb7565b90508181036040830152611d4f8184611bb7565b9050949350505050565b60006040820190508181036000830152611d738185611bb7565b90508181036020830152611d878184611bb7565b90509392505050565b60006020820190508181036000830152611da981611c15565b9050919050565b60006020820190508181036000830152611dc981611c38565b9050919050565b60006020820190508181036000830152611de981611c5b565b9050919050565b60006020820190508181036000830152611e0981611c7e565b9050919050565b60006020820190508181036000830152611e2981611ca1565b9050919050565b60006020820190508181036000830152611e4981611cc4565b9050919050565b6000602082019050611e656000830184611cf6565b92915050565b6000608082019050611e806000830187611cf6565b611e8d6020830186611cf6565b611e9a6040830185611cf6565b611ea76060830184611cf6565b95945050505050565b600061010082019050611ec6600083018b611cf6565b611ed3602083018a611cf6565b611ee06040830189611cf6565b611eed6060830188611cf6565b611efa6080830187611cf6565b611f0760a0830186611cf6565b611f1460c0830185611cf6565b611f2160e0830184611cf6565b9998505050505050505050565b6000606082019050611f436000830186611cf6565b611f506020830185611d05565b611f5d6040830184611d05565b949350505050565b6000611f6f611f80565b9050611f7b828261221b565b919050565b6000604051905090565b600067ffffffffffffffff821115611fa557611fa46122f3565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061200b826121c2565b9150612016836121c2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561204b5761204a612295565b5b828201905092915050565b6000612061826121cc565b915061206c836121cc565b92508263ffffffff0382111561208557612084612295565b5b828201905092915050565b600061209b826121dc565b91506120a6836121dc565b92508260ff038211156120bc576120bb612295565b5b828201905092915050565b60006120d2826121c2565b91506120dd836121c2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561211657612115612295565b5b828202905092915050565b600061212c826121dc565b9150612137836121dc565b92508160ff048311821515161561215157612150612295565b5b828202905092915050565b6000612167826121cc565b9150612172836121cc565b92508282101561218557612184612295565b5b828203905092915050565b600061219b826121a2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000600282049050600182168061220157607f821691505b60208210811415612215576122146122c4565b5b50919050565b61222482612322565b810181811067ffffffffffffffff82111715612243576122426122f3565b5b80604052505050565b6000612257826121c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561228a57612289612295565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e4f5f53504143455f464f525f554e4954000000000000000000000000000000600082015250565b7f596f7520646f206e6f74206f776e2074686973205265616c6d00000000000000600082015250565b7f496e636f7272656374207265736f757263650000000000000000000000000000600082015250565b7f4d55535420545241494e204d4f5245205448414e203100000000000000000000600082015250565b7f57726f6e6720756e697400000000000000000000000000000000000000000000600082015250565b7f496e636f7272656374207265736f75726365732076616c756573000000000000600082015250565b61243281612190565b811461243d57600080fd5b50565b612449816121c2565b811461245457600080fd5b50565b612460816121cc565b811461246b57600080fd5b5056fea26469706673582212201da3ec688539897a3ca88eea12101f08c167636d387dcfe52de97c2bf640bd2a64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buildRaidingArmy(uint256,uint32,uint32,uint256[],uint256[])": {
        "params": {
          "_id": "Id of Unit",
          "_quantity": "Quantity of units to train",
          "_resourceIds": "Resources to spend on units",
          "_resourceValues": "Resource values to spend",
          "_tokenId": "Id of realm"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buildRaidingArmy(uint256,uint32,uint32,uint256[],uint256[])": {
        "notice": "Builds Army"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6297,
        "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)5243_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_uint256,t_struct(ArmyUnit)5428_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ArmyUnit)5428_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingCosts)5338_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingCosts)5338_storage"
      },
      "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)5347_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BuildingUpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(BuildingUpgradeCosts)5347_storage"
      },
      "t_mapping(t_uint256,t_struct(DefendingArmy)5408_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefendingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(DefendingArmy)5408_storage"
      },
      "t_mapping(t_uint256,t_struct(LevelProduction)5350_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LevelProduction)",
        "numberOfBytes": "32",
        "value": "t_struct(LevelProduction)5350_storage"
      },
      "t_mapping(t_uint256,t_struct(Raiding)5370_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raiding)",
        "numberOfBytes": "32",
        "value": "t_struct(Raiding)5370_storage"
      },
      "t_mapping(t_uint256,t_struct(RaidingArmy)5389_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RaidingArmy)",
        "numberOfBytes": "32",
        "value": "t_struct(RaidingArmy)5389_storage"
      },
      "t_mapping(t_uint256,t_struct(RealmInfo)5309_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealmInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RealmInfo)5309_storage"
      },
      "t_mapping(t_uint256,t_struct(ResourceInfo)5316_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResourceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceInfo)5316_storage"
      },
      "t_mapping(t_uint256,t_struct(TheAges)5250_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheAges)",
        "numberOfBytes": "32",
        "value": "t_struct(TheAges)5250_storage"
      },
      "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5413_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainedArmyUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(TrainedArmyUnit)5413_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCostLevels)5363_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCostLevels)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCostLevels)5363_storage"
      },
      "t_mapping(t_uint256,t_struct(UpgradeCosts)5359_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UpgradeCosts)",
        "numberOfBytes": "32",
        "value": "t_struct(UpgradeCosts)5359_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)5243_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 5181,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "realmInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(RealmInfo)5309_storage)"
          },
          {
            "astId": 5183,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "sRealms",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5185,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "realms",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5187,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "realmsStorage",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5189,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "treasury",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5191,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "resources",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5193,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "oracle",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5195,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "lords",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 5200,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "levelProduction",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(LevelProduction)5350_storage)"
          },
          {
            "astId": 5205,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "upgradeCosts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCosts)5359_storage)"
          },
          {
            "astId": 5210,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "buildingUpgradeCosts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(BuildingUpgradeCosts)5347_storage)"
          },
          {
            "astId": 5215,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)5338_storage)"
          },
          {
            "astId": 5220,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "theAges",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(TheAges)5250_storage)"
          },
          {
            "astId": 5222,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "genesisTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 5227,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "raiding",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(Raiding)5370_storage)"
          },
          {
            "astId": 5232,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "raidingArmy",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(RaidingArmy)5389_storage)"
          },
          {
            "astId": 5237,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "defendingArmy",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(DefendingArmy)5408_storage)"
          },
          {
            "astId": 5242,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "armyUnit",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(ArmyUnit)5428_storage)"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(ArmyUnit)5428_storage": {
        "encoding": "inplace",
        "label": "struct ArmyUnit",
        "members": [
          {
            "astId": 5415,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5417,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "timeToTrain",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5419,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "offence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5421,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "defence",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5424,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5427,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingCosts)5338_storage": {
        "encoding": "inplace",
        "label": "struct BuildingCosts",
        "members": [
          {
            "astId": 5318,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5321,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5324,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "resourceValues",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5327,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "requirements",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 5329,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "defence",
            "offset": 0,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5331,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "offence",
            "offset": 4,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5333,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "magic",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5335,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "population",
            "offset": 12,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 5337,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "food",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(BuildingUpgradeCosts)5347_storage": {
        "encoding": "inplace",
        "label": "struct BuildingUpgradeCosts",
        "members": [
          {
            "astId": 5341,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "realmBuildings",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5346,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "buildingCosts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(BuildingCosts)5338_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DefendingArmy)5408_storage": {
        "encoding": "inplace",
        "label": "struct DefendingArmy",
        "members": [
          {
            "astId": 5391,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "trebuchetsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5393,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "trebuchetsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5395,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "scorpionsTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5397,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "scorpionsSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5402,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "trebuchets",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5413_storage)"
          },
          {
            "astId": 5407,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "scorpions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5413_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LevelProduction)5350_storage": {
        "encoding": "inplace",
        "label": "struct LevelProduction",
        "members": [
          {
            "astId": 5349,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "output",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Raiding)5370_storage": {
        "encoding": "inplace",
        "label": "struct Raiding",
        "members": [
          {
            "astId": 5365,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "coolDownTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5367,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "totalRaids",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5369,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "successfulRaids",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RaidingArmy)5389_storage": {
        "encoding": "inplace",
        "label": "struct RaidingArmy",
        "members": [
          {
            "astId": 5372,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "knightsTrained",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5374,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "knightsSlayed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5376,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "footSoldiersTrained",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5378,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "footSoldiersSlayed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5383,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "knights",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5413_storage)"
          },
          {
            "astId": 5388,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "footSoldiers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(TrainedArmyUnit)5413_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RealmInfo)5309_storage": {
        "encoding": "inplace",
        "label": "struct RealmInfo",
        "members": [
          {
            "astId": 5252,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5254,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "lastUpdateAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5256,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "vestedTimeUpdatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5258,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "ageSettled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5260,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "ageClaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5263,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5265,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "cities",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5267,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "harbours",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5269,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "rivers",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5271,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "regions",
            "offset": 3,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5273,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "wonders",
            "offset": 4,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5275,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "orderOf",
            "offset": 5,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5277,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "aquaducts",
            "offset": 6,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5279,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "temples",
            "offset": 7,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5281,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "castles",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5283,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "markets",
            "offset": 9,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5285,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "ports",
            "offset": 10,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5287,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "barracks",
            "offset": 11,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5289,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "farms",
            "offset": 12,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5291,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "shipyard",
            "offset": 13,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5293,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "fishingVillage",
            "offset": 14,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 5295,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "realmDefence",
            "offset": 15,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5297,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "realmOffence",
            "offset": 19,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5299,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "realmMagic",
            "offset": 23,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5301,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "foodSupply",
            "offset": 27,
            "slot": "6",
            "type": "t_int32"
          },
          {
            "astId": 5303,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "population",
            "offset": 0,
            "slot": "7",
            "type": "t_int32"
          },
          {
            "astId": 5308,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "resourceInfo",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(ResourceInfo)5316_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ResourceInfo)5316_storage": {
        "encoding": "inplace",
        "label": "struct ResourceInfo",
        "members": [
          {
            "astId": 5311,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5313,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "level",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 5315,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "production",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TheAges)5250_storage": {
        "encoding": "inplace",
        "label": "struct TheAges",
        "members": [
          {
            "astId": 5245,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "settledRealms",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5247,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "ageStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5249,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "ageFinish",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TrainedArmyUnit)5413_storage": {
        "encoding": "inplace",
        "label": "struct TrainedArmyUnit",
        "members": [
          {
            "astId": 5410,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "destroyed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5412,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "unitFinished",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UpgradeCostLevels)5363_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCostLevels",
        "members": [
          {
            "astId": 5362,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UpgradeCosts)5359_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeCosts",
        "members": [
          {
            "astId": 5353,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "resourceIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)dyn_storage"
          },
          {
            "astId": 5358,
            "contract": "contracts/settling/facets/ArmyTrainingFacet.sol:ArmyTrainingFacet",
            "label": "upgradeCostLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(UpgradeCostLevels)5363_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}