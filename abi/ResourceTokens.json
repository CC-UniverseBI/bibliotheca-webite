{
  "address": "0x1BeB505670cF846af44Fae915e8b218eDff2E16D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_diamond",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tax",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADAMANTINE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALCHEMICAL_SILVER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLD_IRON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COPPER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEEP_CRYSTAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DIAMONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DRAGONHIDE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETHEREAL_SILICA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HARTWOOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IGNIUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IRONWOOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MITHRAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OBSIDIAN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RUBY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SAPPHIRE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILVER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRUE_ICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWILIGHT_QUARTZ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WOOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnResources",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "batchResourceMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDiamond",
          "type": "address"
        }
      ],
      "name": "changeDiamondAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTax",
          "type": "uint256"
        }
      ],
      "name": "changeTax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "changeTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "daoMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "diamond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getIDBinIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_binValues",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getValueInBin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "resourceMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa14bc7077bc94e2bb0ac5163a4b9cfc373f2873e529e5db3e86e1d8fad36410d",
  "receipt": {
    "to": null,
    "from": "0xF3a8b033c2572A2887c507aa92eD134B29620245",
    "contractAddress": "0x1BeB505670cF846af44Fae915e8b218eDff2E16D",
    "transactionIndex": 0,
    "gasUsed": "146524176",
    "logsBloom": "0x
    "blockHash": "0xf6a4426f6530d2fbc1cd38e7c91fd8970279e609d8eb1628d1948f1f2b6f4a60",
    "transactionHash": "0xa14bc7077bc94e2bb0ac5163a4b9cfc373f2873e529e5db3e86e1d8fad36410d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5983012,
        "transactionHash": "0xa14bc7077bc94e2bb0ac5163a4b9cfc373f2873e529e5db3e86e1d8fad36410d",
        "address": "0x1BeB505670cF846af44Fae915e8b218eDff2E16D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f3a8b033c2572a2887c507aa92ed134b29620245"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf6a4426f6530d2fbc1cd38e7c91fd8970279e609d8eb1628d1948f1f2b6f4a60"
      }
    ],
    "blockNumber": 5983012,
    "cumulativeGasUsed": "114569816",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE417496166b097A05e1B0A4117C8Ad1d204aDb91",
    "0xFBe0421c53706746151ACa2Cf22F81Dc41262519",
    90
  ],
  "solcInputHash": "50298fead88d2dd6e8719fbfc1938b88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADAMANTINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALCHEMICAL_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLD_IRON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COPPER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEEP_CRYSTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIAMONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRAGONHIDE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHEREAL_SILICA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARTWOOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IGNIUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IRONWOOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MITHRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OBSIDIAN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RUBY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAPPHIRE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUE_ICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWILIGHT_QUARTZ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WOOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnResources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchResourceMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDiamond\",\"type\":\"address\"}],\"name\":\"changeDiamondAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"changeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"changeTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"daoMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getIDBinIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_binValues\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getValueInBin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"resourceMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_id\":\"ID of the Token\",\"_owner\":\"The address of the token holder\"},\"returns\":{\"_0\":\"The _owner's balance of the Token type requested\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"_ids\":\"ID of the Tokens (sorted ids will lead to less gas usage\",\"_owners\":\"The addresses of the token holders (sorted owners will lead to less gas usage)\"},\"returns\":{\"_0\":\"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\"}},\"getIDBinIndex(uint256)\":{\"params\":{\"_id\":\"Token id\"},\"returns\":{\"bin\":\"index (Bin number, ID\\\"s index within that bin)\"}},\"getValueInBin(uint256,uint256)\":{\"params\":{\"_binValues\":\"uint256 containing the balances of IDS_PER_UINT256 ids\",\"_index\":\"Index at which to retrieve amount\"},\"returns\":{\"_0\":\"amount at given _index in _bin\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"Address of authorized operator\",\"_owner\":\"The owner of the Tokens\"},\"returns\":{\"isOperator\":\"True if the operator is approved, false if not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Arrays should be sorted so that all ids in a same storage slot are adjacent (more efficient)\",\"params\":{\"_amounts\":\"Transfer amounts per token type\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source addresses\",\"_ids\":\"IDs of each token type\",\"_to\":\"Target addresses\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"_amount\":\"Transfered amount\",\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"Source address\",\"_id\":\"ID of the token type\",\"_to\":\"Target address\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `_interfaceID` and\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of multiple account/token pairs\"},\"getIDBinIndex(uint256)\":{\"notice\":\"Return the bin number and index within that bin where ID is\"},\"getValueInBin(uint256,uint256)\":{\"notice\":\"Return amount in _binValues at position _index\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Send multiple types of Tokens from the _from address to the _to address (with safety call)\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers amount amount of an _id from the _from address to the _to address specified\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/ResourceTokens.sol\":\"ResourceTokens\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\ninterface IERC1155 {\\n    /****************************************|\\n  |                 Events                 |\\n  |_______________________________________*/\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /****************************************|\\n  |                Functions               |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\",\"keccak256\":\"0xa71395b6df4a2d78d7d9a4e42e9411e44f1933f2190ebb59e93d46957cca1622\",\"license\":\"Apache-2.0\"},\"contracts/shared/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n     * This function MAY throw to revert and reject the transfer\\n     * Return of other amount than the magic value MUST result in the transaction being reverted\\n     * Note: The token contract address is always the message sender\\n     * @param _operator  The address which called the `safeTransferFrom` function\\n     * @param _from      The address which previously owned the token\\n     * @param _id        The id of the token being transferred\\n     * @param _amount    The amount of tokens being transferred\\n     * @param _data      Additional data with no specified format\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n     * This function MAY throw to revert and reject the transfer\\n     * Return of other amount than the magic value WILL result in the transaction being reverted\\n     * Note: The token contract address is always the message sender\\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\\n     * @param _from      The address which previously owned the token\\n     * @param _ids       An array containing ids of each token being transferred\\n     * @param _amounts   An array containing amounts of each token being transferred\\n     * @param _data      Additional data with no specified format\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd8ae159a68d5f3570b31a2459b99e6c4c6148f72750502429a88e9911a8bf9c2\",\"license\":\"Apache-2.0\"},\"contracts/shared/utils/Address.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n    // Default hash for EOA accounts returned by extcodehash\\n    bytes32 internal constant ACCOUNT_HASH =\\n        0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract.\\n     * @param _address address of the account to check\\n     * @return Whether the target address is a contract\\n     */\\n    function isContract(address _address) internal view returns (bool) {\\n        bytes32 codehash;\\n\\n        // Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address or if it has a non-zero code hash or account hash\\n        assembly {\\n            codehash := extcodehash(_address)\\n        }\\n        return (codehash != 0x0 && codehash != ACCOUNT_HASH);\\n    }\\n}\\n\",\"keccak256\":\"0xee879d7da9e5487136e6eca6332607c0405d460ddcd9c6200c92b05c0a86882d\"},\"contracts/shared/utils/ERC165.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\nabstract contract ERC165 {\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param _interfaceID The interface identifier, as specified in ERC-165\\n     * @return `true` if the contract implements `_interfaceID`\\n     */\\n    function supportsInterface(bytes4 _interfaceID)\\n        public\\n        pure\\n        virtual\\n        returns (bool)\\n    {\\n        return _interfaceID == this.supportsInterface.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xf36237a2f6b44c9c78056294508588c42a68985ba15f7b0e5cacb73aa539fb08\"},\"contracts/shared/utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.2;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath#mul: OVERFLOW\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath#div: DIVISION_BY_ZERO\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath#sub: UNDERFLOW\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two unsigned integers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath#add: OVERFLOW\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n     * reverts when dividing by zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath#mod: DIVISION_BY_ZERO\\\");\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xb15e26776518a5c6418d1b662601165f4015bda85c93c9840f72ecf97caee71a\"},\"contracts/tokens/ERC1155PackedBalance/ERC1155MintBurnPackedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ERC1155PackedBalance.sol\\\";\\n\\n/**\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\n *      a parent contract to be executed as they are `internal` functions.\\n */\\ncontract ERC1155MintBurnPackedBalance is ERC1155PackedBalance {\\n    /****************************************|\\n  |            Minting Functions           |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Mint _amount of tokens of a given id\\n     * @param _to      The address to mint tokens to\\n     * @param _id      Token id to mint\\n     * @param _amount  The amount to be minted\\n     * @param _data    Data to pass if receiver is contract\\n     */\\n    function _mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) internal {\\n        //Add _amount\\n        _updateIDBalance(_to, _id, _amount, Operations.Add); // Add amount to recipient\\n\\n        // Emit event\\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\n\\n        // Calling onReceive method if recipient is contract\\n        _callonERC1155Received(\\n            address(0x0),\\n            _to,\\n            _id,\\n            _amount,\\n            gasleft(),\\n            _data\\n        );\\n    }\\n\\n    /**\\n     * @notice Mint tokens for each (_ids[i], _amounts[i]) pair\\n     * @param _to       The address to mint tokens to\\n     * @param _ids      Array of ids to mint\\n     * @param _amounts  Array of amount of tokens to mint per id\\n     * @param _data    Data to pass if receiver is contract\\n     */\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        require(\\n            _ids.length == _amounts.length,\\n            \\\"ERC1155MintBurnPackedBalance#_batchMint: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n\\n        if (_ids.length > 0) {\\n            // Load first bin and index where the token ID balance exists\\n            (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\\n\\n            // Balance for current bin in memory (initialized with first transfer)\\n            uint256 balTo = _viewUpdateBinValue(\\n                balances[_to][bin],\\n                index,\\n                _amounts[0],\\n                Operations.Add\\n            );\\n\\n            // Number of transfer to execute\\n            uint256 nTransfer = _ids.length;\\n\\n            // Last bin updated\\n            uint256 lastBin = bin;\\n\\n            for (uint256 i = 1; i < nTransfer; i++) {\\n                (bin, index) = getIDBinIndex(_ids[i]);\\n\\n                // If new bin\\n                if (bin != lastBin) {\\n                    // Update storage balance of previous bin\\n                    balances[_to][lastBin] = balTo;\\n                    balTo = balances[_to][bin];\\n\\n                    // Bin will be the most recent bin\\n                    lastBin = bin;\\n                }\\n\\n                // Update memory balance\\n                balTo = _viewUpdateBinValue(\\n                    balTo,\\n                    index,\\n                    _amounts[i],\\n                    Operations.Add\\n                );\\n            }\\n\\n            // Update storage of the last bin visited\\n            balances[_to][bin] = balTo;\\n        }\\n\\n        // //Emit event\\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\n\\n        // Calling onReceive method if recipient is contract\\n        _callonERC1155BatchReceived(\\n            address(0x0),\\n            _to,\\n            _ids,\\n            _amounts,\\n            gasleft(),\\n            _data\\n        );\\n    }\\n\\n    /****************************************|\\n  |            Burning Functions           |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function _burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) internal {\\n        // Substract _amount\\n        _updateIDBalance(_from, _id, _amount, Operations.Sub);\\n\\n        // Emit event\\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @dev This batchBurn method does not implement the most efficient way of updating\\n     *      balances to reduce the potential bug surface as this function is expected to\\n     *      be less common than transfers. EIP-2200 makes this method significantly\\n     *      more efficient already for packed balances.\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function _batchBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) internal {\\n        // Number of burning to execute\\n        uint256 nBurn = _ids.length;\\n        require(\\n            nBurn == _amounts.length,\\n            \\\"ERC1155MintBurnPackedBalance#batchBurn: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n\\n        // Executing all burning\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            // Update storage balance\\n            _updateIDBalance(_from, _ids[i], _amounts[i], Operations.Sub); // Add amount to recipient\\n        }\\n\\n        // Emit batch burn event\\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\n    }\\n}\\n\",\"keccak256\":\"0xc4be3f64d0bcdd9aaecf2199aa46bc34ac57498ab043dd7c749464a3d1c4f9c0\",\"license\":\"Apache-2.0\"},\"contracts/tokens/ERC1155PackedBalance/ERC1155PackedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../shared/utils/SafeMath.sol\\\";\\nimport \\\"../../shared/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"../../shared/interfaces/IERC1155.sol\\\";\\nimport \\\"../../shared/utils/Address.sol\\\";\\nimport \\\"../../shared/utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of Multi-Token Standard contract. This implementation of the ERC-1155 standard\\n *      utilizes the fact that balances of different token ids can be concatenated within individual\\n *      uint256 storage slots. This allows the contract to batch transfer tokens more efficiently at\\n *      the cost of limiting the maximum token balance each address can hold. This limit is\\n *      2^IDS_BITS_SIZE, which can be adjusted below. In practice, using IDS_BITS_SIZE smaller than 16\\n *      did not lead to major efficiency gains.\\n */\\ncontract ERC1155PackedBalance is IERC1155, ERC165 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    /***********************************|\\n  |        Variables and Events       |\\n  |__________________________________*/\\n\\n    // onReceive function signatures\\n    bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n    // Constants regarding bin sizes for balance packing\\n    // IDS_BITS_SIZE **MUST** be a power of 2 (e.g. 2, 4, 8, 16, 32, 64, 128)\\n    uint256 internal constant IDS_BITS_SIZE = 64; // Max balance amount in bits per token ID\\n    uint256 internal constant IDS_PER_UINT256 = 256 / IDS_BITS_SIZE; // Number of ids per uint256\\n\\n    // Operations for _updateIDBalance\\n    enum Operations {\\n        Add,\\n        Sub\\n    }\\n\\n    // Token IDs balances ; balances[address][id] => balance (using array instead of mapping for efficiency)\\n    mapping(address => mapping(uint256 => uint256)) internal balances;\\n\\n    // Operators\\n    mapping(address => mapping(address => bool)) internal operators;\\n\\n    /***********************************|\\n  |     Public Transfer Functions     |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) public override {\\n        // Requirements\\n        require(\\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\\n            \\\"ERC1155PackedBalance#safeTransferFrom: INVALID_OPERATOR\\\"\\n        );\\n        require(\\n            _to != address(0),\\n            \\\"ERC1155PackedBalance#safeTransferFrom: INVALID_RECIPIENT\\\"\\n        );\\n        // require(_amount <= balances);  Not necessary since checked with _viewUpdateBinValue() checks\\n\\n        _safeTransferFrom(_from, _to, _id, _amount);\\n        _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\\n    }\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev Arrays should be sorted so that all ids in a same storage slot are adjacent (more efficient)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public override {\\n        // Requirements\\n        require(\\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\\n            \\\"ERC1155PackedBalance#safeBatchTransferFrom: INVALID_OPERATOR\\\"\\n        );\\n        require(\\n            _to != address(0),\\n            \\\"ERC1155PackedBalance#safeBatchTransferFrom: INVALID_RECIPIENT\\\"\\n        );\\n\\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\n        _callonERC1155BatchReceived(\\n            _from,\\n            _to,\\n            _ids,\\n            _amounts,\\n            gasleft(),\\n            _data\\n        );\\n    }\\n\\n    /***********************************|\\n  |    Internal Transfer Functions    |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     */\\n    function _safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount\\n    ) internal {\\n        //Update balances\\n        _updateIDBalance(_from, _id, _amount, Operations.Sub); // Subtract amount from sender\\n        _updateIDBalance(_to, _id, _amount, Operations.Add); // Add amount to recipient\\n\\n        // Emit event\\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\n    }\\n\\n    /**\\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\n     */\\n    function _callonERC1155Received(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    ) internal {\\n        // Check if recipient is contract\\n        if (_to.isContract()) {\\n            bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{\\n                gas: _gasLimit\\n            }(msg.sender, _from, _id, _amount, _data);\\n            require(\\n                retval == ERC1155_RECEIVED_VALUE,\\n                \\\"ERC1155PackedBalance#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev Arrays should be sorted so that all ids in a same storage slot are adjacent (more efficient)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     */\\n    function _safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) internal {\\n        uint256 nTransfer = _ids.length; // Number of transfer to execute\\n        require(\\n            nTransfer == _amounts.length,\\n            \\\"ERC1155PackedBalance#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n\\n        if (_from != _to && nTransfer > 0) {\\n            // Load first bin and index where the token ID balance exists\\n            (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\\n\\n            // Balance for current bin in memory (initialized with first transfer)\\n            uint256 balFrom = _viewUpdateBinValue(\\n                balances[_from][bin],\\n                index,\\n                _amounts[0],\\n                Operations.Sub\\n            );\\n            uint256 balTo = _viewUpdateBinValue(\\n                balances[_to][bin],\\n                index,\\n                _amounts[0],\\n                Operations.Add\\n            );\\n\\n            // Last bin updated\\n            uint256 lastBin = bin;\\n\\n            for (uint256 i = 1; i < nTransfer; i++) {\\n                (bin, index) = getIDBinIndex(_ids[i]);\\n\\n                // If new bin\\n                if (bin != lastBin) {\\n                    // Update storage balance of previous bin\\n                    balances[_from][lastBin] = balFrom;\\n                    balances[_to][lastBin] = balTo;\\n\\n                    balFrom = balances[_from][bin];\\n                    balTo = balances[_to][bin];\\n\\n                    // Bin will be the most recent bin\\n                    lastBin = bin;\\n                }\\n\\n                // Update memory balance\\n                balFrom = _viewUpdateBinValue(\\n                    balFrom,\\n                    index,\\n                    _amounts[i],\\n                    Operations.Sub\\n                );\\n                balTo = _viewUpdateBinValue(\\n                    balTo,\\n                    index,\\n                    _amounts[i],\\n                    Operations.Add\\n                );\\n            }\\n\\n            // Update storage of the last bin visited\\n            balances[_from][bin] = balFrom;\\n            balances[_to][bin] = balTo;\\n\\n            // If transfer to self, just make sure all amounts are valid\\n        } else {\\n            for (uint256 i = 0; i < nTransfer; i++) {\\n                require(\\n                    balanceOf(_from, _ids[i]) >= _amounts[i],\\n                    \\\"ERC1155PackedBalance#_safeBatchTransferFrom: UNDERFLOW\\\"\\n                );\\n            }\\n        }\\n\\n        // Emit event\\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\n    }\\n\\n    /**\\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\n     */\\n    function _callonERC1155BatchReceived(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    ) internal {\\n        // Pass data if recipient is contract\\n        if (_to.isContract()) {\\n            bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{\\n                gas: _gasLimit\\n            }(msg.sender, _from, _ids, _amounts, _data);\\n            require(\\n                retval == ERC1155_BATCH_RECEIVED_VALUE,\\n                \\\"ERC1155PackedBalance#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\"\\n            );\\n        }\\n    }\\n\\n    /***********************************|\\n  |         Operator Functions        |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved)\\n        external\\n        override\\n    {\\n        // Update operator status\\n        operators[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return isOperator True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        override\\n        returns (bool isOperator)\\n    {\\n        return operators[_owner][_operator];\\n    }\\n\\n    /***********************************|\\n  |     Public Balance Functions      |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 bin;\\n        uint256 index;\\n\\n        //Get bin and index of _id\\n        (bin, index) = getIDBinIndex(_id);\\n        return getValueInBin(balances[_owner][bin], index);\\n    }\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders (sorted owners will lead to less gas usage)\\n     * @param _ids    ID of the Tokens (sorted ids will lead to less gas usage\\n     * @return The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 n_owners = _owners.length;\\n        require(\\n            n_owners == _ids.length,\\n            \\\"ERC1155PackedBalance#balanceOfBatch: INVALID_ARRAY_LENGTH\\\"\\n        );\\n\\n        // First values\\n        (uint256 bin, uint256 index) = getIDBinIndex(_ids[0]);\\n        uint256 balance_bin = balances[_owners[0]][bin];\\n        uint256 last_bin = bin;\\n\\n        // Initialization\\n        uint256[] memory batchBalances = new uint256[](n_owners);\\n        batchBalances[0] = getValueInBin(balance_bin, index);\\n\\n        // Iterate over each owner and token ID\\n        for (uint256 i = 1; i < n_owners; i++) {\\n            (bin, index) = getIDBinIndex(_ids[i]);\\n\\n            // SLOAD if bin changed for the same owner or if owner changed\\n            if (bin != last_bin || _owners[i - 1] != _owners[i]) {\\n                balance_bin = balances[_owners[i]][bin];\\n                last_bin = bin;\\n            }\\n\\n            batchBalances[i] = getValueInBin(balance_bin, index);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /***********************************|\\n  |      Packed Balance Functions     |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Update the balance of a id for a given address\\n     * @param _address    Address to update id balance\\n     * @param _id         Id to update balance of\\n     * @param _amount     Amount to update the id balance\\n     * @param _operation  Which operation to conduct :\\n     *   Operations.Add: Add _amount to id balance\\n     *   Operations.Sub: Substract _amount from id balance\\n     */\\n    function _updateIDBalance(\\n        address _address,\\n        uint256 _id,\\n        uint256 _amount,\\n        Operations _operation\\n    ) internal {\\n        uint256 bin;\\n        uint256 index;\\n\\n        // Get bin and index of _id\\n        (bin, index) = getIDBinIndex(_id);\\n\\n        // Update balance\\n        balances[_address][bin] = _viewUpdateBinValue(\\n            balances[_address][bin],\\n            index,\\n            _amount,\\n            _operation\\n        );\\n    }\\n\\n    /**\\n     * @notice Update a value in _binValues\\n     * @param _binValues  Uint256 containing values of size IDS_BITS_SIZE (the token balances)\\n     * @param _index      Index of the value in the provided bin\\n     * @param _amount     Amount to update the id balance\\n     * @param _operation  Which operation to conduct :\\n     *   Operations.Add: Add _amount to value in _binValues at _index\\n     *   Operations.Sub: Substract _amount from value in _binValues at _index\\n     */\\n    function _viewUpdateBinValue(\\n        uint256 _binValues,\\n        uint256 _index,\\n        uint256 _amount,\\n        Operations _operation\\n    ) internal pure returns (uint256 newBinValues) {\\n        uint256 shift = IDS_BITS_SIZE * _index;\\n        uint256 mask = (uint256(1) << IDS_BITS_SIZE) - 1;\\n\\n        if (_operation == Operations.Add) {\\n            newBinValues = _binValues + (_amount << shift);\\n            require(\\n                newBinValues >= _binValues,\\n                \\\"ERC1155PackedBalance#_viewUpdateBinValue: OVERFLOW\\\"\\n            );\\n            require(\\n                ((_binValues >> shift) & mask) + _amount < 2**IDS_BITS_SIZE, // Checks that no other id changed\\n                \\\"ERC1155PackedBalance#_viewUpdateBinValue: OVERFLOW\\\"\\n            );\\n        } else if (_operation == Operations.Sub) {\\n            newBinValues = _binValues - (_amount << shift);\\n            require(\\n                newBinValues <= _binValues,\\n                \\\"ERC1155PackedBalance#_viewUpdateBinValue: UNDERFLOW\\\"\\n            );\\n            require(\\n                ((_binValues >> shift) & mask) >= _amount, // Checks that no other id changed\\n                \\\"ERC1155PackedBalance#_viewUpdateBinValue: UNDERFLOW\\\"\\n            );\\n        } else {\\n            revert(\\n                \\\"ERC1155PackedBalance#_viewUpdateBinValue: INVALID_BIN_WRITE_OPERATION\\\"\\n            ); // Bad operation\\n        }\\n\\n        return newBinValues;\\n    }\\n\\n    /**\\n     * @notice Return the bin number and index within that bin where ID is\\n     * @param _id  Token id\\n     * @return bin index (Bin number, ID\\\"s index within that bin)\\n     */\\n    function getIDBinIndex(uint256 _id)\\n        public\\n        pure\\n        returns (uint256 bin, uint256 index)\\n    {\\n        bin = _id / IDS_PER_UINT256;\\n        index = _id % IDS_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n     * @notice Return amount in _binValues at position _index\\n     * @param _binValues  uint256 containing the balances of IDS_PER_UINT256 ids\\n     * @param _index      Index at which to retrieve amount\\n     * @return amount at given _index in _bin\\n     */\\n    function getValueInBin(uint256 _binValues, uint256 _index)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // require(_index < IDS_PER_UINT256) is not required since getIDBinIndex ensures `_index < IDS_PER_UINT256`\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << IDS_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = IDS_BITS_SIZE * _index;\\n        return (_binValues >> rightShift) & mask;\\n    }\\n\\n    /***********************************|\\n  |          ERC165 Functions         |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param _interfaceID  The interface identifier, as specified in ERC-165\\n     * @return `true` if the contract implements `_interfaceID` and\\n     */\\n    function supportsInterface(bytes4 _interfaceID)\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        if (_interfaceID == type(IERC1155).interfaceId) {\\n            return true;\\n        }\\n        return super.supportsInterface(_interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xf439bd06d865f5b239ade1ff5c70185a48b7a0189e6b7a56e3d9fb720b70c29f\",\"license\":\"Apache-2.0\"},\"contracts/tokens/ResourceTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"./ERC1155PackedBalance/ERC1155MintBurnPackedBalance.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ResourceTokens is ERC1155MintBurnPackedBalance, Ownable {\\n    // Resources\\n    uint256 public constant WOOD = 1;\\n    uint256 public constant STONE = 2;\\n    uint256 public constant COAL = 3;\\n    uint256 public constant COPPER = 4;\\n    uint256 public constant OBSIDIAN = 5;\\n    uint256 public constant SILVER = 6;\\n    uint256 public constant IRONWOOD = 7;\\n    uint256 public constant COLD_IRON = 8;\\n    uint256 public constant GOLD = 9;\\n    uint256 public constant HARTWOOD = 10;\\n    uint256 public constant DIAMONDS = 11;\\n    uint256 public constant SAPPHIRE = 12;\\n    uint256 public constant DEEP_CRYSTAL = 13;\\n    uint256 public constant RUBY = 14;\\n    uint256 public constant IGNIUM = 15;\\n    uint256 public constant ETHEREAL_SILICA = 16;\\n    uint256 public constant TRUE_ICE = 17;\\n    uint256 public constant TWILIGHT_QUARTZ = 18;\\n    uint256 public constant ALCHEMICAL_SILVER = 19;\\n    uint256 public constant ADAMANTINE = 20;\\n    uint256 public constant MITHRAL = 21;\\n    uint256 public constant DRAGONHIDE = 22;\\n\\n    address public treasury;\\n    address public diamond;\\n    uint256 public tax;\\n\\n    constructor(\\n        address _treasury,\\n        address _diamond,\\n        uint256 _tax\\n    ) {\\n        treasury = _treasury;\\n        diamond = _diamond;\\n        tax = _tax;\\n    }\\n\\n    function batchResourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public checkIfOwnerOrDiamond {\\n        _batchMint(_to, _ids, _amounts, _data);\\n\\n        uint256[] memory _treasuryAmount = new uint256[](22);\\n\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            _treasuryAmount[i] = (_amounts[i] * tax) / 10;\\n        }\\n\\n        _batchMint(treasury, _ids, _amounts, _data);\\n    }\\n\\n    function resourceMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public checkIfOwnerOrDiamond {\\n        _batchMint(_to, _ids, _amounts, _data);\\n        _batchMint(treasury, _ids, _amounts, _data);\\n    }\\n\\n    function batchBurnResources(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) public {\\n        _batchBurn(_from, _ids, _amounts);\\n    }\\n\\n    function changeDiamondAddress(address _newDiamond) public onlyOwner {\\n        diamond = _newDiamond;\\n    }\\n\\n    function changeTreasuryAddress(address _newTreasury) public onlyOwner {\\n        treasury = _newTreasury;\\n    }\\n\\n    function changeTax(uint256 _newTax) public onlyOwner {\\n        tax = _newTax;\\n    }\\n\\n    modifier checkIfOwnerOrDiamond() {\\n        require(\\n            msg.sender == owner() || msg.sender == diamond,\\n            \\\"NOT THE DIAMOND\\\"\\n        );\\n        _;\\n    }\\n\\n    function daoMinting(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public onlyOwner {\\n        _batchMint(_to, _ids, _amounts, _data);\\n    }\\n}\\n\",\"keccak256\":\"0x1bf2768dd209bff0db4979185e94c4ef86c0d593e840684f37b932a663d394cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200496d3803806200496d8339818101604052810190620000379190620001e5565b620000576200004b620000e960201b60201c565b620000f160201b60201c565b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600581905550505050620002ad565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001c88162000279565b92915050565b600081519050620001df8162000293565b92915050565b600080600060608486031215620001fb57600080fd5b60006200020b86828701620001b7565b93505060206200021e86828701620001b7565b92505060406200023186828701620001ce565b9150509250925092565b600062000248826200024f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000284816200023b565b81146200029057600080fd5b50565b6200029e816200026f565b8114620002aa57600080fd5b50565b6146b080620002bd6000396000f3fe608060405234801561001057600080fd5b50600436106102735760003560e01c806390f5f0cd11610151578063d75444ba116100c3578063eaec5f8111610087578063eaec5f8114610721578063ed750d0714610751578063f0b7db4e1461076f578063f242432a1461078d578063f2fde38b146107a9578063fb9daec4146107c557610273565b8063d75444ba14610666578063db90e83c14610684578063dbb95f1e146106b5578063e3e55f08146106d3578063e985e9c5146106f157610273565b8063a554d9fe11610115578063a554d9fe146105b6578063a6f353f0146105d4578063b577ec1a146105f0578063b61444a91461060e578063bc0bcbb61461062c578063c90f75591461064a57610273565b806390f5f0cd1461052257806399c8d556146105405780639c65c10f1461055e5780639d4221391461057c578063a22cb4651461059a57610273565b80634e1273f4116101ea5780636ccbe6e6116101ae5780636ccbe6e614610488578063715018a6146104a6578063741b1921146104b05780638a5d9446146104cc5780638da5cb5b146104e85780638edf55bf1461050657610273565b80634e1273f4146103e05780635653e3ac1461041057806361d027b31461042e578063672c26231461044c57806369f9901e1461046a57610273565b80632eb2c2d61161023c5780632eb2c2d61461033057806339c0f83a1461034c5780633e45c8af1461036a5780633e4bee381461038657806344a2879c146103a457806345114a78146103c257610273565b8062fdd58e1461027857806301ffc9a7146102a85780630cf64bbb146102d85780631b1a1672146102f6578063292803f514610312575b600080fd5b610292600480360381019061028d919061329b565b6107e3565b60405161029f9190613aa9565b60405180910390f35b6102c260048036038101906102bd9190613343565b61085c565b6040516102cf919061386e565b60405180910390f35b6102e06108de565b6040516102ed9190613aa9565b60405180910390f35b610310600480360381019061030b91906131b4565b6108e3565b005b61031a610971565b6040516103279190613aa9565b60405180910390f35b61034a60048036038101906103459190612fe7565b610976565b005b610354610a86565b6040516103619190613aa9565b60405180910390f35b610384600480360381019061037f9190613395565b610a8b565b005b61038e610b11565b60405161039b9190613aa9565b60405180910390f35b6103ac610b16565b6040516103b99190613aa9565b60405180910390f35b6103ca610b1b565b6040516103d79190613aa9565b60405180910390f35b6103fa60048036038101906103f591906132d7565b610b20565b6040516104079190613815565b60405180910390f35b610418610f4d565b6040516104259190613aa9565b60405180910390f35b610436610f52565b6040516104439190613738565b60405180910390f35b610454610f78565b6040516104619190613aa9565b60405180910390f35b610472610f7d565b60405161047f9190613aa9565b60405180910390f35b610490610f82565b60405161049d9190613aa9565b60405180910390f35b6104ae610f87565b005b6104ca60048036038101906104c59190612f82565b61100f565b005b6104e660048036038101906104e19190613135565b6110cf565b005b6104f06110df565b6040516104fd9190613738565b60405180910390f35b610520600480360381019061051b91906131b4565b611109565b005b61052a611216565b6040516105379190613aa9565b60405180910390f35b61054861121b565b6040516105559190613aa9565b60405180910390f35b610566611221565b6040516105739190613aa9565b60405180910390f35b610584611226565b6040516105919190613aa9565b60405180910390f35b6105b460048036038101906105af919061325f565b61122b565b005b6105be611328565b6040516105cb9190613aa9565b60405180910390f35b6105ee60048036038101906105e99190612f82565b61132d565b005b6105f86113ed565b6040516106059190613aa9565b60405180910390f35b6106166113f2565b6040516106239190613aa9565b60405180910390f35b6106346113f7565b6040516106419190613aa9565b60405180910390f35b610664600480360381019061065f91906131b4565b6113fc565b005b61066e61163d565b60405161067b9190613aa9565b60405180910390f35b61069e60048036038101906106999190613395565b611642565b6040516106ac929190613ac4565b60405180910390f35b6106bd611682565b6040516106ca9190613aa9565b60405180910390f35b6106db611687565b6040516106e89190613aa9565b60405180910390f35b61070b60048036038101906107069190612fab565b61168c565b604051610718919061386e565b60405180910390f35b61073b600480360381019061073691906133be565b611720565b6040516107489190613aa9565b60405180910390f35b610759611758565b6040516107669190613aa9565b60405180910390f35b61077761175d565b6040516107849190613738565b60405180910390f35b6107a760048036038101906107a291906130a6565b611783565b005b6107c360048036038101906107be9190612f82565b611893565b005b6107cd61198b565b6040516107da9190613aa9565b60405180910390f35b60008060006107f184611642565b80925081935050506108526000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205482611720565b9250505092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156108cd57600190506108d9565b6108d682611990565b90505b919050565b600e81565b6108eb6119e1565b73ffffffffffffffffffffffffffffffffffffffff166109096110df565b73ffffffffffffffffffffffffffffffffffffffff161461095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095690613989565b60405180910390fd5b61096b848484846119e9565b50505050565b600c81565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109b657506109b5853361168c565b5b6109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec90613969565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c906138a9565b60405180910390fd5b610a7185858585611d96565b610a7f858585855a86612444565b5050505050565b601581565b610a936119e1565b73ffffffffffffffffffffffffffffffffffffffff16610ab16110df565b73ffffffffffffffffffffffffffffffffffffffff1614610b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afe90613989565b60405180910390fd5b8060058190555050565b600981565b600781565b600581565b606060008351905082518114610b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6290613889565b60405180910390fd5b600080610bb885600081518110610bab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b91509150600080600088600081518110610bfb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549050600083905060008567ffffffffffffffff811115610c98577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610cc65781602001602082028036833780820191505090505b509050610cd38385611720565b81600081518110610d0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506000600190505b86811015610f3d57610d71898281518110610d64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b80965081975050508286141580610e405750898181518110610dbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168a600183610de89190613e53565b81518110610e1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614155b15610edb576000808b8381518110610e81577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205493508592505b610ee58486611720565b828281518110610f1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610f3590613f6e565b915050610d20565b5080965050505050505092915050565b600181565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600881565b600281565b601381565b610f8f6119e1565b73ffffffffffffffffffffffffffffffffffffffff16610fad6110df565b73ffffffffffffffffffffffffffffffffffffffff1614611003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffa90613989565b60405180910390fd5b61100d6000612592565b565b6110176119e1565b73ffffffffffffffffffffffffffffffffffffffff166110356110df565b73ffffffffffffffffffffffffffffffffffffffff161461108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290613989565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110da838383612658565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111116110df565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111975750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6111d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cd90613a49565b60405180910390fd5b6111e2848484846119e9565b611210600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484846119e9565b50505050565b600481565b60055481565b601181565b600b81565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161131c919061386e565b60405180910390a35050565b600d81565b6113356119e1565b73ffffffffffffffffffffffffffffffffffffffff166113536110df565b73ffffffffffffffffffffffffffffffffffffffff16146113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a090613989565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601281565b600381565b600a81565b6114046110df565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061148a5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6114c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c090613a49565b60405180910390fd5b6114d5848484846119e9565b6000601667ffffffffffffffff811115611518577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156115465781602001602082028036833780820191505090505b50905060005b835181101561160757600a600554858381518110611593577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516115a59190613df9565b6115af9190613c57565b8282815181106115e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806115ff90613f6e565b91505061154c565b50611636600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585856119e9565b5050505050565b601481565b60008060406101006116549190613c57565b8361165f9190613c57565b915060406101006116709190613c57565b8361167b9190613fb7565b9050915091565b600f81565b600681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600160406001901b6117359190613e53565b905060008360406117469190613df9565b9050818186901c169250505092915050565b601681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806117c357506117c2853361168c565b5b611802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f990613909565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186990613a09565b60405180910390fd5b61187e858585856127d2565b61188c858585855a86612870565b5050505050565b61189b6119e1565b73ffffffffffffffffffffffffffffffffffffffff166118b96110df565b73ffffffffffffffffffffffffffffffffffffffff161461190f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190690613989565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561197f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611976906138c9565b60405180910390fd5b61198881612592565b50565b601081565b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114611a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2490613a69565b60405180910390fd5b600083511115611d0257600080611a8485600081518110611a77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b915091506000611b276000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020548387600081518110611b18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160006129be565b905060008651905060008490506000600190505b82811015611ca757611b8c898281518110611b7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b8096508197505050818614611c4557836000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055506000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205493508591505b611c9284868a8481518110611c83577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160006129be565b93508080611c9f90613f6e565b915050611b3b565b50826000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000208190555050505050505b8373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611d79929190613837565b60405180910390a4611d9060008585855a86612444565b50505050565b60008251905081518114611ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd690613929565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614158015611e1b5750600081115b156122d357600080611e6d85600081518110611e60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b915091506000611f106000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020548387600081518110611f01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160016129be565b90506000611fb16000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020548488600081518110611fa2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160006129be565b905060008490506000600190505b8681101561222057612010898281518110612003577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b809650819750505081861461216f57836000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550826000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055506000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205493506000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205492508591505b6121bc84868a84815181106121ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160016129be565b935061220b83868a84815181106121fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160006129be565b9250808061221890613f6e565b915050611fbf565b50826000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002081905550816000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000208190555050505050506123bf565b60005b818110156123bd57828181518110612317577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516123698786848151811061235c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516107e3565b10156123aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a1906139c9565b60405180910390fd5b80806123b590613f6e565b9150506122d6565b505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612435929190613837565b60405180910390a45050505050565b6124638573ffffffffffffffffffffffffffffffffffffffff16612c76565b1561258a5760008573ffffffffffffffffffffffffffffffffffffffff1663bc197c8184338a8989886040518763ffffffff1660e01b81526004016124ac959493929190613753565b602060405180830381600088803b1580156124c657600080fd5b5087f11580156124da573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906124ff919061336c565b905063bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257f90613949565b60405180910390fd5b505b505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600082519050815181146126a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612698906139a9565b60405180910390fd5b60005b8181101561274c57612739858583815181106126e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015185848151811061272a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516001612cbb565b808061274490613f6e565b9150506126a4565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516127c4929190613837565b60405180910390a450505050565b6127df8483836001612cbb565b6127ec8383836000612cbb565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612862929190613ac4565b60405180910390a450505050565b61288f8573ffffffffffffffffffffffffffffffffffffffff16612c76565b156129b65760008573ffffffffffffffffffffffffffffffffffffffff1663f23a6e6184338a8989886040518763ffffffff1660e01b81526004016128d89594939291906137bb565b602060405180830381600088803b1580156128f257600080fd5b5087f1158015612906573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061292b919061336c565b905063f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146129b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ab906139e9565b60405180910390fd5b505b505050505050565b6000808460406129ce9190613df9565b90506000600160406001901b6129e49190613e53565b905060006001811115612a20577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846001811115612a59577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612b17578185901b87612a6e9190613c01565b925086831015612ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aaa90613a89565b60405180910390fd5b60406002612ac19190613cdb565b8582848a901c16612ad29190613c01565b10612b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0990613a89565b60405180910390fd5b612c6c565b600180811115612b50577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846001811115612b89577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612c30578185901b87612b9e9190613e53565b925086831115612be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bda906138e9565b60405180910390fd5b84818389901c161015612c2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c22906138e9565b60405180910390fd5b612c6b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6290613a29565b60405180910390fd5b5b5050949350505050565b600080823f90506000801b8114158015612cb357507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b8114155b915050919050565b600080612cc785611642565b8092508193505050612d2a6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020548286866129be565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550505050505050565b6000612d98612d9384613b12565b613aed565b90508083825260208201905082856020860282011115612db757600080fd5b60005b85811015612de75781612dcd8882612e9b565b845260208401935060208301925050600181019050612dba565b5050509392505050565b6000612e04612dff84613b3e565b613aed565b90508083825260208201905082856020860282011115612e2357600080fd5b60005b85811015612e535781612e398882612f6d565b845260208401935060208301925050600181019050612e26565b5050509392505050565b6000612e70612e6b84613b6a565b613aed565b905082815260208101848484011115612e8857600080fd5b612e93848285613efb565b509392505050565b600081359050612eaa8161461e565b92915050565b600082601f830112612ec157600080fd5b8135612ed1848260208601612d85565b91505092915050565b600082601f830112612eeb57600080fd5b8135612efb848260208601612df1565b91505092915050565b600081359050612f1381614635565b92915050565b600081359050612f288161464c565b92915050565b600081519050612f3d8161464c565b92915050565b600082601f830112612f5457600080fd5b8135612f64848260208601612e5d565b91505092915050565b600081359050612f7c81614663565b92915050565b600060208284031215612f9457600080fd5b6000612fa284828501612e9b565b91505092915050565b60008060408385031215612fbe57600080fd5b6000612fcc85828601612e9b565b9250506020612fdd85828601612e9b565b9150509250929050565b600080600080600060a08688031215612fff57600080fd5b600061300d88828901612e9b565b955050602061301e88828901612e9b565b945050604086013567ffffffffffffffff81111561303b57600080fd5b61304788828901612eda565b935050606086013567ffffffffffffffff81111561306457600080fd5b61307088828901612eda565b925050608086013567ffffffffffffffff81111561308d57600080fd5b61309988828901612f43565b9150509295509295909350565b600080600080600060a086880312156130be57600080fd5b60006130cc88828901612e9b565b95505060206130dd88828901612e9b565b94505060406130ee88828901612f6d565b93505060606130ff88828901612f6d565b925050608086013567ffffffffffffffff81111561311c57600080fd5b61312888828901612f43565b9150509295509295909350565b60008060006060848603121561314a57600080fd5b600061315886828701612e9b565b935050602084013567ffffffffffffffff81111561317557600080fd5b61318186828701612eda565b925050604084013567ffffffffffffffff81111561319e57600080fd5b6131aa86828701612eda565b9150509250925092565b600080600080608085870312156131ca57600080fd5b60006131d887828801612e9b565b945050602085013567ffffffffffffffff8111156131f557600080fd5b61320187828801612eda565b935050604085013567ffffffffffffffff81111561321e57600080fd5b61322a87828801612eda565b925050606085013567ffffffffffffffff81111561324757600080fd5b61325387828801612f43565b91505092959194509250565b6000806040838503121561327257600080fd5b600061328085828601612e9b565b925050602061329185828601612f04565b9150509250929050565b600080604083850312156132ae57600080fd5b60006132bc85828601612e9b565b92505060206132cd85828601612f6d565b9150509250929050565b600080604083850312156132ea57600080fd5b600083013567ffffffffffffffff81111561330457600080fd5b61331085828601612eb0565b925050602083013567ffffffffffffffff81111561332d57600080fd5b61333985828601612eda565b9150509250929050565b60006020828403121561335557600080fd5b600061336384828501612f19565b91505092915050565b60006020828403121561337e57600080fd5b600061338c84828501612f2e565b91505092915050565b6000602082840312156133a757600080fd5b60006133b584828501612f6d565b91505092915050565b600080604083850312156133d157600080fd5b60006133df85828601612f6d565b92505060206133f085828601612f6d565b9150509250929050565b6000613406838361371a565b60208301905092915050565b61341b81613e87565b82525050565b600061342c82613bab565b6134368185613bce565b935061344183613b9b565b8060005b8381101561347257815161345988826133fa565b975061346483613bc1565b925050600181019050613445565b5085935050505092915050565b61348881613e99565b82525050565b600061349982613bb6565b6134a38185613bdf565b93506134b3818560208601613f0a565b6134bc81614075565b840191505092915050565b60006134d4603983613bf0565b91506134df82614093565b604082019050919050565b60006134f7603d83613bf0565b9150613502826140e2565b604082019050919050565b600061351a602683613bf0565b915061352582614131565b604082019050919050565b600061353d603383613bf0565b915061354882614180565b604082019050919050565b6000613560603783613bf0565b915061356b826141cf565b604082019050919050565b6000613583604283613bf0565b915061358e8261421e565b606082019050919050565b60006135a6604c83613bf0565b91506135b182614293565b606082019050919050565b60006135c9603c83613bf0565b91506135d482614308565b604082019050919050565b60006135ec602083613bf0565b91506135f782614357565b602082019050919050565b600061360f603d83613bf0565b915061361a82614380565b604082019050919050565b6000613632603683613bf0565b915061363d826143cf565b604082019050919050565b6000613655604783613bf0565b91506136608261441e565b606082019050919050565b6000613678603883613bf0565b915061368382614493565b604082019050919050565b600061369b604583613bf0565b91506136a6826144e2565b606082019050919050565b60006136be600f83613bf0565b91506136c982614557565b602082019050919050565b60006136e1603e83613bf0565b91506136ec82614580565b604082019050919050565b6000613704603283613bf0565b915061370f826145cf565b604082019050919050565b61372381613ef1565b82525050565b61373281613ef1565b82525050565b600060208201905061374d6000830184613412565b92915050565b600060a0820190506137686000830188613412565b6137756020830187613412565b81810360408301526137878186613421565b9050818103606083015261379b8185613421565b905081810360808301526137af818461348e565b90509695505050505050565b600060a0820190506137d06000830188613412565b6137dd6020830187613412565b6137ea6040830186613729565b6137f76060830185613729565b8181036080830152613809818461348e565b90509695505050505050565b6000602082019050818103600083015261382f8184613421565b905092915050565b600060408201905081810360008301526138518185613421565b905081810360208301526138658184613421565b90509392505050565b6000602082019050613883600083018461347f565b92915050565b600060208201905081810360008301526138a2816134c7565b9050919050565b600060208201905081810360008301526138c2816134ea565b9050919050565b600060208201905081810360008301526138e28161350d565b9050919050565b6000602082019050818103600083015261390281613530565b9050919050565b6000602082019050818103600083015261392281613553565b9050919050565b6000602082019050818103600083015261394281613576565b9050919050565b6000602082019050818103600083015261396281613599565b9050919050565b60006020820190508181036000830152613982816135bc565b9050919050565b600060208201905081810360008301526139a2816135df565b9050919050565b600060208201905081810360008301526139c281613602565b9050919050565b600060208201905081810360008301526139e281613625565b9050919050565b60006020820190508181036000830152613a0281613648565b9050919050565b60006020820190508181036000830152613a228161366b565b9050919050565b60006020820190508181036000830152613a428161368e565b9050919050565b60006020820190508181036000830152613a62816136b1565b9050919050565b60006020820190508181036000830152613a82816136d4565b9050919050565b60006020820190508181036000830152613aa2816136f7565b9050919050565b6000602082019050613abe6000830184613729565b92915050565b6000604082019050613ad96000830185613729565b613ae66020830184613729565b9392505050565b6000613af7613b08565b9050613b038282613f3d565b919050565b6000604051905090565b600067ffffffffffffffff821115613b2d57613b2c614046565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b5957613b58614046565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b8557613b84614046565b5b613b8e82614075565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613c0c82613ef1565b9150613c1783613ef1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613c4c57613c4b613fe8565b5b828201905092915050565b6000613c6282613ef1565b9150613c6d83613ef1565b925082613c7d57613c7c614017565b5b828204905092915050565b6000808291508390505b6001851115613cd257808604811115613cae57613cad613fe8565b5b6001851615613cbd5780820291505b8081029050613ccb85614086565b9450613c92565b94509492505050565b6000613ce682613ef1565b9150613cf183613ef1565b9250613d1e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613d26565b905092915050565b600082613d365760019050613df2565b81613d445760009050613df2565b8160018114613d5a5760028114613d6457613d93565b6001915050613df2565b60ff841115613d7657613d75613fe8565b5b8360020a915084821115613d8d57613d8c613fe8565b5b50613df2565b5060208310610133831016604e8410600b8410161715613dc85782820a905083811115613dc357613dc2613fe8565b5b613df2565b613dd58484846001613c88565b92509050818404811115613dec57613deb613fe8565b5b81810290505b9392505050565b6000613e0482613ef1565b9150613e0f83613ef1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e4857613e47613fe8565b5b828202905092915050565b6000613e5e82613ef1565b9150613e6983613ef1565b925082821015613e7c57613e7b613fe8565b5b828203905092915050565b6000613e9282613ed1565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613f28578082015181840152602081019050613f0d565b83811115613f37576000848401525b50505050565b613f4682614075565b810181811067ffffffffffffffff82111715613f6557613f64614046565b5b80604052505050565b6000613f7982613ef1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fac57613fab613fe8565b5b600182019050919050565b6000613fc282613ef1565b9150613fcd83613ef1565b925082613fdd57613fdc614017565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f455243313135355061636b656442616c616e63652362616c616e63654f66426160008201527f7463683a20494e56414c49445f41525241595f4c454e47544800000000000000602082015250565b7f455243313135355061636b656442616c616e636523736166654261746368547260008201527f616e7366657246726f6d3a20494e56414c49445f524543495049454e54000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313135355061636b656442616c616e6365235f7669657755706461746560008201527f42696e56616c75653a20554e444552464c4f5700000000000000000000000000602082015250565b7f455243313135355061636b656442616c616e636523736166655472616e73666560008201527f7246726f6d3a20494e56414c49445f4f50455241544f52000000000000000000602082015250565b7f455243313135355061636b656442616c616e6365235f7361666542617463685460008201527f72616e7366657246726f6d3a20494e56414c49445f4152524159535f4c454e4760208201527f5448000000000000000000000000000000000000000000000000000000000000604082015250565b7f455243313135355061636b656442616c616e6365235f63616c6c6f6e4552433160008201527f313535426174636852656365697665643a20494e56414c49445f4f4e5f52454360208201527f454956455f4d4553534147450000000000000000000000000000000000000000604082015250565b7f455243313135355061636b656442616c616e636523736166654261746368547260008201527f616e7366657246726f6d3a20494e56414c49445f4f50455241544f5200000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f455243313135354d696e744275726e5061636b656442616c616e63652362617460008201527f63684275726e3a20494e56414c49445f4152524159535f4c454e475448000000602082015250565b7f455243313135355061636b656442616c616e6365235f7361666542617463685460008201527f72616e7366657246726f6d3a20554e444552464c4f5700000000000000000000602082015250565b7f455243313135355061636b656442616c616e6365235f63616c6c6f6e4552433160008201527f31353552656365697665643a20494e56414c49445f4f4e5f524543454956455f60208201527f4d45535341474500000000000000000000000000000000000000000000000000604082015250565b7f455243313135355061636b656442616c616e636523736166655472616e73666560008201527f7246726f6d3a20494e56414c49445f524543495049454e540000000000000000602082015250565b7f455243313135355061636b656442616c616e6365235f7669657755706461746560008201527f42696e56616c75653a20494e56414c49445f42494e5f57524954455f4f50455260208201527f4154494f4e000000000000000000000000000000000000000000000000000000604082015250565b7f4e4f5420544845204449414d4f4e440000000000000000000000000000000000600082015250565b7f455243313135354d696e744275726e5061636b656442616c616e6365235f626160008201527f7463684d696e743a20494e56414c49445f4152524159535f4c454e4754480000602082015250565b7f455243313135355061636b656442616c616e6365235f7669657755706461746560008201527f42696e56616c75653a204f564552464c4f570000000000000000000000000000602082015250565b61462781613e87565b811461463257600080fd5b50565b61463e81613e99565b811461464957600080fd5b50565b61465581613ea5565b811461466057600080fd5b50565b61466c81613ef1565b811461467757600080fd5b5056fea2646970667358221220bb2949ff73058fa508d9f4354599e845ae14544814a47cb5c7cf24b1996ad19264736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102735760003560e01c806390f5f0cd11610151578063d75444ba116100c3578063eaec5f8111610087578063eaec5f8114610721578063ed750d0714610751578063f0b7db4e1461076f578063f242432a1461078d578063f2fde38b146107a9578063fb9daec4146107c557610273565b8063d75444ba14610666578063db90e83c14610684578063dbb95f1e146106b5578063e3e55f08146106d3578063e985e9c5146106f157610273565b8063a554d9fe11610115578063a554d9fe146105b6578063a6f353f0146105d4578063b577ec1a146105f0578063b61444a91461060e578063bc0bcbb61461062c578063c90f75591461064a57610273565b806390f5f0cd1461052257806399c8d556146105405780639c65c10f1461055e5780639d4221391461057c578063a22cb4651461059a57610273565b80634e1273f4116101ea5780636ccbe6e6116101ae5780636ccbe6e614610488578063715018a6146104a6578063741b1921146104b05780638a5d9446146104cc5780638da5cb5b146104e85780638edf55bf1461050657610273565b80634e1273f4146103e05780635653e3ac1461041057806361d027b31461042e578063672c26231461044c57806369f9901e1461046a57610273565b80632eb2c2d61161023c5780632eb2c2d61461033057806339c0f83a1461034c5780633e45c8af1461036a5780633e4bee381461038657806344a2879c146103a457806345114a78146103c257610273565b8062fdd58e1461027857806301ffc9a7146102a85780630cf64bbb146102d85780631b1a1672146102f6578063292803f514610312575b600080fd5b610292600480360381019061028d919061329b565b6107e3565b60405161029f9190613aa9565b60405180910390f35b6102c260048036038101906102bd9190613343565b61085c565b6040516102cf919061386e565b60405180910390f35b6102e06108de565b6040516102ed9190613aa9565b60405180910390f35b610310600480360381019061030b91906131b4565b6108e3565b005b61031a610971565b6040516103279190613aa9565b60405180910390f35b61034a60048036038101906103459190612fe7565b610976565b005b610354610a86565b6040516103619190613aa9565b60405180910390f35b610384600480360381019061037f9190613395565b610a8b565b005b61038e610b11565b60405161039b9190613aa9565b60405180910390f35b6103ac610b16565b6040516103b99190613aa9565b60405180910390f35b6103ca610b1b565b6040516103d79190613aa9565b60405180910390f35b6103fa60048036038101906103f591906132d7565b610b20565b6040516104079190613815565b60405180910390f35b610418610f4d565b6040516104259190613aa9565b60405180910390f35b610436610f52565b6040516104439190613738565b60405180910390f35b610454610f78565b6040516104619190613aa9565b60405180910390f35b610472610f7d565b60405161047f9190613aa9565b60405180910390f35b610490610f82565b60405161049d9190613aa9565b60405180910390f35b6104ae610f87565b005b6104ca60048036038101906104c59190612f82565b61100f565b005b6104e660048036038101906104e19190613135565b6110cf565b005b6104f06110df565b6040516104fd9190613738565b60405180910390f35b610520600480360381019061051b91906131b4565b611109565b005b61052a611216565b6040516105379190613aa9565b60405180910390f35b61054861121b565b6040516105559190613aa9565b60405180910390f35b610566611221565b6040516105739190613aa9565b60405180910390f35b610584611226565b6040516105919190613aa9565b60405180910390f35b6105b460048036038101906105af919061325f565b61122b565b005b6105be611328565b6040516105cb9190613aa9565b60405180910390f35b6105ee60048036038101906105e99190612f82565b61132d565b005b6105f86113ed565b6040516106059190613aa9565b60405180910390f35b6106166113f2565b6040516106239190613aa9565b60405180910390f35b6106346113f7565b6040516106419190613aa9565b60405180910390f35b610664600480360381019061065f91906131b4565b6113fc565b005b61066e61163d565b60405161067b9190613aa9565b60405180910390f35b61069e60048036038101906106999190613395565b611642565b6040516106ac929190613ac4565b60405180910390f35b6106bd611682565b6040516106ca9190613aa9565b60405180910390f35b6106db611687565b6040516106e89190613aa9565b60405180910390f35b61070b60048036038101906107069190612fab565b61168c565b604051610718919061386e565b60405180910390f35b61073b600480360381019061073691906133be565b611720565b6040516107489190613aa9565b60405180910390f35b610759611758565b6040516107669190613aa9565b60405180910390f35b61077761175d565b6040516107849190613738565b60405180910390f35b6107a760048036038101906107a291906130a6565b611783565b005b6107c360048036038101906107be9190612f82565b611893565b005b6107cd61198b565b6040516107da9190613aa9565b60405180910390f35b60008060006107f184611642565b80925081935050506108526000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205482611720565b9250505092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156108cd57600190506108d9565b6108d682611990565b90505b919050565b600e81565b6108eb6119e1565b73ffffffffffffffffffffffffffffffffffffffff166109096110df565b73ffffffffffffffffffffffffffffffffffffffff161461095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095690613989565b60405180910390fd5b61096b848484846119e9565b50505050565b600c81565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109b657506109b5853361168c565b5b6109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec90613969565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c906138a9565b60405180910390fd5b610a7185858585611d96565b610a7f858585855a86612444565b5050505050565b601581565b610a936119e1565b73ffffffffffffffffffffffffffffffffffffffff16610ab16110df565b73ffffffffffffffffffffffffffffffffffffffff1614610b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afe90613989565b60405180910390fd5b8060058190555050565b600981565b600781565b600581565b606060008351905082518114610b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6290613889565b60405180910390fd5b600080610bb885600081518110610bab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b91509150600080600088600081518110610bfb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549050600083905060008567ffffffffffffffff811115610c98577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610cc65781602001602082028036833780820191505090505b509050610cd38385611720565b81600081518110610d0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506000600190505b86811015610f3d57610d71898281518110610d64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b80965081975050508286141580610e405750898181518110610dbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168a600183610de89190613e53565b81518110610e1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614155b15610edb576000808b8381518110610e81577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205493508592505b610ee58486611720565b828281518110610f1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610f3590613f6e565b915050610d20565b5080965050505050505092915050565b600181565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600881565b600281565b601381565b610f8f6119e1565b73ffffffffffffffffffffffffffffffffffffffff16610fad6110df565b73ffffffffffffffffffffffffffffffffffffffff1614611003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffa90613989565b60405180910390fd5b61100d6000612592565b565b6110176119e1565b73ffffffffffffffffffffffffffffffffffffffff166110356110df565b73ffffffffffffffffffffffffffffffffffffffff161461108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290613989565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110da838383612658565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111116110df565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111975750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6111d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cd90613a49565b60405180910390fd5b6111e2848484846119e9565b611210600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484846119e9565b50505050565b600481565b60055481565b601181565b600b81565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161131c919061386e565b60405180910390a35050565b600d81565b6113356119e1565b73ffffffffffffffffffffffffffffffffffffffff166113536110df565b73ffffffffffffffffffffffffffffffffffffffff16146113a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a090613989565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601281565b600381565b600a81565b6114046110df565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061148a5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6114c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c090613a49565b60405180910390fd5b6114d5848484846119e9565b6000601667ffffffffffffffff811115611518577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156115465781602001602082028036833780820191505090505b50905060005b835181101561160757600a600554858381518110611593577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516115a59190613df9565b6115af9190613c57565b8282815181106115e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806115ff90613f6e565b91505061154c565b50611636600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585856119e9565b5050505050565b601481565b60008060406101006116549190613c57565b8361165f9190613c57565b915060406101006116709190613c57565b8361167b9190613fb7565b9050915091565b600f81565b600681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600160406001901b6117359190613e53565b905060008360406117469190613df9565b9050818186901c169250505092915050565b601681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806117c357506117c2853361168c565b5b611802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f990613909565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186990613a09565b60405180910390fd5b61187e858585856127d2565b61188c858585855a86612870565b5050505050565b61189b6119e1565b73ffffffffffffffffffffffffffffffffffffffff166118b96110df565b73ffffffffffffffffffffffffffffffffffffffff161461190f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190690613989565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561197f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611976906138c9565b60405180910390fd5b61198881612592565b50565b601081565b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114611a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2490613a69565b60405180910390fd5b600083511115611d0257600080611a8485600081518110611a77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b915091506000611b276000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020548387600081518110611b18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160006129be565b905060008651905060008490506000600190505b82811015611ca757611b8c898281518110611b7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b8096508197505050818614611c4557836000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055506000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205493508591505b611c9284868a8481518110611c83577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160006129be565b93508080611c9f90613f6e565b915050611b3b565b50826000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000208190555050505050505b8373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611d79929190613837565b60405180910390a4611d9060008585855a86612444565b50505050565b60008251905081518114611ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd690613929565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614158015611e1b5750600081115b156122d357600080611e6d85600081518110611e60577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b915091506000611f106000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020548387600081518110611f01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160016129be565b90506000611fb16000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020548488600081518110611fa2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160006129be565b905060008490506000600190505b8681101561222057612010898281518110612003577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611642565b809650819750505081861461216f57836000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550826000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055506000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205493506000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205492508591505b6121bc84868a84815181106121ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160016129be565b935061220b83868a84815181106121fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160006129be565b9250808061221890613f6e565b915050611fbf565b50826000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002081905550816000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000208190555050505050506123bf565b60005b818110156123bd57828181518110612317577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516123698786848151811061235c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516107e3565b10156123aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a1906139c9565b60405180910390fd5b80806123b590613f6e565b9150506122d6565b505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612435929190613837565b60405180910390a45050505050565b6124638573ffffffffffffffffffffffffffffffffffffffff16612c76565b1561258a5760008573ffffffffffffffffffffffffffffffffffffffff1663bc197c8184338a8989886040518763ffffffff1660e01b81526004016124ac959493929190613753565b602060405180830381600088803b1580156124c657600080fd5b5087f11580156124da573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906124ff919061336c565b905063bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257f90613949565b60405180910390fd5b505b505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600082519050815181146126a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612698906139a9565b60405180910390fd5b60005b8181101561274c57612739858583815181106126e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015185848151811061272a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516001612cbb565b808061274490613f6e565b9150506126a4565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516127c4929190613837565b60405180910390a450505050565b6127df8483836001612cbb565b6127ec8383836000612cbb565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612862929190613ac4565b60405180910390a450505050565b61288f8573ffffffffffffffffffffffffffffffffffffffff16612c76565b156129b65760008573ffffffffffffffffffffffffffffffffffffffff1663f23a6e6184338a8989886040518763ffffffff1660e01b81526004016128d89594939291906137bb565b602060405180830381600088803b1580156128f257600080fd5b5087f1158015612906573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061292b919061336c565b905063f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146129b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ab906139e9565b60405180910390fd5b505b505050505050565b6000808460406129ce9190613df9565b90506000600160406001901b6129e49190613e53565b905060006001811115612a20577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846001811115612a59577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612b17578185901b87612a6e9190613c01565b925086831015612ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aaa90613a89565b60405180910390fd5b60406002612ac19190613cdb565b8582848a901c16612ad29190613c01565b10612b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0990613a89565b60405180910390fd5b612c6c565b600180811115612b50577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846001811115612b89577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612c30578185901b87612b9e9190613e53565b925086831115612be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bda906138e9565b60405180910390fd5b84818389901c161015612c2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c22906138e9565b60405180910390fd5b612c6b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6290613a29565b60405180910390fd5b5b5050949350505050565b600080823f90506000801b8114158015612cb357507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b8114155b915050919050565b600080612cc785611642565b8092508193505050612d2a6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020548286866129be565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550505050505050565b6000612d98612d9384613b12565b613aed565b90508083825260208201905082856020860282011115612db757600080fd5b60005b85811015612de75781612dcd8882612e9b565b845260208401935060208301925050600181019050612dba565b5050509392505050565b6000612e04612dff84613b3e565b613aed565b90508083825260208201905082856020860282011115612e2357600080fd5b60005b85811015612e535781612e398882612f6d565b845260208401935060208301925050600181019050612e26565b5050509392505050565b6000612e70612e6b84613b6a565b613aed565b905082815260208101848484011115612e8857600080fd5b612e93848285613efb565b509392505050565b600081359050612eaa8161461e565b92915050565b600082601f830112612ec157600080fd5b8135612ed1848260208601612d85565b91505092915050565b600082601f830112612eeb57600080fd5b8135612efb848260208601612df1565b91505092915050565b600081359050612f1381614635565b92915050565b600081359050612f288161464c565b92915050565b600081519050612f3d8161464c565b92915050565b600082601f830112612f5457600080fd5b8135612f64848260208601612e5d565b91505092915050565b600081359050612f7c81614663565b92915050565b600060208284031215612f9457600080fd5b6000612fa284828501612e9b565b91505092915050565b60008060408385031215612fbe57600080fd5b6000612fcc85828601612e9b565b9250506020612fdd85828601612e9b565b9150509250929050565b600080600080600060a08688031215612fff57600080fd5b600061300d88828901612e9b565b955050602061301e88828901612e9b565b945050604086013567ffffffffffffffff81111561303b57600080fd5b61304788828901612eda565b935050606086013567ffffffffffffffff81111561306457600080fd5b61307088828901612eda565b925050608086013567ffffffffffffffff81111561308d57600080fd5b61309988828901612f43565b9150509295509295909350565b600080600080600060a086880312156130be57600080fd5b60006130cc88828901612e9b565b95505060206130dd88828901612e9b565b94505060406130ee88828901612f6d565b93505060606130ff88828901612f6d565b925050608086013567ffffffffffffffff81111561311c57600080fd5b61312888828901612f43565b9150509295509295909350565b60008060006060848603121561314a57600080fd5b600061315886828701612e9b565b935050602084013567ffffffffffffffff81111561317557600080fd5b61318186828701612eda565b925050604084013567ffffffffffffffff81111561319e57600080fd5b6131aa86828701612eda565b9150509250925092565b600080600080608085870312156131ca57600080fd5b60006131d887828801612e9b565b945050602085013567ffffffffffffffff8111156131f557600080fd5b61320187828801612eda565b935050604085013567ffffffffffffffff81111561321e57600080fd5b61322a87828801612eda565b925050606085013567ffffffffffffffff81111561324757600080fd5b61325387828801612f43565b91505092959194509250565b6000806040838503121561327257600080fd5b600061328085828601612e9b565b925050602061329185828601612f04565b9150509250929050565b600080604083850312156132ae57600080fd5b60006132bc85828601612e9b565b92505060206132cd85828601612f6d565b9150509250929050565b600080604083850312156132ea57600080fd5b600083013567ffffffffffffffff81111561330457600080fd5b61331085828601612eb0565b925050602083013567ffffffffffffffff81111561332d57600080fd5b61333985828601612eda565b9150509250929050565b60006020828403121561335557600080fd5b600061336384828501612f19565b91505092915050565b60006020828403121561337e57600080fd5b600061338c84828501612f2e565b91505092915050565b6000602082840312156133a757600080fd5b60006133b584828501612f6d565b91505092915050565b600080604083850312156133d157600080fd5b60006133df85828601612f6d565b92505060206133f085828601612f6d565b9150509250929050565b6000613406838361371a565b60208301905092915050565b61341b81613e87565b82525050565b600061342c82613bab565b6134368185613bce565b935061344183613b9b565b8060005b8381101561347257815161345988826133fa565b975061346483613bc1565b925050600181019050613445565b5085935050505092915050565b61348881613e99565b82525050565b600061349982613bb6565b6134a38185613bdf565b93506134b3818560208601613f0a565b6134bc81614075565b840191505092915050565b60006134d4603983613bf0565b91506134df82614093565b604082019050919050565b60006134f7603d83613bf0565b9150613502826140e2565b604082019050919050565b600061351a602683613bf0565b915061352582614131565b604082019050919050565b600061353d603383613bf0565b915061354882614180565b604082019050919050565b6000613560603783613bf0565b915061356b826141cf565b604082019050919050565b6000613583604283613bf0565b915061358e8261421e565b606082019050919050565b60006135a6604c83613bf0565b91506135b182614293565b606082019050919050565b60006135c9603c83613bf0565b91506135d482614308565b604082019050919050565b60006135ec602083613bf0565b91506135f782614357565b602082019050919050565b600061360f603d83613bf0565b915061361a82614380565b604082019050919050565b6000613632603683613bf0565b915061363d826143cf565b604082019050919050565b6000613655604783613bf0565b91506136608261441e565b606082019050919050565b6000613678603883613bf0565b915061368382614493565b604082019050919050565b600061369b604583613bf0565b91506136a6826144e2565b606082019050919050565b60006136be600f83613bf0565b91506136c982614557565b602082019050919050565b60006136e1603e83613bf0565b91506136ec82614580565b604082019050919050565b6000613704603283613bf0565b915061370f826145cf565b604082019050919050565b61372381613ef1565b82525050565b61373281613ef1565b82525050565b600060208201905061374d6000830184613412565b92915050565b600060a0820190506137686000830188613412565b6137756020830187613412565b81810360408301526137878186613421565b9050818103606083015261379b8185613421565b905081810360808301526137af818461348e565b90509695505050505050565b600060a0820190506137d06000830188613412565b6137dd6020830187613412565b6137ea6040830186613729565b6137f76060830185613729565b8181036080830152613809818461348e565b90509695505050505050565b6000602082019050818103600083015261382f8184613421565b905092915050565b600060408201905081810360008301526138518185613421565b905081810360208301526138658184613421565b90509392505050565b6000602082019050613883600083018461347f565b92915050565b600060208201905081810360008301526138a2816134c7565b9050919050565b600060208201905081810360008301526138c2816134ea565b9050919050565b600060208201905081810360008301526138e28161350d565b9050919050565b6000602082019050818103600083015261390281613530565b9050919050565b6000602082019050818103600083015261392281613553565b9050919050565b6000602082019050818103600083015261394281613576565b9050919050565b6000602082019050818103600083015261396281613599565b9050919050565b60006020820190508181036000830152613982816135bc565b9050919050565b600060208201905081810360008301526139a2816135df565b9050919050565b600060208201905081810360008301526139c281613602565b9050919050565b600060208201905081810360008301526139e281613625565b9050919050565b60006020820190508181036000830152613a0281613648565b9050919050565b60006020820190508181036000830152613a228161366b565b9050919050565b60006020820190508181036000830152613a428161368e565b9050919050565b60006020820190508181036000830152613a62816136b1565b9050919050565b60006020820190508181036000830152613a82816136d4565b9050919050565b60006020820190508181036000830152613aa2816136f7565b9050919050565b6000602082019050613abe6000830184613729565b92915050565b6000604082019050613ad96000830185613729565b613ae66020830184613729565b9392505050565b6000613af7613b08565b9050613b038282613f3d565b919050565b6000604051905090565b600067ffffffffffffffff821115613b2d57613b2c614046565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b5957613b58614046565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b8557613b84614046565b5b613b8e82614075565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613c0c82613ef1565b9150613c1783613ef1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613c4c57613c4b613fe8565b5b828201905092915050565b6000613c6282613ef1565b9150613c6d83613ef1565b925082613c7d57613c7c614017565b5b828204905092915050565b6000808291508390505b6001851115613cd257808604811115613cae57613cad613fe8565b5b6001851615613cbd5780820291505b8081029050613ccb85614086565b9450613c92565b94509492505050565b6000613ce682613ef1565b9150613cf183613ef1565b9250613d1e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613d26565b905092915050565b600082613d365760019050613df2565b81613d445760009050613df2565b8160018114613d5a5760028114613d6457613d93565b6001915050613df2565b60ff841115613d7657613d75613fe8565b5b8360020a915084821115613d8d57613d8c613fe8565b5b50613df2565b5060208310610133831016604e8410600b8410161715613dc85782820a905083811115613dc357613dc2613fe8565b5b613df2565b613dd58484846001613c88565b92509050818404811115613dec57613deb613fe8565b5b81810290505b9392505050565b6000613e0482613ef1565b9150613e0f83613ef1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e4857613e47613fe8565b5b828202905092915050565b6000613e5e82613ef1565b9150613e6983613ef1565b925082821015613e7c57613e7b613fe8565b5b828203905092915050565b6000613e9282613ed1565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613f28578082015181840152602081019050613f0d565b83811115613f37576000848401525b50505050565b613f4682614075565b810181811067ffffffffffffffff82111715613f6557613f64614046565b5b80604052505050565b6000613f7982613ef1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fac57613fab613fe8565b5b600182019050919050565b6000613fc282613ef1565b9150613fcd83613ef1565b925082613fdd57613fdc614017565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f455243313135355061636b656442616c616e63652362616c616e63654f66426160008201527f7463683a20494e56414c49445f41525241595f4c454e47544800000000000000602082015250565b7f455243313135355061636b656442616c616e636523736166654261746368547260008201527f616e7366657246726f6d3a20494e56414c49445f524543495049454e54000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313135355061636b656442616c616e6365235f7669657755706461746560008201527f42696e56616c75653a20554e444552464c4f5700000000000000000000000000602082015250565b7f455243313135355061636b656442616c616e636523736166655472616e73666560008201527f7246726f6d3a20494e56414c49445f4f50455241544f52000000000000000000602082015250565b7f455243313135355061636b656442616c616e6365235f7361666542617463685460008201527f72616e7366657246726f6d3a20494e56414c49445f4152524159535f4c454e4760208201527f5448000000000000000000000000000000000000000000000000000000000000604082015250565b7f455243313135355061636b656442616c616e6365235f63616c6c6f6e4552433160008201527f313535426174636852656365697665643a20494e56414c49445f4f4e5f52454360208201527f454956455f4d4553534147450000000000000000000000000000000000000000604082015250565b7f455243313135355061636b656442616c616e636523736166654261746368547260008201527f616e7366657246726f6d3a20494e56414c49445f4f50455241544f5200000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f455243313135354d696e744275726e5061636b656442616c616e63652362617460008201527f63684275726e3a20494e56414c49445f4152524159535f4c454e475448000000602082015250565b7f455243313135355061636b656442616c616e6365235f7361666542617463685460008201527f72616e7366657246726f6d3a20554e444552464c4f5700000000000000000000602082015250565b7f455243313135355061636b656442616c616e6365235f63616c6c6f6e4552433160008201527f31353552656365697665643a20494e56414c49445f4f4e5f524543454956455f60208201527f4d45535341474500000000000000000000000000000000000000000000000000604082015250565b7f455243313135355061636b656442616c616e636523736166655472616e73666560008201527f7246726f6d3a20494e56414c49445f524543495049454e540000000000000000602082015250565b7f455243313135355061636b656442616c616e6365235f7669657755706461746560008201527f42696e56616c75653a20494e56414c49445f42494e5f57524954455f4f50455260208201527f4154494f4e000000000000000000000000000000000000000000000000000000604082015250565b7f4e4f5420544845204449414d4f4e440000000000000000000000000000000000600082015250565b7f455243313135354d696e744275726e5061636b656442616c616e6365235f626160008201527f7463684d696e743a20494e56414c49445f4152524159535f4c454e4754480000602082015250565b7f455243313135355061636b656442616c616e6365235f7669657755706461746560008201527f42696e56616c75653a204f564552464c4f570000000000000000000000000000602082015250565b61462781613e87565b811461463257600080fd5b50565b61463e81613e99565b811461464957600080fd5b50565b61465581613ea5565b811461466057600080fd5b50565b61466c81613ef1565b811461467757600080fd5b5056fea2646970667358221220bb2949ff73058fa508d9f4354599e845ae14544814a47cb5c7cf24b1996ad19264736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_id": "ID of the Token",
          "_owner": "The address of the token holder"
        },
        "returns": {
          "_0": "The _owner's balance of the Token type requested"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "_ids": "ID of the Tokens (sorted ids will lead to less gas usage",
          "_owners": "The addresses of the token holders (sorted owners will lead to less gas usage)"
        },
        "returns": {
          "_0": "The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"
        }
      },
      "getIDBinIndex(uint256)": {
        "params": {
          "_id": "Token id"
        },
        "returns": {
          "bin": "index (Bin number, ID\"s index within that bin)"
        }
      },
      "getValueInBin(uint256,uint256)": {
        "params": {
          "_binValues": "uint256 containing the balances of IDS_PER_UINT256 ids",
          "_index": "Index at which to retrieve amount"
        },
        "returns": {
          "_0": "amount at given _index in _bin"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "Address of authorized operator",
          "_owner": "The owner of the Tokens"
        },
        "returns": {
          "isOperator": "True if the operator is approved, false if not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "Arrays should be sorted so that all ids in a same storage slot are adjacent (more efficient)",
        "params": {
          "_amounts": "Transfer amounts per token type",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source addresses",
          "_ids": "IDs of each token type",
          "_to": "Target addresses"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "_amount": "Transfered amount",
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "Source address",
          "_id": "ID of the token type",
          "_to": "Target address"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "_approved": "True if the operator is approved, false to revoke approval",
          "_operator": "Address to add to the set of authorized operators"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `_interfaceID` and"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "Get the balance of an account's Tokens"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "Get the balance of multiple account/token pairs"
      },
      "getIDBinIndex(uint256)": {
        "notice": "Return the bin number and index within that bin where ID is"
      },
      "getValueInBin(uint256,uint256)": {
        "notice": "Return amount in _binValues at position _index"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of an operator for a given owner"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Send multiple types of Tokens from the _from address to the _to address (with safety call)"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers amount amount of an _id from the _from address to the _to address specified"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16247,
        "contract": "contracts/tokens/ResourceTokens.sol:ResourceTokens",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 16253,
        "contract": "contracts/tokens/ResourceTokens.sol:ResourceTokens",
        "label": "operators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2769,
        "contract": "contracts/tokens/ResourceTokens.sol:ResourceTokens",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17429,
        "contract": "contracts/tokens/ResourceTokens.sol:ResourceTokens",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17431,
        "contract": "contracts/tokens/ResourceTokens.sol:ResourceTokens",
        "label": "diamond",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 17433,
        "contract": "contracts/tokens/ResourceTokens.sol:ResourceTokens",
        "label": "tax",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}